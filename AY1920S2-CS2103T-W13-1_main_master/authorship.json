[
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         title\u003d\"EYLAH\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 60
    }
  },
  {
    "path": "bin/main/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 35
    }
  },
  {
    "path": "bin/main/view/PersonListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 8
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import seedu.eylah.addressbook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root type\u003d\"seedu.eylah.addressbook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "mainClassName \u003d \u0027seedu.eylah.Eylah\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    archiveName \u003d \u0027eylah.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        \u0027site-name\u0027: \u0027EYLAH\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W13-1/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1,
      "sheexiong": 4,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/eylah/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/eylah/Eylah.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.storage.FoodBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonFoodBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.util.SamplePersonAmountDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.util.SampleReceiptDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonPersonAmountBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonReceiptBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.PersonAmountStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.ReceiptStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * The main entry for the EYLAH."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Eylah {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Eylah.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    protected Logic dietLogic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    protected Model dietModel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    protected seedu.eylah.expensesplitter.logic.Logic splitterLogic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    protected seedu.eylah.expensesplitter.model.Model splitterModel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Runs the application until termination."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Setup the required objects and show welcome message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui \u003d new UiManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Reads the user command and executes it, until the user enter the exit command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        run1(); //temporary for testing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows exit message and exits."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Starting point for whole application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Eylah eylah \u003d new Eylah();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            eylah.run();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(e.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Main method to run the application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * For now just ignore these messy code, this is a temporary code for testing purpose."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * After start the app, only can choose to run in diet or splitter mode,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * the way to exit the app just simply close the app in terminal."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void run1() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        //System.out.println(\"Enter mode (diet/splitting): \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (input.equals(\"1\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            // Diet mode"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Config config;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            config \u003d initConfig(null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            seedu.eylah.diettracker.storage.UserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    new seedu.eylah.diettracker.storage.JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            seedu.eylah.diettracker.model.UserPrefs userPrefs \u003d initPrefsDiet(userPrefsStorage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            FoodBookStorage foodBookStorage \u003d new JsonFoodBookStorage(userPrefs.getFoodBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            seedu.eylah.diettracker.storage.Storage storage \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    new seedu.eylah.diettracker.storage.StorageManager(foodBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logger.info(\"Entering Diet MODE.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            dietModel \u003d initModelManagerDiet(storage, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            dietLogic \u003d new LogicManager(dietModel, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                System.out.println(\"Enter Diet Command: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    CommandResult commandResult \u003d dietLogic.execute(input);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    // Here will print out the respond to user"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ui.showResult(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            // Splitting mode"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            System.out.println(\"Entering Splitting MODE.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Config config;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Storage storage;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            config \u003d initConfig(null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            PersonAmountStorage personAmountStorage \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    new JsonPersonAmountBookStorage(userPrefs.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReceiptStorage receiptStorage \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    new JsonReceiptBookStorage(userPrefs.getReceiptFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            storage \u003d new StorageManager(personAmountStorage, userPrefsStorage, receiptStorage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            splitterModel \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            splitterLogic \u003d new seedu.eylah.expensesplitter.logic.LogicManager(splitterModel, storage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                System.out.println(\"Enter Splitting Command: \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    seedu.eylah.expensesplitter.logic.commands.CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                            splitterLogic.execute(input);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    // Here will print out the respond to user"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ui.showResult(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                } catch (seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                        | seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s personamountbook and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The data from the sample personamount book will be used instead if {@code storage}\u0027s personamountbook"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * is not found,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * or an personamount book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private seedu.eylah.expensesplitter.model.Model initModelManager(Storage storage, ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        userPrefs) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Optional\u003cReadOnlyPersonAmountBook\u003e personAmountBookOptional;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Optional\u003cReadOnlyReceiptBook\u003e receiptBookOptional;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReadOnlyPersonAmountBook initialPersonData;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReadOnlyReceiptBook initialReceiptData;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            personAmountBookOptional \u003d storage.readPersonAmountBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            receiptBookOptional \u003d storage.readReceiptBook();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            if (personAmountBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PersonAmountBook\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            if (receiptBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ReceiptBook\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialPersonData \u003d personAmountBookOptional"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .orElseGet(SamplePersonAmountDataUtil::getSamplePersonAmountBook);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialReceiptData \u003d receiptBookOptional.orElseGet(SampleReceiptDataUtil::getSampleReceiptBook);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    + \"PersonAmountBook and ReceiptBook\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialPersonData \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialReceiptData \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    + \"PersonAmountBook and ReceiptBook\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialPersonData \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            initialReceiptData \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new seedu.eylah.expensesplitter.model.ModelManager(initialReceiptData, initialPersonData, userPrefs);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Model initModelManagerDiet(FoodBookStorage storage,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                                                         seedu.eylah.diettracker.model.ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Optional\u003cseedu.eylah.diettracker.model.ReadOnlyFoodBook\u003e foodBookOptional;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        seedu.eylah.diettracker.model.ReadOnlyFoodBook initialData;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodBookOptional \u003d storage.readFoodBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (!foodBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FoodBook\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initialData \u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    foodBookOptional.orElseGet(seedu.eylah.diettracker.model.util.SampleDataUtil::getSampleFoodBook);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FoodBook\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initialData \u003d new FoodBook();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodBook\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initialData \u003d new FoodBook();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PersonAmountBook\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    protected seedu.eylah.diettracker.model.UserPrefs"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        initPrefsDiet(seedu.eylah.diettracker.storage.UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        seedu.eylah.diettracker.model.UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Optional\u003cseedu.eylah.diettracker.model.UserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new seedu.eylah.diettracker.model.UserPrefs());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initializedPrefs \u003d new seedu.eylah.diettracker.model.UserPrefs();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            initializedPrefs \u003d new seedu.eylah.diettracker.model.UserPrefs();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 155,
      "WillySeahh": 125,
      "akhilvuputuri": 79
    }
  },
  {
    "path": "src/main/java/seedu/eylah/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.ui.UiManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Version;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 24,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @see seedu.eylah.addressbook.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 8,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 12,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Person(updatedName, updatedTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 3,
      "akhilvuputuri": 11,
      "-": 162
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person person \u003d new Person(name, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 3,
      "akhilvuputuri": 9,
      "WillySeahh": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 13,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "akhilvuputuri": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 4,
      "akhilvuputuri": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/UniquePersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"David Li\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 6,
      "akhilvuputuri": 6,
      "WillySeahh": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a storage for {@link seedu.eylah.addressbook.model.AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Person(modelName, modelTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 2,
      "akhilvuputuri": 5,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/JsonAddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a storage for {@link seedu.eylah.addressbook.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Saves the given {@link seedu.eylah.addressbook.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "         * @see seedu.eylah.addressbook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @see seedu.eylah.addressbook.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 8,
      "-": 185
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/PersonListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/addressbook/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getPersonAmountFilePath();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path foodBookFilePath \u003d Paths.get(\"data\" , \"foodbook.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path personAmountFilePath \u003d Paths.get(\"data\", \"personamount.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path receiptFilePath \u003d Paths.get(\"data\", \"receiptbook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UserPrefs(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setFoodBookFilePath(newUserPrefs.getFoodBookFilePath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setPersonAmountFilePath(newUserPrefs.getPersonAmountFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setReceiptFilePath(newUserPrefs.getReceiptFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the FoodBook file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return FoodBook file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return foodBookFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the FoodBook file path based on the given path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param foodBookFilePath the given file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setFoodBookFilePath(Path foodBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(foodBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.foodBookFilePath \u003d foodBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the PersonAmount file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return PersonAmount file path"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getPersonAmountFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return personAmountFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the Person Amount file path based on the given path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param personAmountFilePath the given file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setPersonAmountFilePath(Path personAmountFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(personAmountFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.personAmountFilePath \u003d personAmountFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the Receipt file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return Receipt file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the Receipt file path based on the given path."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptFilePath the given file path."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceiptFilePath(Path receiptFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receiptFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptFilePath \u003d receiptFilePath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return foodBookFilePath.equals(o.foodBookFilePath)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 personAmountFilePath.equals(o.personAmountFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return Objects.hash(foodBookFilePath, personAmountFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        sb.append(String.format(\"Local data file location : %s %s\", foodBookFilePath, personAmountFilePath));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 124
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 35
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/CalculateUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.MathContext;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Functions for handling calculations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class CalculateUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Calculates the price per person by dividing the cost of item with the number of persons involved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param itemPrice Price of the item."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param numPersons Number of persons sharing the cost of the item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Price per person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount calculatePricePerPerson(BigDecimal itemPrice, BigDecimal numPersons) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal pricePerPerson \u003d itemPrice.divide(numPersons,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new MathContext(3, RoundingMode.HALF_DOWN));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(pricePerPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code toBeAdded} cost to the {@code original} amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param original Original amount."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param toBeAdded Amount to be added to the original amount."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return New total amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount addAmount(BigDecimal original, BigDecimal toBeAdded) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(original.add(toBeAdded));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Subtracts {@code toBeRemoved} cost from the {@code original} amount."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param original Original amount."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param toBeRemoved Amount to be subtracted from the original amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return New total amount."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount removeAmount(BigDecimal original, BigDecimal toBeRemoved) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(original.subtract(toBeRemoved));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 48,
      "WillySeahh": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths@get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "WillySeahh": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the FoodBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @see seedu.eylah.diettracker.model.Model#getFoodBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ReadOnlyFoodBook getFoodBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 10,
      "akhilvuputuri": 41
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.FoodBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.storage.FoodBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FoodBookStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FoodBookParser foodBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public LogicManager(Model model, FoodBookStorage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBookParser \u003d new FoodBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Command command \u003d foodBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            storage.saveFoodBook(model.getFoodBook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(e.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFoodBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFoodBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1,
      "akhilvuputuri": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Adds a food to the food book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the food book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_CALORIES + \" CALORIES \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_TAG + \" [TAGS] \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Food Added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in the food book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public AddCommand(Food food) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 51
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/BmiCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Bmi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Calculates BMI. BMI is calculated based on one of the following:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * If there is height and weight input, then it will be based on that."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * If not, it will calculate based on the internal height and weight"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * previously recorded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class BmiCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bmi\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: [-h HEIGHT (must be in centimeters)] [-w WEIGHT (must be in kilograms)]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -h 170 -w 65\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CALCULATE_BMI_SUCCESS \u003d \"The BMI Calculated is: %1$s\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Your BMI is in the %2$s category.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Bmi bmi;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that does not include Height and Weight."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        height \u003d Self.getHeight();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        weight \u003d Self.getWeight();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        bmi \u003d new Bmi(height, weight);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Height and Weight."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand(Height height, Weight weight) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.bmi \u003d new Bmi(height, weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (bmi.getBmi() \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CALCULATE_BMI_SUCCESS, bmi, bmi.getCategory()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof BmiCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 height.equals(((BmiCommand) other).height) // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weight.equals(((BmiCommand) other).weight)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 71
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 70
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Deletes a food identified using it\u0027s displayed index from the food book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \": Deletes the food identified by the index number used in the displayed food list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds a food to the food book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a food in the food book. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"by the index number used in the displayed food list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \" CALORIES] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" TAG] \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food Edited: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in the food book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates an EditCommand to edit the specified {@code Food}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(editFoodDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.editFoodDescriptor \u003d editFoodDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!foodToEdit.isSameFood(editedFood) \u0026\u0026 model.hasFood(editedFood)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setFood(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.updateFilteredFoodList(Model.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * edited with {@code editFoodDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Calories updatedCalories \u003d editFoodDescriptor.getCalories().orElse(foodToEdit.getCalories());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Food(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Stores the details to edit the food with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * corresponding field value of the food."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, calories, date, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (!(other instanceof EditFoodDescriptor)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 204
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/HeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds the height of the user in centimeters."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class HeightCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"height\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: HEIGHT (must be in centimeters)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"170\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_ADD_HEIGHT_SUCCESS \u003d \"Added Height: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Height."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public HeightCommand(Height height) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (height.getHeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setHeight(height);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_HEIGHT_SUCCESS, height.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof HeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 height.equals(((HeightCommand) other).height)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 52
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 21
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Lists all food and their calories."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": lists all food in the book. Use tags to list \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"different things.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: [-f] [-d] [-t [numDays]] [-e [tag]]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All foods over period based on input tag has been listed.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private String mode \u003d \"-d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private int numDays;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a ListCommand to list the foods consumed for a certain duration of time based on the input mode."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand(String mode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a ListCommand to list the foods over the last numDays number of days."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand(String mode, int numDays) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.numDays \u003d numDays;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates a ListCommand to list all food with the given tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ListCommand(String mode, Tag tag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String listString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            // date till which to obtain food logged"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Date limit \u003d new Date(LocalDateTime.now().minusDays((long) numDays));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Predicate\u003cFood\u003e datePredicate \u003d food -\u003e food.getDate().isAfter(limit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            model.updateFilteredFoodList(datePredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            String listDays \u003d model.listFoods(mode, numDays);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new CommandResult(String.format(listDays));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (mode.equals(\"-e\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Predicate\u003cFood\u003e tagPredicate \u003d food -\u003e food.getTags().contains(this.tag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            model.updateFilteredFoodList(tagPredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            String listTag \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new CommandResult(listTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            String listAll \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new CommandResult(listAll);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 53,
      "akhilvuputuri": 31
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/ModeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Sets the Mode of the Diet Tracker depending on user preferences. The 3 modes available are"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * -l for weight loss, -g for weight gain, and -m for maintaining weight."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the mode in which you want to use the diet app \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"for tracking. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: [-l] [-g] [-m]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode Change Successful: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Mode mode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ModeCommand(Mode mode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setMode(mode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mode));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof ModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 mode.equals(((ModeCommand) other).mode));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/WeightCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds the weight of the user in kilograms."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class WeightCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"weight\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: WEIGHT (must be in kilograms)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"65.3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_ADD_WEIGHT_SUCCESS \u003d \"Added Weight: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Weight."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public WeightCommand(Weight weight) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (weight.getWeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setWeight(weight);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_WEIGHT_SUCCESS, weight.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof WeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weight.equals(((WeightCommand) other).weight)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 52
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food food \u003d new Food(name, calories, tagList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new AddCommand(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 148
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/BmiCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class BmiCommandParser implements Parser\u003cBmiCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BmiCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an BmiCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HEIGHT, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Height height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Weight weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BmiCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_HEIGHT) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_WEIGHT)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            height \u003d Self.getHeight();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            weight \u003d Self.getWeight();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (height \u003d\u003d null || weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                throw new ParseException(\"You did not set your own height and weight yet.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (!arePrefixesPresent(argMultimap, PREFIX_HEIGHT)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            height \u003d Self.getHeight();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                throw new ParseException(\"You did not set your own height yet.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (!arePrefixesPresent(argMultimap, PREFIX_WEIGHT)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            weight \u003d Self.getWeight();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                throw new ParseException(\"You did not set your own weight yet.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new BmiCommand(height, weight);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 70
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"-c\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"-h\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"-w\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_ALL \u003d new Prefix(\"-f\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_LIST_TAG \u003d new Prefix(\"-e\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_SINGLE \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_DAYS \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_LOSS \u003d new Prefix(\"-l\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_GAIN \u003d new Prefix(\"-g\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_MAINTAIN \u003d new Prefix(\"-m\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9,
      "akhilvuputuri": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        .tokenize(args, PREFIX_INDEX, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand.EditFoodDescriptor editFoodDescriptor \u003d new EditCommand.EditFoodDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            editFoodDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            editFoodDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!editFoodDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new EditCommand(index, editFoodDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 85
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/FoodBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HeightCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case HeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new HeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case WeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new WeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case BmiCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new BmiCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case ModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //    return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //    return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //    return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 65,
      "akhilvuputuri": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/HeightCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HeightCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new HeightCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class HeightCommandParser implements Parser\u003cHeightCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HeightCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an HeightCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public HeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Height height \u003d ParserUtil.parseHeight(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new HeightCommand(height);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_LIST_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_SINGLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALL, PREFIX_SINGLE, PREFIX_DAYS, PREFIX_LIST_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String mode \u003d \"-d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ALL)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d \"-f\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_SINGLE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d \"-d\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_DAYS)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d \"-t\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_LIST_TAG)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            mode \u003d \"-e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            int numDays \u003d ParserUtil.parseDays(argMultimap.getValue(PREFIX_DAYS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommand(mode, numDays);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (mode.equals(\"-e\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_LIST_TAG).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new ListCommand(mode, tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommand(mode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 56,
      "akhilvuputuri": 9
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ModeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_GAIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_LOSS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_MAINTAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new ModeCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModeCommandParser implements Parser\u003cModeCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModeCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an ModeCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LOSS, PREFIX_GAIN, PREFIX_MAINTAIN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Mode mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_LOSS)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.LOSS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_GAIN)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.GAIN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MAINTAIN)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new ModeCommand(mode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 54
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses a {@code String name} into a {@code Calories}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String trimmedName \u003d calories.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Calories(Long.parseLong(trimmedName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static int parseDays(String days) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedDays \u003d days.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result \u003d Integer.parseInt(trimmedDays);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Should only input numeric characters\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 50,
      "akhilvuputuri": 92
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(obj instanceof seedu.eylah.addressbook.logic.parser.Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        seedu.eylah.addressbook.logic.parser.Prefix otherPrefix \u003d (seedu.eylah.addressbook.logic.parser.Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 39
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/WeightCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new WeightCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class WeightCommandParser implements Parser\u003cWeightCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WeightCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an WeightCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public WeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Weight weight \u003d ParserUtil.parseWeight(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new WeightCommand(weight);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/FoodBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBook implements ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a FoodBook using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook(ReadOnlyFoodBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.foods.setFoods(foods);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Resets the existing data of this {@code FoodBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData(ReadOnlyFoodBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setFoods(newData.getFoodList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the food book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a food to the food book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must not already exist in the food book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foods.add(food);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the given food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code target} must exist in the food book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods.setFood(target, editedFood);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Removes {@code key} from this {@code FoodBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code key} must exist in the food book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.asUnmodifiableObservableList().size() + \" foods\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof FoodBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 foods.equals(((FoodBook) other).foods));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 115,
      "akhilvuputuri": 5
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/Mode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * This is the class the represents the enum for the different modes of the diet tracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    LOSS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    GAIN,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    MAINTAIN"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Sets the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFoodBookFilePath(Path foodBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces food book data with the data in {@code foodBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFoodBook(ReadOnlyFoodBook foodBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Returns the FoodBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ReadOnlyFoodBook getFoodBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the food book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The food must exist in the food book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code food} must not already exist in the food book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Edits the given food."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code food} must already exist in the food book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //void editFood(Food food);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code target} must exist in the food book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /** Returns the String format of the foods consumed over the last number of days."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    String listFoods(String mode, int numDays);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /** Returns the String format of the foods based on the mode input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    String listFoods(String mode);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    String listFoods(String mode, String tag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setHeight(Height height);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setWeight(Weight weight);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setMode(Mode mode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 23,
      "akhilvuputuri": 90
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FoodBook foodBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Mode mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ModelManager(ReadOnlyFoodBook foodBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(foodBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + foodBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBook \u003d new FoodBook(foodBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodBook.getFoodList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this(new FoodBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return userPrefs.getFoodBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setFoodBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        userPrefs.setFoodBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setFoodBook(ReadOnlyFoodBook addressBook) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBook.resetData(foodBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook.hasFood(food);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.removeFood(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.addFood(food);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.setFood(target, editedFood);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String listFoods(String mode) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String result \u003d \"The food list based on the input flag \u0027\" + mode + \"\u0027 is as follows:\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (Food food: filteredFoods) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result +\u003d count + \". \" + food.toString() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String listFoods(String mode, int numDay) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String result \u003d \"The food list based on the input flag \u0027\" + mode + \"\u0027 is as follows:\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (Food food: filteredFoods) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result +\u003d count + \". \" + food.toString() + \"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String listFoods(String mode, String tag) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String result \u003d \"The food list based on the input flag \u0027\" + mode + \"\u0027 is as follows:\\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (Food food: filteredFoods) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            result +\u003d count + \". \" + food.toString() + \"\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food Book Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook.equals(other.foodBook)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Self \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setHeight(Height height) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Self.setHeight(height);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Self.setWeight(weight);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Self.setMode(mode);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 44,
      "sheexiong": 70,
      "akhilvuputuri": 91
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/ReadOnlyFoodBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 15,
      "akhilvuputuri": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Path foodBookFilePath \u003d Paths.get(\"data\" , \"foodbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        setFoodBookFilePath(newUserPrefs.getFoodBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setFoodBookFilePath(Path foodBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(foodBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBookFilePath \u003d foodBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 foodBookFilePath.equals(o.foodBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Objects.hash(guiSettings, foodBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Calories.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s calories count in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalories(long)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long LONG_ZERO \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            \"Calories count should be zero or a positive whole number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final long value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param calories A valid calories number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories(long calories) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d calories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public long getValue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a given string is a valid calories."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static boolean isValidCalories(long test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return test \u003e\u003d LONG_ZERO;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Calories) other).value); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Long.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 55
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s date created in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Date} at current time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Date} at dateTime given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param date string given in the format 2007-12-03T10:15:30"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (date \u003d\u003d null || date \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.value \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.value \u003d LocalDateTime.parse(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date(LocalDateTime date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public LocalDateTime getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.isBefore(other.getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.isAfter(other.getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.toLocalDate().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.equals(otherDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 77
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Every field must be present"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * name and calories fields must not be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food(Name name, Calories calories, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(name, calories);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food(Name name, Calories calories, Date date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(name, calories);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if both food of the same name have the same calories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getCalories().equals(getCalories());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if both food have the same identity and data fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * This defines a stronger notion of equality between two food."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getDate().equals(getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Objects.hash(name, calories, date, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(getCalories())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(\" At: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(getDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 121
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s name in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().name, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 31
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/UniqueFoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A list of foods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * foodss uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * as to ensure that the food with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 133,
      "akhilvuputuri": 4
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Signals that the operation will result in duplicate Foods (Foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        super(\"Operation would result in duplicate foods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 10,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 5,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Bmi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the BMI in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Bmi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Please input a height and a weight to calculate BMI\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the height must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final String bmi;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float bmiFloat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Bmi(Height height, Weight weight) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidHeight(height.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidWeight(weight.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height.getHeightFloat();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight.getWeightFloat();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.bmiFloat \u003d calcBmi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.bmi \u003d this.bmiFloat.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (bmiFloat \u003c 25.0 \u0026\u0026 bmiFloat \u003e\u003d 18.5) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Normal\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003e\u003d 16.0 \u0026\u0026 bmiFloat \u003c 18.5) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Underweight\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003c 16.0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Severely Underweight\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003e\u003d 25.0 \u0026\u0026 bmiFloat \u003c 30.0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Overweight\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Obese\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Method to calculate BMI. Formula used to calculate BMI is"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Weight (in kilograms) divided by Height squared (in metres^2)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @return Float of the BMI value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Float calcBmi() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Weight/Height^2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        float result \u003d (float) (this.weight / Math.pow(this.height / 100, 2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getBmi() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.bmiFloat;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return \"\" + bmi;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 bmi.equals(((Bmi) other).bmi)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return bmi.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 104
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Height.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the user\u0027s height in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Height should only contain numbers, and it should not be blank. It is to be input in centimeters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the height must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final String heightString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Float heightFloat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param heightString A valid height."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Height(String heightString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(heightString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidHeight(heightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightString \u003d heightString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightFloat \u003d Float.parseFloat(this.heightString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getHeightFloat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.heightFloat;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return \"\" + heightString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 heightString.equals(((Height) other).heightString)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return heightString.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 62,
      "akhilvuputuri": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Self.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents a User in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Self {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static Height height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static Weight weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static Mode mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Every field must be present"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * height and weight fields must not be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Self(Height height, Weight weight) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(height, weight);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Height getHeight() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Weight getWeight() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static Mode getMode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void setHeight(Height newHeight) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        height \u003d newHeight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void setWeight(Weight newWeight) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        weight \u003d newWeight;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void setMode(Mode newMode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        mode \u003d newMode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Objects.hash(height, weight, mode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        builder.append(\" Height: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getHeight())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(\" Weight: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getWeight())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(\" Mode: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getMode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 63,
      "akhilvuputuri": 2,
      "WillySeahh": 7
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Weight.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the user\u0027s weight in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Weight should only be a floating point number, and it should not be blank. It is to be input in \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"kilograms.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the weight must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final String weightString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Float weightFloat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param weightString A valid weight."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Weight(String weightString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(weightString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidWeight(weightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightString \u003d weightString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightFloat \u003d Float.parseFloat(this.weightString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getWeightFloat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.weightFloat;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weightString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weightString.equals(((Weight) other).weightString)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weightString.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 63,
      "akhilvuputuri": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Burger\"), new Calories(290), getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Fries\"), new Calories(120), getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Coke\"), new Calories(150), getTagSet(\"fastfood\", \"drinks\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Hotdog\"), new Calories(230), getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Spaghetti\"), new Calories(450), getTagSet(\"italian\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Sandwich\"), new Calories(300), getTagSet(\"healthy\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static ReadOnlyFoodBook getSampleFoodBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook sampleFb \u003d new FoodBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (Food sampleFood: getSampleFoods()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            sampleFb.addFood(sampleFood);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return sampleFb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 47
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/FoodBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a storage for {@link FoodBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface FoodBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns FoodBook data as a {@link ReadOnlyFoodBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #getFoodBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param foodBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #saveFoodBook(ReadOnlyFoodBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 41,
      "akhilvuputuri": 5
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonAdaptedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final long calories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"calories\") long calories,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d source.getDate().getStorageString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Date modelDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (date !\u003d null || date !\u003d \"\") {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            modelDate \u003d new Date();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food(modelName, modelCalories, modelDate, modelTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 48
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonFoodBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A class to access FoodBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class JsonFoodBookStorage implements FoodBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonFoodBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return readFoodBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Similar to {@link #readFoodBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Optional\u003cJsonSerializableFoodBook\u003e jsonFoodBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                filePath, JsonSerializableFoodBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!jsonFoodBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return Optional.of(jsonFoodBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        saveFoodBook(foodBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Similar to {@link #saveFoodBook(ReadOnlyFoodBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(foodBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFoodBook(foodBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 80
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonSerializableFoodBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * An Immutable FoodBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "@JsonRootName(value \u003d \"foodbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "class JsonSerializableFoodBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code JsonSerializableFoodBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonSerializableFoodBook(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonSerializableFoodBook(ReadOnlyFoodBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts this food book into the model\u0027s {@code FoodBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (foodBook.hasFood(food)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodBook.addFood(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 47
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public interface Storage extends FoodBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 32
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Manages storage of FoodBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private FoodBookStorage foodBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public StorageManager(FoodBookStorage foodBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBookStorage \u003d foodBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBookStorage.getFoodBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return readFoodBook(foodBookStorage.getFoodBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBookStorage.readFoodBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        saveFoodBook(foodBook, foodBookStorage.getFoodBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBookStorage.saveFoodBook(foodBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 77
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 12,
      "WillySeahh": 7
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.ExpenseSplitterParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Logic Manager for ExpenseSpliter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ExpenseSplitterParser expenseSplitterParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        expenseSplitterParser \u003d new ExpenseSplitterParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Command command \u003d expenseSplitterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            storage.savePersonAmountBook(model.getPersonAmountBook());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            storage.saveReceiptBook(model.getReceiptBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 41,
      "WillySeahh": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/AddItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Used to add entries to the receipt."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"additem\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the receipt. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_ITEM + \"ITEM NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_NAME + \"PERSON NAME\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The entry: \\n  -\u003e %1$s\\nhas been added.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // note:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is done, can only do paid, back, listamount and listreceipt. CANNOT: add/deleteitem."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is undone, can only additem, back, deleteitem, listreceipt, listamount. CANNOT: paid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"The current receipt is marked as completed. You may not use \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"the additem command.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Entry toBeAdded;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Creates an AddItemCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param item    Item to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param persons String array of persons to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AddItemCommand(Item item, ArrayList\u003cPerson\u003e persons, Amount amount) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(item, persons, amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.toBeAdded \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (model.isReceiptDone()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            model.addEntry(toBeAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Person person : persons) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (!model.hasPerson(person)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    model.addPerson(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    model.addAmount(model.getPerson(person), amount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toBeAdded));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || (other instanceof AddItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 toBeAdded.equals(((AddItemCommand) other).toBeAdded));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 3,
      "ailanthustng": 79
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/BackCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * This Command is used to go back to the Main Application of EYLAH."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned to Main Menu.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model.backToMainMenu();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "WillySeahh": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ClearReceiptCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Deletes existing Entries in a Receipt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ClearReceiptCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearreceipt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cleared the receipt.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        model.clearReceipt();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        model.getReceipt().makeUndone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 23,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 74
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/DeleteItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Deletes an Item from the Receipt and the reduces the Amount of the Person(s) involved in splitting this Item."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DeleteItemCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteitem\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // note:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is done, can only do paid, back, listamount and listreceipt. CANNOT: add/deleteitem."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is undone, can only additem, back, deleteitem, listreceipt, listamount. CANNOT: paid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"The current receipt is marked as completed. You may not use \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"the deleteitem command.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DeleteItemCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (model.isReceiptDone()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Entry currentEntry;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                currentEntry \u003d model.getEntry(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new CommandException(\"There is no Item with this index. Please use `listreceipt` to get the\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                + \" Index of item.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Item currentItem \u003d currentEntry.getItem();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Amount amountPerPerson \u003d currentItem.getAmountPerPerson();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            ArrayList\u003cPerson\u003e persons \u003d currentEntry.getPersonsList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Person person : persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                model.removeAmount(person, amountPerPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            model.deleteEntry(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                || (other instanceof DeleteItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteItemCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 41,
      "ailanthustng": 22,
      "WillySeahh": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/DoneReceiptCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Set the Receipt as DONE thus no further modification to the Receipt can be made."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * For instance, after the Receipt is set as DONE, additem and deleteitem commands will not work until"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * a new receipt is created."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DoneReceiptCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"donereceipt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Receipt has been marked as completed.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"Receipt has already been marked as completed.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (model.isReceiptDone()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            model.getReceipt().makeDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 28,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ListAmountCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Lists all Person(s) and the Amount they owe you."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ListAmountCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listamount\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all person with their amount.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        model.listAmount();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 22,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ListReceiptCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *  Lists the current receipt to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ListReceiptCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listreceipt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"listreceipt is entered as `listreceipt`\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed current receipt containing all Items and Person(s) involved \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \"in splitting it.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model.listReceipt();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/NewReceiptCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *  Starts a new Receipt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class NewReceiptCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"newreceipt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Old receipt is cleared and a new Receipt is started.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult execute (Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model.newReceipt();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 22
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/PaidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Reduce the amount a Person owes you."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully deducted amount from Person named: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \": Deducts the amount of Person identified by the index number of the Person in listamount.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \"Parameters: INDEX and AMOUNT (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\" + \" 3.30\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String PROPER_AMOUNT \u003d \"Amount paid must not contain any alphabets and have only\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \" a maximum of 2 decimal places.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_UNDONE \u003d \"The current receipt is marked as incomplete. You may not \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"use the paid command.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //private final Person personPaid;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final Index indexOfPersonPaid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final String amountPaid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates an PaidCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PaidCommand (Index indexOfPersonPaid, String amountPaid) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(indexOfPersonPaid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(amountPaid);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.indexOfPersonPaid \u003d indexOfPersonPaid;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (amountPaid.equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            this.amountPaid \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            this.amountPaid \u003d amountPaid;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!model.isReceiptDone()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_UNDONE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ReadOnlyPersonAmountBook book \u003d model.getPersonAmountBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            //This ensures that the indexOfPersonPaid is correct."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (indexOfPersonPaid.getZeroBased() \u003c 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || indexOfPersonPaid.getZeroBased() \u003e book.getPersonList().size() - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new CommandException(\"Index of Person is incorrect. Please use `listamount` to get the index.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Person person \u003d book.getPersonByIndex(indexOfPersonPaid.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            String initialAmount \u003d person.getAmount().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // This cases handles when user key in `paid 1` which stands for paid the full amount Person in Index 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // owes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (amountPaid \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                PaidCommand newPaidCommand \u003d new PaidCommand(indexOfPersonPaid, initialAmount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                return newPaidCommand.execute(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                //This ensures that amountPaid is correct. p.getAmount MUST be BIGGER OR EQUAL TO AMOUNT PAID"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                if (person.getAmount().amount.compareTo(new BigDecimal(amountPaid)) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    throw new CommandException(\"Person cannot pay more than what he owes you. Please use `listamount` \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                        + \"to get the index.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                model.paidPerson(person, amountPaid);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                String finalAmount \u003d person.getAmount().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.getName() + \". Amount decreased from \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    + initialAmount + \" to \" + finalAmount + \".\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 7,
      "WillySeahh": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 19
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/AddItemCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Parses input arguments and creates a new AddCommandItem object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddItemCommandParser implements Parser\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * and returns an AddItemCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AddItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM, PREFIX_PRICE, PREFIX_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ItemName itemName \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ItemPrice price \u003d ParserUtil.parseItemPrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cName\u003e names \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amountPerPerson \u003d ParserUtil.parseAmount(price, names.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e persons \u003d ParserUtil.parsePersons(names, amountPerPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item item \u003d new Item(itemName, price, amountPerPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new AddItemCommand(item, persons, amountPerPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 56
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 149
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_ITEM \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\" \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 13,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/DeleteItemCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses input arguments and creates a new DeleteItemCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DeleteItemCommandParser implements Parser\u003cDeleteItemCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DeleteItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new DeleteItemCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 28
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ExpenseSplitterParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ClearReceiptCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DoneReceiptCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListAmountCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListReceiptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.NewReceiptCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses user input for ExpenseSplitter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExpenseSplitterParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // New Command need to add to here!!!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case ListReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new ListReceiptCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new BackCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case PaidCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new PaidCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new AddItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case DeleteItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new DeleteItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case ListAmountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ListAmountCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case DoneReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new DoneReceiptCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case ClearReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new ClearReceiptCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case NewReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new NewReceiptCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 49,
      "ailanthustng": 8,
      "WillySeahh": 26
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ListAmountCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListAmountCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListReceiptCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses input arguments and creates a new ListAmountCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ListAmountCommandParser implements Parser\u003cListAmountCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListReceiptCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * and returns an ListReceiptCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ListAmountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (args.equals(\"listamount\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ListAmountCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListReceiptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ListReceiptCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListReceiptCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Parses input arguments and creates a new ListReceiptCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ListReceiptCommandParser implements Parser\u003cListReceiptCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListReceiptCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * and returns an ListReceiptCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ListReceiptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (args.equals(\"listreceipt\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new ListReceiptCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListReceiptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 30
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/PaidCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Parses input arguments and creates a new PaidCommandItem object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommandParser implements Parser\u003cPaidCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Index indexOfPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String amountPaid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String[] helper \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            indexOfPerson \u003d ParserUtil.parseIndex(helper[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PaidCommand.MESSAGE_USAGE), ex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            amountPaid \u003d helper[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            amountPaid \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!amountPaid.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(PaidCommand.PROPER_AMOUNT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        int index \u003d ParserUtil.parseIndexV2(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new PaidCommand(indexOfPerson, amountPaid);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 79
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses a {@code String itemName} into a {@code ItemName}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code itemName} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ItemName parseItemName(String itemName) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String trimmedItemName \u003d itemName.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!ItemName.isValidName(trimmedItemName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ItemName(trimmedItemName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses a {@code String priceInString} into a {@code ItemPrice}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code priceInString} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ItemPrice parseItemPrice(String priceInString) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(priceInString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String trimmedPrice \u003d priceInString.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal bigDecimalPrice \u003d new BigDecimal(trimmedPrice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!ItemPrice.isValidPrice(bigDecimalPrice)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(ItemPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ItemPrice(bigDecimalPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code ItemPrice price}, {@code int numPersons} into a {@code Amount}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code price}, {@code numPersons} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount parseAmount(ItemPrice price, int numPersons) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(price, numPersons);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal bigDecimalNumPersons \u003d new BigDecimal(numPersons);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal itemPrice \u003d price.getItemPrice();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return CalculateUtil.calculatePricePerPerson(itemPrice, bigDecimalNumPersons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code ArrayList\u003cName\u003e}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code Collection\u003cString\u003e names} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final ArrayList\u003cName\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (String name : names) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            nameList.add(parseName(name));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return nameList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code ArrayList\u003cName\u003e names}, {@code ItemPrice price} into a {@code ArrayList\u003cPerson\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code ArrayList\u003cName\u003e names}, {@code ItemPrice price} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cPerson\u003e parsePersons(ArrayList\u003cName\u003e names, Amount amount) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Name name : names) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            persons.add(new Person(name, amount));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Parses a {@code String priceInString} into a {@code ItemPrice}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException if the given {@code priceInString} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static Integer parseIndexV2(String i) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Integer.valueOf(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 44,
      "ailanthustng": 82,
      "WillySeahh": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(obj instanceof seedu.eylah.addressbook.logic.parser.Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        seedu.eylah.addressbook.logic.parser.Prefix otherPrefix \u003d (seedu.eylah.addressbook.logic.parser.Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 39
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an entry to the receipt."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry consists of an Item and ArrayList of Person sharing the cost of the item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes an entry from the receipt via the index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of the entry to be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void deleteEntry(int index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Entry getEntry(int index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** Returns the PersonAmountBook */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ReadOnlyPersonAmountBook getPersonAmountBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** Returns the ReceiptBook */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ReadOnlyReceiptBook getReceiptBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates the amount the Person owes you. If amount is $0 then the Person is deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void paidPerson(Person person, String amountPaid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Command for listing all person with their amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void listAmount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Command for listing all items in that receipt."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void listReceipt();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Going back to EYLAH Main Menu."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void backToMainMenu();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    boolean isReceiptDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Receipt getReceipt();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void clearReceipt();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void newReceipt();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if a person with the same identity as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code person} exists in the person amount book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Person getPerson(Person person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addAmount(Person person, Amount amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void removeAmount(Person person, Amount amount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 10,
      "ailanthustng": 28,
      "WillySeahh": 49
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Receipt receipt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final PersonAmountBook personAmountBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ReceiptBook receiptBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initializes a ModelManager with a new Receipt (and data from existing storage)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ModelManager(ReadOnlyReceiptBook receiptBook, ReadOnlyPersonAmountBook personAmountBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        logger.fine(\"Initializing receipt and data from existing storage\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.personAmountBook \u003d new PersonAmountBook(personAmountBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptBook \u003d new ReceiptBook(receiptBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personAmountBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (receiptBook.isContainSingleReceipt()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.receipt \u003d receiptBook.getReceiptList().get(0); // current only have 1 receipt in receipt book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this(new ReceiptBook(), new PersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Receipt \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyReceiptBook getReceiptBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an entry to the receipt."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry consists of an Item and ArrayList of Person sharing the cost of the item."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(entry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes an entry from the receipt via the index."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of the entry to be removed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.deleteEntry(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry getEntry(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.getEntry(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Intentionally left empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * To be implemented later."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void listReceipt() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        System.out.println(receipt.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Command for listing all person with their amount."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void listAmount() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        System.out.println(personAmountBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method is used to subtract the {@code amountPaid} from the current amount owed from the {@code person}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void paidPerson(Person person, String amountPaid) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(amountPaid));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Intentionally left empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * To be implemented later."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void backToMainMenu() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Checks if the current receipt is marked as completed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt.isDone();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Receipt getReceipt() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Clears the receipt by making a new ArrayList of Entry."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void newReceipt() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        receipt.newReceipt();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAmountBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if a person with the same identity as"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code person} exists in the person amount book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook.hasPerson(person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook.getPerson(person);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addAmount(person, amount);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.equals(other.receipt);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 24,
      "ailanthustng": 159,
      "WillySeahh": 37
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/PersonAmountBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Wraps all data at the expense splitter level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PersonAmountBook implements ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates an PersonAmountBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook(ReadOnlyPersonAmountBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Resets the existing data of this {@code PersonAmountBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void resetData(ReadOnlyPersonAmountBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Person is duplicated so that a new Person is added instead of the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * existing Person in the Receipt."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Name name \u003d p.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d p.getAmount();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.add(new Person(name, amount));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount of the {@code person}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.addAmount(person, amount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return persons.getPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Removes Amount from a Person"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param amount"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.removeAmount(person, amount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        This handles the deleting of Person when their amount is 0. Cannot use enhanced for loop because"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        that will throw java.ConcurrentException because you are editing the personList while you\u0027re doing enhanced"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for loop."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.asUnmodifiableObservableList().size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (persons.getPersonUsingIndex(i).getAmount().amount.doubleValue() \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                removePerson(getPersonByIndex(i));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ObservableList\u003cPerson\u003e personsList \u003d persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        builder.append(\"Person : Amount\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (Person person : personsList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            int index \u003d personsList.indexOf(person) + 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            builder.append(\"    \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(person.getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(\" : $\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(person.getAmount())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof PersonAmountBook // instanceof handles nulls"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonAmountBook) other).persons));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person getPersonByIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(indexOfPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.getPersonUsingIndex(indexOfPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 15,
      "ailanthustng": 23,
      "WillySeahh": 133
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReadOnlyPersonAmountBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Unmodifiable view of an personamount book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns an unmodifiable view of the PersonAmount list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This list will not contain any duplicate Persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Person getPersonByIndex(int indexOfPerson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 18
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReadOnlyReceiptBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Unmodifiable view of an ReceiptBook book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns an unmodifiable view of the Receipt list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This list will not contain any duplicate Receipt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ObservableList\u003cReceipt\u003e getReceiptList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Check if the list contain at least a receipt."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return true if contain at least a receipt, otherwise false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    boolean isContainSingleReceipt();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReceiptBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.UniqueReceiptList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Wraps all data at the receipt level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Duplicates are not allowed (by .isSameReceipt comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ReceiptBook implements ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final UniqueReceiptList receipts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts \u003d new UniqueReceiptList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook(ReadOnlyReceiptBook toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Replaces the contents of the receipt list with {@code receipts}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code receipts} must not contain duplicate receipts."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipts.setReceipts(receipts);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Resets the existing data of this {@code ReceiptBook} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void resetData(ReadOnlyReceiptBook newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setReceipts(newData.getReceiptList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // receipt-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if a receipt with the same identity as {@code receipt} exists in the receipt book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean hasReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receipt);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.contains(receipt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Adds a receipt to the receipt book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The receipt must not already exist in the receipt book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addReceipt(Receipt r) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts.add(r);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cReceipt\u003e getReceiptList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.isContainSingleReceipt();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 75
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path personAmountFilePath \u003d Paths.get(\"data\", \"personamount.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path receiptFilePath \u003d Paths.get(\"data\", \"receiptbook.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        setPersonAmountBookFilePath(newUserPrefs.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath(Path personAmountFilePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(personAmountFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.personAmountFilePath \u003d personAmountFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the Receipt file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return Receipt file path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the Receipt file path based on the given path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptFilePath the given file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceiptFilePath(Path receiptFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receiptFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptFilePath \u003d receiptFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 21,
      "WillySeahh": 46
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/Item.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents an Item in the Expense Splitter of EYLAH."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: details are present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final ItemName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final ItemPrice price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Amount amountPerPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Every field must be present,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * ItemName and ItemPrice fields must not be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param name,price represents the compulsory fields of an Item object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Item(ItemName name, ItemPrice price, Amount amountPerPerson) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireAllNonNull(name, price);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amountPerPerson \u003d amountPerPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns the ItemName of an Item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return the ItemName of an Item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemName getItemName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns the ItemPrice of an Item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return the ItemPrice of an Item."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemPrice getItemPrice() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Amount getAmountPerPerson() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return amountPerPerson;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if both Items of the same name have the same price."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param otherItem the other Item we are comparing with."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemPrice().equals(getItemPrice());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return otherItem.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemPrice().equals(getItemPrice());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Objects.hash(name, price);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String formattedItemName \u003d getItemName().toString().substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                + getItemName().toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(formattedItemName)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(\" | Price: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .append(getItemPrice());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 13,
      "akhilvuputuri": 2,
      "WillySeahh": 94
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/ItemName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a Item\u0027s name in ExpenseSplitter of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \"ItemName should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public final String itemName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.itemName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param test whether a name is valid or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Checks if two Items have the same ItemName."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param other ItemName to be checked against."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return True if two of the Items have the same ItemName, False otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof ItemName // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 itemName.equals(((ItemName) other).itemName)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemName.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "WillySeahh": 66
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/ItemPrice.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents an Item\u0027s price in Expense Splitter of EYLAH."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(BigDecimal)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemPrice {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Initially I coded ItemPrice using Double to represent the dollar amount. However when coding out the tests and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    doing further research online, using Double will lead to rounding errors and many credible sources have recommended"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    against using Double to represent currency. Thus I have decided to replace Double with BigDecimal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    I obtained this Regex expression from this link:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    https://stackoverflow.com/questions/16242449/regex-currency-validation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    As per discussed in the meeting, we are using flags to split it so the Scanner input takes in a String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    To make String to BigDecimal is new BigDecimal(\"123.12\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Big Decimal can also make use of Rounding to solve cases of $1.6667777, which should be rounded to $1.67"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Another issue I found out is new BigDecimal(\"19.90\") (takes in a string is correct), but if it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    new BigDecimal(19.90) (takes in a double) then is wrong. it shows 19.89999999... Perhaps this is due to how"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    the class is defined. it says it should take in a string only."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \"Price should be greater than $0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //Price can either be 9 or 9.0 or 9.00 It can only accept a max of 2 decimal place."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public final BigDecimal itemPrice;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code ItemPrice}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param price A valid price"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemPrice(BigDecimal price) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.itemPrice \u003d price;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the itemPrice as a BigDecimal object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the itemPrice as a BigDecimal object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public BigDecimal getItemPrice() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.itemPrice;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a given price is a valid price."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param test if an ItemPrice is \u003e 0 because ItemPrice cannot be \u003c\u003d 0 and can only contain digit."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static boolean isValidPrice(BigDecimal test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // These SOUT commands are for me to test whether BigDecimal is working as intended or not."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //System.out.println(test.compareTo(BigDecimal.ZERO) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //System.out.println(test.toString().matches(VALIDATION_REGEX));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //System.out.println(test.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return test.compareTo(BigDecimal.ZERO) \u003e 0 \u0026\u0026 test.toString().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal display \u003d itemPrice.setScale(3, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        NumberFormat usdCostFormat \u003d NumberFormat.getCurrencyInstance(Locale.US);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMaximumFractionDigits(2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return usdCostFormat.format(display.doubleValue());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Checks if two Items have the same ItemPrice."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param other ItemPrice to be checked against."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return True if two of the Items have the same ItemPrice, False otherwise."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof ItemPrice // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 itemPrice \u003d\u003d ((ItemPrice) other).itemPrice); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemPrice.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 18,
      "akhilvuputuri": 2,
      "WillySeahh": 85
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Amount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a Person\u0027s amount in Expense Splitter in EYLAH."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(BigDecimal)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            \"Amount should only contains numerical characters and decimal separator.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author Gary-reused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Solution below adapted from https://stackoverflow.com/questions/16242449"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Price can either be 9 or 9.0 or 9.00 It can only accept a max of 2 decimal place."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final BigDecimal amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Amount}/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param amount A valid amount"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Amount(BigDecimal amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return true if a given amount is a valid amount."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param test given amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if given amount is valid, False otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAmount(BigDecimal test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.toString().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        BigDecimal display \u003d amount.setScale(3, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        NumberFormat usdCostFormat \u003d NumberFormat.getCurrencyInstance(Locale.US);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMaximumFractionDigits(2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return usdCostFormat.format(display.doubleValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if two Amount have the same amount."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other Amount to be checked against."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if two of the Amount have the same amount, False otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 amount.compareTo(((Amount) other).amount) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public BigDecimal getBigDecimal() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 16,
      "ailanthustng": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 31
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person(Name name, Amount amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String formattedName \u003d getName().toString().substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                + getName().toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(formattedName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(\" owes: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Amount amount) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal currAmount \u003d this.amount.getBigDecimal();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal amountToBeAdded \u003d amount.getBigDecimal();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d CalculateUtil.addAmount(currAmount, amountToBeAdded);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes {@code amount} from the current amount."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Amount amount) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal currAmount \u003d this.amount.getBigDecimal();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal amountToBeRemoved \u003d amount.getBigDecimal();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d CalculateUtil.removeAmount(currAmount, amountToBeRemoved);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 73,
      "ailanthustng": 28,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/UniquePersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount of {@code person};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person currPerson \u003d internalList.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        currPerson.addAmount(amount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes {@code amount} from the current amount."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person currPerson \u003d internalList.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        currPerson.removeAmount(amount);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person getPersonUsingIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Person p \u003d internalList.get(indexOfPerson); // I minused 1 when i parsed so dont minus again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 170,
      "WillySeahh": 6
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 6
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/Entry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents an Entry class, which is to be added to into a Receipt class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Guarantees: details are present and not nul."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Every field must be present."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Item and array of String must not be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param item,persons Represents the compulsory fields of an Entry object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry(Item item, ArrayList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(item, persons);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the item in the Entry."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.item;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the ArrayList of Persons associated with the Item."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the ArrayList of Persons associated with the Item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ArrayList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry otherItem \u003d (Entry) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return otherItem.getItem().equals(getItem())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 otherItem.getPersonsList().equals(getPersonsList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(item, persons);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final StringBuilder personsFormatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (i !\u003d persons.size() - 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                personsFormatted.append(persons.get(i))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else { //last person in list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                personsFormatted.append(persons.get(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"Item: \" + item + \" | \" + personsFormatted.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 82
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/Receipt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents a Receipt class in the ExpenseSplitter of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Receipt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cEntry\u003e receipt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initialises a Receipt object with an ArrayList to contain Entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initialised as undone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Receipt() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Every field must be present."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Array of Entry and isDone must not be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt(ArrayList\u003cEntry\u003e receipt, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an Entry to the receipt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry Entry to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt.add(entry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Deletes an Entry from the receipt via its index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of Entry to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void deleteEntry(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry getEntry(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt.get(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void makeDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void makeUndone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Clears the receipt by making a new ArrayList of Entry."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the ArrayList of Entries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the ArrayList of Entries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ArrayList\u003cEntry\u003e getReceipt() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isSameReceipt(Receipt otherReceipt) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (otherReceipt \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return otherReceipt !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 otherReceipt.getReceipt().equals(getReceipt());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Restarts the receipt."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void newReceipt() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        clearReceipt();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!(other instanceof Receipt)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Receipt otherItem \u003d (Receipt) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return otherItem.getReceipt().equals(getReceipt());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(receipt);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(\"Receipt:\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Entry entry : receipt) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            int index \u003d receipt.indexOf(entry) + 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            builder.append(\"    \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    .append(entry.toString())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //for testing purposes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.contains(entry);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 26,
      "ailanthustng": 108,
      "WillySeahh": 9
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/UniqueReceiptList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.exceptions.DuplicateReceiptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.exceptions.ReceiptNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * @see Receipt#isSameReceipt(Receipt)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UniqueReceiptList implements Iterable\u003cReceipt\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ObservableList\u003cReceipt\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ObservableList\u003cReceipt\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean contains(Receipt toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReceipt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void add(Receipt toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DuplicateReceiptException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void remove(Receipt toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ReceiptNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(UniqueReceiptList replacement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireAllNonNull(receipts);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!receiptsAreUnique(receipts)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DuplicateReceiptException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.setAll(receipts);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if {@code persons} contains only unique receipts."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private boolean receiptsAreUnique(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (int i \u003d 0; i \u003c receipts.size() - 1; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c receipts.size(); j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (receipts.get(i).isSameReceipt(receipts.get(j))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cReceipt\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Check if the list contain at least a receipt."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return true if contain at least a receipt, otherwise false."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.size() !\u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Iterator\u003cReceipt\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                || (other instanceof UniqueReceiptList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReceiptList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 129
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/exceptions/DuplicateReceiptException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Signals that the operation will result in duplicate Receipt (Receipt are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DuplicateReceiptException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DuplicateReceiptException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        super(\"Operation would result in duplicate receipts\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/exceptions/ReceiptNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Signals that the operation is unable to find the specified receipt."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ReceiptNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 7
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/util/SamplePersonAmountDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains utility methods for populating {@code PersonAmount} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class SamplePersonAmountDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Willy\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"3.30\"))),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Shi\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"34.30\"))),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Ailan\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"60.70\"))),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Alice\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"100.10\"))),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Bob\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"35.20\"))),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Carl\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"12.12\"))),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static ReadOnlyPersonAmountBook getSamplePersonAmountBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook sampleAb \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (seedu.eylah.expensesplitter.model.person.Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 41
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/util/SampleReceiptDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains utility methods for populating {@code Receipt} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SampleReceiptDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Receipt[] getSampleReceipt() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Willy\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Shi\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Ailan\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.add(new Entry(new Item(new ItemName(\"pasta\"), new ItemPrice(new BigDecimal(\"9.0\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                new Amount(new BigDecimal(\"3\"))), personList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.add(new Entry(new Item(new ItemName(\"cheese fries\"), new ItemPrice(new BigDecimal(\"9.0\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                new Amount(new BigDecimal(\"3\"))), personList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Receipt[] { new Receipt(entries, false) };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static ReadOnlyReceiptBook getSampleReceiptBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook sampleRb \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (Receipt sampleReceipt : getSampleReceipt()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            sampleRb.addReceipt(sampleReceipt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 43
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final JsonAdaptedItem item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"item\") JsonAdaptedItem item,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (persons !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        item \u003d new JsonAdaptedItem(source.getItem());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        persons.addAll(source.getPersonsList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ArrayList\u003cPerson\u003e modelPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            modelPersons.add(person.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Item modelItem \u003d item.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Entry(modelItem, modelPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedItem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal itemPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal amountPerPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"itemName\") String itemName, @JsonProperty(\"itemPrice\") BigDecimal itemPrice,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"amountPerPerson\") BigDecimal amountPerPerson) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.itemPrice \u003d itemPrice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amountPerPerson \u003d amountPerPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        itemName \u003d source.getItemName().itemName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        itemPrice \u003d source.getItemPrice().itemPrice;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        amountPerPerson \u003d source.getAmountPerPerson().amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (itemName \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ItemName.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!ItemName.isValidName(itemName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ItemName modelItemName \u003d new ItemName(itemName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (itemPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ItemPrice.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!ItemPrice.isValidPrice(itemPrice)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(ItemPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ItemPrice modelItemPrice \u003d new ItemPrice(itemPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (amountPerPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!Amount.isValidAmount(amountPerPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Amount modelAmountPerPerson \u003d new Amount(amountPerPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Item(modelItemName, modelItemPrice, modelAmountPerPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 80
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") BigDecimal amount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        amount \u003d source.getAmount().amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Person(modelName, modelAmount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 16,
      "WillySeahh": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedReceipt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Receipt}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedReceipt {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedReceipt} with the given entries details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedReceipt(@JsonProperty(\"itemPersons\") List\u003cJsonAdaptedEntry\u003e entries,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"isDone\") boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (entries !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.entries.addAll(entries);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Receipt} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedReceipt(Receipt source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.addAll(source.getReceipt().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .map(JsonAdaptedEntry::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted receipt object into the model\u0027s {@code Receipt} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ArrayList\u003cEntry\u003e modelEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedEntry entry : entries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            modelEntries.add(entry.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Receipt(modelEntries, modelIsDone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonPersonAmountBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A class to access PersonAmountBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonPersonAmountBookStorage implements PersonAmountStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonAmountBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonPersonAmountBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return readPersonAmountBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Similar to {@link #readPersonAmountBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Optional\u003cJsonSerializablePersonAmountBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                filePath, JsonSerializablePersonAmountBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        savePersonAmountBook(personAmountBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves a person amount book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param personAmountBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param filePath location of data cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(personAmountBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonAmountBook(personAmountBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonReceiptBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A class to access ReceiptBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonReceiptBookStorage implements ReceiptStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonReceiptBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonReceiptBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return readReceiptBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Similar to {@link #readReceiptBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Optional\u003cJsonSerializableReceiptBook\u003e jsonReceiptBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                filePath, JsonSerializableReceiptBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!jsonReceiptBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return Optional.of(jsonReceiptBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        saveReceiptBook(receiptBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves a receipt book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptBook ReadOnlyReceiptBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param filePath location of data cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receiptBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReceiptBook(receiptBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonSerializablePersonAmountBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "@JsonRootName(value \u003d \"personamountbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonSerializablePersonAmountBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonSerializablePersonAmountBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonSerializablePersonAmountBook(ReadOnlyPersonAmountBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (personAmountBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 63
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonSerializableReceiptBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * An Immutable ReceiptBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "@JsonRootName(value \u003d \"receiptbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonSerializableReceiptBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECEIPT \u003d \"Receipt list contains duplicate receipt(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedReceipt\u003e receipts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonSerializableReceiptBook} with the given receipt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonSerializableReceiptBook(@JsonProperty(\"receipts\") List\u003cJsonAdaptedReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipts.addAll(receipts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code ReadOnlyReceiptBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonSerializableReceiptBook(ReadOnlyReceiptBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts.addAll(source.getReceiptList().stream().map(JsonAdaptedReceipt::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this receipt book into the model\u0027s {@code Receipt} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook receiptBook \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedReceipt jsonAdaptedReceipt : receipts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Receipt receipt \u003d jsonAdaptedReceipt.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            if (receiptBook.hasReceipt(receipt)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECEIPT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            receiptBook.addReceipt(receipt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 62
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs , filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 7,
      "WillySeahh": 41
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/PersonAmountStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {here should put link to receipt!!!}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface PersonAmountStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyPersonAmountBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see @getPersonAmountBookPath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonAmountBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see @savePersonAmountBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 29,
      "WillySeahh": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/ReceiptStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {here should put link to receipt!!!}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReceiptStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns ReceiptBook data as a {@link ReadOnlyReceiptBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see @getReceiptBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves the given {@link ReadOnlyReceiptBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see @saveReceiptBook(ReadOnlyReceiptBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 45
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Storage extends PersonAmountStorage, UserPrefsStorage, ReceiptStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 10,
      "WillySeahh": 31
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Manages storage of PersonAmountBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.eylah.addressbook.storage.StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private PersonAmountStorage personAmountStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private ReceiptStorage receiptStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public StorageManager(PersonAmountStorage personAmountStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReceiptStorage receiptStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.personAmountStorage \u003d personAmountStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptStorage \u003d receiptStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // \u003d\u003d\u003d PersonAmount Storage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountStorage.getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return readPersonAmountBook(personAmountStorage.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountStorage.readPersonAmountBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        savePersonAmountBook(personAmountBook, personAmountStorage.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        personAmountStorage.savePersonAmountBook(personAmountBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // \u003d\u003d\u003d Receipt Storage"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptStorage.getReceiptBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return readReceiptBook(receiptStorage.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptStorage.readReceiptBook(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        saveReceiptBook(receiptBook, receiptStorage.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receiptStorage.saveReceiptBook(receiptBook, filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 35,
      "WillySeahh": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a storage for {@link seedu.eylah.expensesplitter.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPref) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 22
    }
  },
  {
    "path": "src/main/java/seedu/eylah/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the welcome message, logo, and the main command to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showWelcome();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Reads the userInput from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the given user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    String readCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the result of the command to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showResult(String result);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the exit message to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Show the error message to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showError(String error);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 35
    }
  },
  {
    "path": "src/main/java/seedu/eylah/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to EYLAH\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String LOGO \u003d \"          _____                    _____            \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |       \\\\     /  |       |     |  |     | \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |        \\\\   /   |       |     |  |     | \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |_____    \\\\ /    |       |_____|  |_____| \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |          |     |       |     |  |     |  \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |_____     |     |_____  |     |  |     |  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String SEPARATOR \u003d \"_____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String USAGE \u003d \"Enter the INDEX to choose the mode.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String NAV_LIST \u003d \"Content Page: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"----------------\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"1. Diet Tracker\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"2. Expense Splitter\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"To exit the application: exit\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"----------------\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String READ_COMMAND \u003d \"Enter command: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Bye! See you next time :)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UiManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts the given strings to the desired format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param messages the given string to format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void showToUser(String... messages) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            System.out.println(m.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(WELCOME_MESSAGE, SEPARATOR, LOGO, SEPARATOR, LS, USAGE, NAV_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(READ_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(error);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showResult(String result) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(result);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 72
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "         title\u003d\"EYLAH\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "akhilvuputuri": 20,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 9,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 10,
      "-": 184
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        System.out.println(expectedCommandResult);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "akhilvuputuri": 11,
      "WillySeahh": 4,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 13,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 2,
      "akhilvuputuri": 21,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 7,
      "WillySeahh": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 11,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 18,
      "akhilvuputuri": 26,
      "WillySeahh": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 20,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 4,
      "akhilvuputuri": 26,
      "WillySeahh": 2,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 7,
      "WillySeahh": 1,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "akhilvuputuri": 8,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 8,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/person/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 1,
      "akhilvuputuri": 7,
      "WillySeahh": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "akhilvuputuri": 8,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_TAGS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, invalidTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 3,
      "akhilvuputuri": 6,
      "WillySeahh": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 9,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "WillySeahh": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/AddressBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 5,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Annie Paul\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Builds a person."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return a Person."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Person(name, tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 2,
      "akhilvuputuri": 5,
      "WillySeahh": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 7,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 13,
      "akhilvuputuri": 7,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/addressbook/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.testutil.TestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.CALORIES_DESC_PASTA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.NAME_DESC_PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonFoodBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonFoodBookStorage foodBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonFoodBookStorage(temporaryFolder.resolve(\"foodBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StorageManager storage \u003d new StorageManager(foodBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandSuccess(listCommand, \"The food list based on the input flag \u0027-d\u0027 is as follows:\\n\", model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Setup LogicManager with JsonFoodBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonFoodBookStorage foodBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonFoodBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionFoodBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StorageManager storage \u003d new StorageManager(foodBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_PASTA + CALORIES_DESC_PASTA;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(PASTA).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static class JsonFoodBookIoExceptionThrowingStub extends JsonFoodBookStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private JsonFoodBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 159
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 54
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_NAME_PASTA \u003d \"Pasta Aglio Olio\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_NAME_PIZZA \u003d \"Pizza Pepperoni\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_CALORIES_PASTA \u003d \"1200\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_CALORIES_PIZZA \u003d \"560\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_TAG_FASTFOOD \u003d \"fastfood\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_TAG_FAVORITE \u003d \"favorite\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String NAME_DESC_PASTA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_PASTA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String NAME_DESC_PIZZA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_PIZZA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String CALORIES_DESC_PASTA \u003d \" \" + PREFIX_CALORIES + \" \" + VALID_CALORIES_PASTA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String CALORIES_DESC_PIZZA \u003d \" \" + PREFIX_CALORIES + \" \" + VALID_CALORIES_PIZZA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String TAG_DESC_FASTFOOD \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FASTFOOD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String TAG_DESC_FAVORITE \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FAVORITE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" \" + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_PASTA;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_PIZZA;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DESC_PASTA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DESC_PIZZA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PIZZA)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .withTags(VALID_TAG_FASTFOOD, VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        System.out.println(expectedCommandResult);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the food book, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook expectedFoodBook \u003d new FoodBook(actualModel.getFoodBook());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedFoodBook, actualModel.getFoodBook());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code model}\u0027s food book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final String[] splitName \u003d food.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 116
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PASTA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PIZZA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_NAME_PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_TAG_FAVORITE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(editedFood).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d foodInList.withName(VALID_NAME_PASTA).withTags(VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             .withTags(VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(indexLastFood, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(lastFood, editedFood);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditFoodDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     showFoodAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d new FoodBuilder(foodInFilteredList).withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_duplicateFoodUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(firstFood).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_duplicateFoodFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // edit food in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food foodInList \u003d model.getFoodBook().getFoodList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new EditFoodDescriptorBuilder(foodInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidFoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodBook().getFoodList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_PASTA);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor copyDescriptor \u003d new EditFoodDescriptor(DESC_PASTA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_PASTA)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_PIZZA)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 171
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/EditFoodDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditFoodDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 43
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/FoodBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final FoodBook foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(Collections.emptyList(), foodBook.getFoodList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData_withValidReadOnlyFoodBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook newData \u003d getTypicalFoodBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(newData, foodBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData_withDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_FASTFOOD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(PASTA, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBookStub newData \u003d new FoodBookStub(newFoods);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e foodBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodBook.hasFood(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodNotInFoodBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(foodBook.hasFood(PASTA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.addFood(PASTA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(foodBook.hasFood(PASTA));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.addFood(PASTA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_FASTFOOD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(foodBook.hasFood(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e foodBook.getFoodList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A stub ReadOnlyFoodBook whose foods list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static class FoodBookStub implements ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBookStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 101
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.model.Model.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PIZZA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new FoodBook(), new FoodBook(modelManager.getFoodBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setFoodBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setFoodBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBookFilePath_validPath_setsFoodBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.setFoodBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(path, modelManager.getFoodBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodNotInFoodBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.hasFood(PASTA));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.addFood(PASTA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.hasFood(PASTA));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook foodBook \u003d new FoodBookBuilder().withFood(PASTA).withFood(PIZZA).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook differentFoodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager \u003d new ModelManager(foodBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different foodBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String[] keywords \u003d PASTA.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        differentUserPrefs.setFoodBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 132
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 21
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/food/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.isSameFood(PASTA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.isSameFood(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // ADD AFTER COMMANDS INCORPORATED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //Food editedPasta \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// same name, same calories, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// same name, same calories, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food pastaCopy \u003d new FoodBuilder(PASTA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.equals(pastaCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.equals(PASTA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(BURGER));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // IMPLEMENT AFTER ADDING COMMANDS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //Food editedAlice \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(PASTA.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different tags -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedAlice \u003d new FoodBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 72
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/food/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"burger*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"french fries\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"4fingers\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"Aglio Olio\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"McSpicy Meal with Fries and Coke\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 40
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonAdaptedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P@sta\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final long INVALID_CALORIES \u003d -10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#favorite\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_NAME \u003d PASTA.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final long VALID_CALORIES \u003d PASTA.getCalories().getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_DATE \u003d PASTA.getDate().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d PASTA.getTags().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     JsonAdaptedFood food \u003d new JsonAdaptedFood(PASTA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(PASTA, food.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(INVALID_NAME, VALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(null, VALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, INVALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_CALORIES, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 69
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonFoodBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static seedu.eylah.diettracker.testutil.TypicalFood.BURGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static seedu.eylah.diettracker.testutil.TypicalFood.PIZZA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonFoodBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFoodBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readFoodBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFoodBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodBook\u003e readFoodBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new JsonFoodBookStorage(Paths.get(filePath)).readFoodBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(readFoodBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"notJsonFormatFoodBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readFoodBook_invalidFoodFoodBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"invalidFoodFoodBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void readFoodBook_invalidAndValidFoodFoodBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"invalidAndValidFoodFoodBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void readAndSaveFoodBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Path filePath \u003d testFolder.resolve(\"TempFoodBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBook original \u003d getTypicalFoodBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     JsonFoodBookStorage jsonFoodBookStorage \u003d new JsonFoodBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     jsonFoodBookStorage.saveFoodBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     ReadOnlyFoodBook readBack \u003d jsonFoodBookStorage.readFoodBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     original.addFood(PIZZA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     original.removeFood(PASTA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     jsonFoodBookStorage.saveFoodBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     readBack \u003d jsonFoodBookStorage.readFoodBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     original.addFood(BURGER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     jsonFoodBookStorage.saveFoodBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     readBack \u003d jsonFoodBookStorage.readFoodBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveFoodBook_nullFoodBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void saveFoodBook(ReadOnlyFoodBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new JsonFoodBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    .saveFoodBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveFoodBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodBook(new FoodBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 110
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonSerializableFoodBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import seedu.eylah.diettracker.testutil.TypicalFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonSerializableFoodBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // private static final Path TYPICAL_FOODS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodFoodBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodFoodBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodFoodBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void toModelType_typicalFoodFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOODS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBook foodBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBook typicalFoodFoodBook \u003d TypicalFood.getTypicalFoodBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(foodBookFromFile, typicalFoodFoodBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_duplicateFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFoodBook.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 124
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.addressbook.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.addressbook.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 71
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/EditFoodDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class to help with building EditFoodDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setName(food.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setCalories(food.getCalories());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setDate(food.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 59
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class to help with building Foodbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *     {@code FoodBook ab \u003d new FoodBookBuilder().withFood(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private FoodBook foodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder(FoodBook foodBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.foodBook \u003d foodBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a new {@code Food} to the {@code FoodBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.addFood(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.addressbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"French Fries\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long DEFAULT_CALORIES \u003d 300;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Date DEFAULT_DATE \u003d new Date(\"2020-03-25T16:49:40.210009\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d new Date();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d foodToCopy.getCalories();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d foodToCopy.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Calories} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBuilder withCalories(long calories) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Calories} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBuilder withDate(Date date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *  * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Builds a food."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return a food."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food(name, calories, date, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 18,
      "akhilvuputuri": 67
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getFoodDetails(Food food) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().name + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getEditFoodDescriptorDetails(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Food getFood(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 55
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/TypicalFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class TypicalFood {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food PASTA \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Mushroom Pasta\").withCalories(1200).withDate(new Date("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"italian\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food BURGER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Chicken Burger\").withCalories(300).withDate(new Date("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"fastfood\", \"western\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food FRIES \u003d new FoodBuilder().withName(\"French Fries\").withDate(new Date("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(450).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food LATTE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Vanilla Latte\").withCalories(300).withDate(new Date("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"drinks\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food COKE \u003d new FoodBuilder().withName(\"Coke\").withDate(new Date("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(1200).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food PIZZA \u003d new FoodBuilder().withName(\"BBQ Pizza\").withDate(new Date("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(50).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food HOTDOG \u003d new FoodBuilder().withName(\"Hotdog\").withDate(new Date("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(320).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food MILKSHAKE \u003d new FoodBuilder().withName(\"Chocolate Milkshake\").withDate(new Date("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(1200).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food BAGUETTE \u003d new FoodBuilder().withName(\"Baguette\").withDate(new Date("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(420).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // ADD AFTER INCORPORATING COMMANDS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //// Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //public static final Food AMY \u003d new FoodBuilder().withName(VALID_NAME_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //public static final Food BOB \u003d new FoodBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String KEYWORD_MATCHING_PIZZA \u003d \"pizza\"; // A keyword that matches PIZZA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private TypicalFood() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an {@code FoodBook} with all the typical food."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static FoodBook getTypicalFoodBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook ab \u003d new FoodBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (Food food : getTypicalFood()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFood() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PASTA, BURGER, FRIES, LATTE, COKE, PIZZA, HOTDOG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 22,
      "akhilvuputuri": 42
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 58
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                           Model expectedModel) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the person amount book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook expectedPersonAmountBook \u003d new PersonAmountBook(actualModel.getPersonAmountBook());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedPersonAmountBook, actualModel.getPersonAmountBook());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code model}\u0027s person amount book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 99
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/ListAmountCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListAmountCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ListAmountCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model \u003d new ModelManager (new ReceiptBook(), getTypicalPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedModel \u003d new ModelManager(new ReceiptBook(), model.getPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListAmountCommand(), model, ListAmountCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListAmountCommand(), model, ListAmountCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 44
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/PaidCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.addressbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBookStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Model model \u003d new ModelManager(new ReceiptBookStub(), getTypicalPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_reducePersonAmount_success() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String amountPaid \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        model.getReceipt().makeDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(index, amountPaid);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ReceiptBookStub(), new PersonAmountBook(model.getPersonAmountBook()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedModel.getReceipt().makeDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedModel.paidPerson(TypicalPersons.ALICE, \"1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String messageSuccess \u003d PaidCommand.MESSAGE_SUCCESS + TypicalPersons.ALICE.getName()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \". Amount decreased from \" + \"$2.50 to $1.50.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(paidCommand, model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "WillySeahh": 39
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 4
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/PersonAmountBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class PersonAmountBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(Collections.emptyList(), personAmountBook.getPersonList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAmountBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBook newData \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(newData, personAmountBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBookStub newData \u003d new PersonAmountBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personAmountBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAmountBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personNotInPersonAmountBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(personAmountBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personInPersonAmountBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(personAmountBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(personAmountBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personAmountBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount_addAmountCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(\"10.00\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(alice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addAmount(alice, amount);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder().withName(\"Alice Seah\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .withAmount(new BigDecimal(\"13.50\")).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(alice, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount_removeAmountCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(\"1.00\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(alice);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.removeAmount(alice, amount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder().withName(\"Alice Seah\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .withAmount(new BigDecimal(\"2.50\")).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(alice, editedAlice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static class PersonAmountBookStub implements ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        private final ObservableList\u003cPerson\u003e personsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        private final UniquePersonList persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.personsList.setAll(persons);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personsList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Person getPersonByIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(indexOfPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return persons.getPersonUsingIndex(indexOfPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 135
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ReceiptBookStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.UniqueReceiptList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A stub class for ReceiptBook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ReceiptBookStub implements ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final UniqueReceiptList receipts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        receipts \u003d new UniqueReceiptList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReceiptBookStub() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReceiptBookStub(ReadOnlyReceiptBook toBeCopied) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cReceipt\u003e getReceiptList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receipts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receipts.isContainSingleReceipt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ItemNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemName.isValidName(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "WillySeahh": 32
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemPriceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ItemPriceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemPrice(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(invalidPrice)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidItemPrice() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null ItemPrice"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemPrice.isValidPrice(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid ItemPrice"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\" \"))); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemPrice.isValidPrice(new BigDecimal(0))); // price must be greater than 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"phone\"))); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"9011p041\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"9011 4192\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemPrice.isValidPrice(new BigDecimal(\"123.133\"))); // cannot have more than 3 decimal digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid ItemPrice"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9))); // exactly 1 number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9.84)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9999999.12))); // long item price"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "WillySeahh": 45
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.POPCORN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.STEAMBOAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same item -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(BEERTOWER.isSameItem(BEERTOWER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(BEERTOWER.isSameItem(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // ADD AFTER COMMANDS INCORPORATED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Food editedPasta \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same Item values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Item steamboatCopy \u003d new ItemBuilder(STEAMBOAT).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(STEAMBOAT.equals(steamboatCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(STEAMBOAT.equals(STEAMBOAT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(BEERTOWER));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(POPCORN));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // IMPLEMENT AFTER ADDING COMMANDS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Food editedAlice \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(PASTA.equals(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different tags -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //editedAlice \u003d new FoodBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "WillySeahh": 60
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/AmountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(invalidAmount)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null Amount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid Amount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\" \"))); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"phone\"))); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"9011p041\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"9011 4192\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Amount.isValidAmount(new BigDecimal(\"123.133\"))); // cannot have more than 3 decimal digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid Amount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9))); // exactly 1 number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9.84)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9999999.12))); // long amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 43
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Keywords match amount, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"3.50\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withAmount(new BigDecimal(\"3.50\")).build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 7,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\" peter\")); // spaces followed by a proper name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"谢谢\")); // chinese names"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"நன்றி\")); // tamil names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"CHARLOTTE\")); // name with all capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"C\")); // name with 1 alphabet"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 46
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 4
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/receipt/EntryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Entry entry \u003d ENTRY_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Item item \u003d BEERTOWER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ArrayList\u003cPerson\u003e persons \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItemNullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(null, persons));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(item, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isValidItem() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry entryTest \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(entry, entryTest);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getValidItem() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item itemTest \u003d entry.getItem();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(item, itemTest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getValidPersonsList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e personsTest \u003d entry.getPersonsList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(persons, personsTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/receipt/ReceiptTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ReceiptTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(Collections.emptyList(), receipt.getReceipt());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_entryNotInReceipt_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_entryInReceipt_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_receiptHasMultipleEntries_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_TWO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_TWO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry_noEntry_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e receipt.deleteEntry(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry_deleteNonExistentIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e receipt.deleteEntry(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptInitialisedAsUndone_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.isDone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptMarkAsDone_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.makeDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.isDone());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptIsUndoneAfterClear_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.makeDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.isDone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt_checkIfReceiptContainsEntryAfterClearing_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 78
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"-3.50\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String VALID_NAME \u003d BOB.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Amount VALID_AMOUNT \u003d BOB.getAmount();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonAdaptedPerson(INVALID_NAME, VALID_AMOUNT.getBigDecimal());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_AMOUNT.getBigDecimal());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, new BigDecimal(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 55
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonPersonAmountBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonPersonAmountBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonPersonAmountBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonAmountBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new JsonPersonAmountBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .readPersonAmountBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(readPersonAmountBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"notJsonFormatPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_invalidPersonAmountBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"invalidPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_invalidAndValidPersonAmountBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"invalidAndValidPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readAndSavePersonAmountBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPersonAmountBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook original \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage jsonPersonAmountBookStorage \u003d new JsonPersonAmountBookStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReadOnlyPersonAmountBook readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePesonAmountBook_nullPersonAmountBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            savePersonAmountBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, String filePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .savePersonAmountBook(personAmountBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonAmountBook(new PersonAmountBook(), null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 121
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonSerializablePersonAmountBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonSerializablePersonAmountBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"JsonSerializablePersonAmountBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAmountBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAmountBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAmountBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonAmountBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 46
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 85
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage personAmountBookStorage \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookStorage(getTempFilePath(\"pABook\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        storageManager \u003d new StorageManager(personAmountBookStorage, userPrefsStorage, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void personAmountBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * {@link JsonPersonAmountBookStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonAmountBookStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook original \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        storageManager.savePersonAmountBook(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReadOnlyPersonAmountBook retrieved \u003d storageManager.readPersonAmountBook().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(retrieved));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotNull(storageManager.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "WillySeahh": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A set of assertions methods using for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/EntryBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Item DEFAULT_ITEM \u003d TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final ArrayList\u003cPerson\u003e DEFAULT_PERSONS \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        item \u003d DEFAULT_ITEM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons \u003d DEFAULT_PERSONS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        item \u003d entryToCopy.getItem();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons \u003d entryToCopy.getPersonsList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code item} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder withItem(Item item) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code persons} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder withPersons(ArrayList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Entry(item, persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 49
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/ItemBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final BigDecimal DEFAULT_PRICE \u003d new BigDecimal(3.50);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final BigDecimal DEFAULT_AMOUNT_PER_PERSON \u003d new BigDecimal(3.50);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private ItemName name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private ItemPrice price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amountPerPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d new ItemName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        price \u003d new ItemPrice(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        amountPerPerson \u003d new Amount(DEFAULT_AMOUNT_PER_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code ItemToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d itemToCopy.getItemName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        price \u003d itemToCopy.getItemPrice();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        amountPerPerson \u003d itemToCopy.getAmountPerPerson();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code ItemName} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d new ItemName(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code ItemPrice} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder withPrice(BigDecimal price) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.price \u003d new ItemPrice(price);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code amountPerPerson} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ItemBuilder withAmountPerPerson(BigDecimal amountPerPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amountPerPerson \u003d new Amount(amountPerPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Item(name, price, amountPerPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 14,
      "akhilvuputuri": 4,
      "WillySeahh": 49
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Willy Seah\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final BigDecimal DEFAULT_AMOUNT \u003d new BigDecimal(3.50);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code PersonToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        amount \u003d personToCopy.getAmount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code Amount} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder withAmount(BigDecimal amount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Builds a Person with name and amount."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new Person(name, amount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 57
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalEntries.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // default entry"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_ONE \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // fields below are to make more entries"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Item PIZZA \u003d new ItemBuilder().withName(\"Pizza\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"19.00\")).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Item PASTA \u003d new ItemBuilder().withName(\"Pasta\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"5.00\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person ANNABELLE \u003d new PersonBuilder().withName(\"Annabelle\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person BOBBY \u003d new PersonBuilder().withName(\"Bobby\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_TWO \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNABELLE, BOBBY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_THREE \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNABELLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // made entries to simulate receipt"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_TWO \u003d new EntryBuilder().withItem(PIZZA)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_TWO).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_THREE \u003d new EntryBuilder().withItem(PASTA)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_THREE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Receipt getTypicalReceipt() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            receipt.addEntry(entry);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ENTRY_ONE, ENTRY_TWO, ENTRY_THREE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 47
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class TypicalItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item BEERTOWER \u003d new ItemBuilder().withName(\"beertower\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"19.90\")).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item STEAMBOAT \u003d new ItemBuilder().withName(\"steamboat\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"39.90\")).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item POPCORN \u003d new ItemBuilder().withName(\"popcorn\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"9.85\")).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Prevents public from instantiating a Typical Item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private TypicalItem () {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "WillySeahh": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // -------------- PersonAmountBook ------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Seah\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withAmount(new BigDecimal(\"3.50\")).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(\"Bob Tan\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"4.50\")).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Lim\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"5.50\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Lee\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"6.50\")).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Seah\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"7.50\")).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kwok\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"8.50\")).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"Geroge Peet\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"9.50\")).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Seah\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"10.50\")).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"IDA Seah\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"11.60\")).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // -------------- Receipt ------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ANNA \u003d new PersonBuilder().withName(\"Anna\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person BRANDON \u003d new PersonBuilder().withName(\"Brandon\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person CHARLIE \u003d new PersonBuilder().withName(\"Charlie\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static PersonAmountBook getTypicalPersonAmountBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook pABook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            pABook.addPerson(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return pABook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cPerson\u003e getTypicalPersonsArrayList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ANNA, BRANDON, CHARLIE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 12,
      "WillySeahh": 61
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A set of assertions methods using for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "WillySeahh": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003c?import seedu.eylah.addressbook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003cfx:root type\u003d\"seedu.eylah.addressbook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 5
    }
  }
]
