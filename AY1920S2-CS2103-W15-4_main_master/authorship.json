[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        events \"failed\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-name\u0027: \u0027Pet Store Helper\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W15-4/main\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "shenghaoc": 2,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.storage.PetTrackerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Pet Store Helper ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetTrackerStorage petTrackerStorage \u003d new JsonPetTrackerStorage(userPrefs.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s pet store helper and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The data from the sample pet store helper will be used instead if {@code storage}\u0027s pet store helper is not"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * found, or an empty pet store helper will be used instead if errors occur when reading {@code storage}\u0027s pet store"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * helper."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Optional\u003cReadOnlyPetTracker\u003e petTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        ReadOnlyPetTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            petTrackerOptional \u003d storage.readPetTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            if (!petTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                logger.info(\"Data file not found. Starting with a sample pet store helper\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            initialData \u003d petTrackerOptional.orElseGet(SampleDataUtil::getSamplePetTracker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Starting with an empty pet store helper\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            initialData \u003d new PetTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Starting with an empty pet store helper\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            initialData \u003d new PetTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Pet Tracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"Starting Pet Store Helper \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Pet Store Helper ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 24,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_INVALID_PET_DISPLAYED_INDEX \u003d \"The pet index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_SLOT_DISPLAYED_INDEX \u003d \"The slot index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_PETS_LISTED_OVERVIEW \u003d \"%1$d pets listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_SLOTS_LISTED_OVERVIEW \u003d \"%1$d slots listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "Zhu-Ruicong": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Contains standard datetime and date patterns to be used in Pet Store Helper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // datetime-related"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String DATETIME_PATTERN \u003d \"d/M/yyyy HHmm\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeFormatter.ofPattern(DATETIME_PATTERN);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // date-related"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * API of the Logic component for Pet Store Helper"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the PetTracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of pets */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 11,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.parser.pet.PetTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * The main LogicManager of Pet Store Helper."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final PetTrackerParser petTrackerParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTrackerParser \u003d new PetTrackerParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Command command \u003d petTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            //model.getPetTracker is ReadOnlyPetTracker,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            //here is casted to ReadOnlyPetTracker to pass checkstyle test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            storage.savePetTracker((ReadOnlyPetTracker) model.getPetTracker());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getPetTracker();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getFilteredPetList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 21,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Pet Store Helper as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "tianqi77": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.general.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "tianqi77": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/pet/AddPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Adds a pet to the pet tracker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class AddPetCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpet\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to the pet store helper. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"SPECIES \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"FOOD NAME: AMOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_FOODLIST + \"FOOD NAME: AMOUNT]\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"Teddy \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"male \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"01-01-2019 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"dog \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand A: 15 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand B: 20 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"small \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"lazy \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New pet added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the pet store helper\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Pet toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddPetCommand to add the specified {@code Pet}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand(Pet pet) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        toAdd \u003d pet;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (model.hasPet(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.addPet(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof AddPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPetCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 7,
      "limdylan": 4,
      "tianqi77": 58,
      "Zhu-Ruicong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/pet/DeletePetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Deletes a pet identified using it\u0027s displayed index from the pet tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class DeletePetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \": Deletes the pet identified by the index number used in the displayed pet list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DELETE_PET_SUCCESS \u003d \"Deleted Pet: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.deletePet(petToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PET_SUCCESS, petToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof DeletePetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 48,
      "Zhu-Ruicong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/pet/EditPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Edits the details of an existing pet in the pet tracker."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class EditPetCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpet\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the pets identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"by the index number used in the displayed pets list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_FOODLIST + \"LIST OF FOOD AND AMOUNT] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"female \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + PREFIX_DOB + \"01/02/2013\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EDIT_PET_SUCCESS \u003d \"Edited Pet: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the pet store helper.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EMPTY_FOODLIST \u003d \"The list of food should not be empty.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final EditPetDescriptor editPetDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param index of the pet in the filtered pet list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param editPetDescriptor details to edit the pet with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand(Index index, EditPetDescriptor editPetDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editPetDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.editPetDescriptor \u003d new EditPetDescriptor(editPetDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet editedPet \u003d createEditedPet(petToEdit, editPetDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!petToEdit.isSamePet(editedPet) \u0026\u0026 model.hasPet(editedPet)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.setPet(petToEdit, editedPet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PET_SUCCESS, editedPet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates and returns a {@code Pet} with the details of {@code petToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * edited with {@code editPetDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static Pet createEditedPet(Pet petToEdit, EditPetDescriptor editPetDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert petToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Name updatedName \u003d editPetDescriptor.getName().orElse(petToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Gender updatedGender \u003d editPetDescriptor.getGender().orElse(petToEdit.getGender());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPetDescriptor.getDateOfBirth().orElse(petToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Species updatedSpecies \u003d editPetDescriptor.getSpecies().orElse(petToEdit.getSpecies());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cFood\u003e updatedFoodList \u003d editPetDescriptor.getFoodList().orElse(petToEdit.getFoodList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPetDescriptor.getTags().orElse(petToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Pet(updatedName, updatedGender, updatedDateOfBirth, updatedSpecies, updatedFoodList, updatedTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(other instanceof EditPetCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand e \u003d (EditPetCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 editPetDescriptor.equals(e.editPetDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Stores the details to edit the pet with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * corresponding field value of the pet."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static class EditPetDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Species species;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor(EditPetDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setSpecies(toCopy.species);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setFoodList(toCopy.foodList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setSpecies(Species species) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.species \u003d species;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSpecies\u003e getSpecies() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(species);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setFoodList(Set\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.foodList \u003d (foodList !\u003d null) ? new HashSet\u003c\u003e(foodList) : null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cFood\u003e\u003e getFoodList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (foodList !\u003d null) ? Optional.of(Collections.unmodifiableSet(foodList)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (!(other instanceof EditPetDescriptor)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            EditPetDescriptor e \u003d (EditPetDescriptor) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getSpecies().equals(e.getSpecies())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getFoodList().equals(e.getFoodList())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 8,
      "limdylan": 5,
      "tianqi77": 228,
      "Zhu-Ruicong": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/pet/FindPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Finds and lists all pets in pet tracker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class FindPetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpets\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all pets whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                String.format(Messages.MESSAGE_PETS_LISTED_OVERVIEW, model.getFilteredPetList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof FindPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 38,
      "Zhu-Ruicong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/slot/AddSlotCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Adds a slot to the schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class AddSlotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addslot\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to the pet store helper. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_NAME + \"PETNAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_DURATION + \"DURATION\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_NAME + \"Coco \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_DATETIME + \"16/11/2020 1300 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_DURATION + \"90 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New slot added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Slot slotToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates an AddSlotCommand to add the specified {@code slot}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public AddSlotCommand(Slot slot) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        slotToAdd \u003d slot;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.addSlot(slotToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slotToAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof AddSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 slotToAdd.equals(((AddSlotCommand) other).slotToAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/slot/DeleteSlotCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Deletes a slot identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DeleteSlotCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteslot\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \": Deletes the slot identified by the index number used in the displayed slots list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_DELETE_SLOT_SUCCESS \u003d \"Deleted slot: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DeleteSlotCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slotToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.deleteSlot(slotToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof DeleteSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSlotCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/slot/EditSlotCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SLOTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Edits the details of an slot in the schedule."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class EditSlotCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editslot\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the slot identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"by the index number used in the displayed slots list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_NAME + \"Garfield \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + PREFIX_DURATION + \"360\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_EDIT_SLOT_SUCCESS \u003d \"Edited slot: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final EditSlotDescriptor editSlotDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param editSlotDescriptor details to edit the person with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotCommand(Index index, EditSlotDescriptor editSlotDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(editSlotDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.editSlotDescriptor \u003d new EditSlotDescriptor(editSlotDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slotToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot editedSlot \u003d createEditedSlot(slotToEdit, editSlotDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.setSlot(slotToEdit, editedSlot);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.updateFilteredSlotList(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SLOT_SUCCESS, editedSlot));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates and returns a {@code Slot} with the details of {@code slotToEdit}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * edited with {@code editSlotDescriptor}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static Slot createEditedSlot(Slot slotToEdit, EditSlotDescriptor editSlotDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assert slotToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet updatedPet \u003d editSlotDescriptor.getPet().orElse(slotToEdit.getPet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalDateTime updatedDateTime \u003d editSlotDescriptor.getDateTime().orElse(slotToEdit.getDateTime());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Duration updatedDuration \u003d editSlotDescriptor.getDuration().orElse(slotToEdit.getDuration());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new Slot(updatedPet, updatedDateTime, updatedDuration);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!(other instanceof EditSlotCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotCommand e \u003d (EditSlotCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 editSlotDescriptor.equals(e.editSlotDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static class EditSlotDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private Pet pet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public EditSlotDescriptor() {}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public EditSlotDescriptor(EditSlotDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setPet(toCopy.pet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return CollectionUtil.isAnyNonNull(pet, dateTime, duration);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setPet(Pet pet) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.pet \u003d pet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Optional\u003cPet\u003e getPet() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(pet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (!(other instanceof EditSlotDescriptor)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            EditSlotDescriptor e \u003d (EditSlotDescriptor) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return getPet().equals(e.getPet())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/slot/FindSlotCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.SlotPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Finds and lists all slots in the schedule whose contents contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class FindSlotCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all slots where pet name matches exactly \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"(case-insensitive) or slots that is within the date specified (ignoring timing) and displays them as a \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: [n/PETNAME] [t/DATE]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" garfield 10/11/2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final SlotPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public FindSlotCommand(SlotPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.updateFilteredSlotList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                String.format(Messages.MESSAGE_SLOTS_LISTED_OVERVIEW, model.getFilteredSlotList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof FindSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindSlotCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "tianqi77": 2,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_FOODLIST \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes under package parser/pet."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Gender.valueOf(trimmedGender.toUpperCase());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String species} into an {@code Species}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code species} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Species parseSpecies(String species) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedSpecies \u003d species.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Species.isValidSpecies(trimmedSpecies)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Species(trimmedSpecies);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String dateOfBirth} into an {@code DateOfBirth}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String food} into an {@code Food}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code food} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Food parseFood(String food) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] foodDetails \u003d food.split(\":\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedFood \u003d foodDetails[0].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int foodAmount;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            foodAmount \u003d Integer.parseInt(foodDetails[1].trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodName(trimmedFood)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodAmount(foodAmount)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Food(trimmedFood, foodAmount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cFood\u003e parseFoodList(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(foodList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cFood\u003e foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String food : foodList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            foodSet.add(parseFood(food));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return foodSet;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "tianqi77": 162,
      "Zhu-Ruicong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.general.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/pet/AddPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new AddPetCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class AddPetParser implements Parser\u003cAddPetCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPetCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an AddPetCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_SPECIES,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        PREFIX_FOODLIST, PREFIX_TAG); //for now delete foodlist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        //for now delete foodlist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_FOODLIST, PREFIX_SPECIES)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    AddPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Species species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Set\u003cFood\u003e foodList \u003d ParserUtil.parseFoodList(argMultimap.getAllValues(PREFIX_FOODLIST));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet pet \u003d new Pet(name, gender, dateOfBirth, species, foodList, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new AddPetCommand(pet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 8,
      "limdylan": 8,
      "tianqi77": 49,
      "Zhu-Ruicong": 6,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/pet/DeletePetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new DeletePetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetParser implements Parser\u003cDeletePetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePetCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a DeletePetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DeletePetCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 21,
      "Zhu-Ruicong": 2,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/pet/EditPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new EditPetCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class EditPetParser implements Parser\u003cEditPetCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPetCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an EditPetCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        PREFIX_SPECIES, PREFIX_FOODLIST, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand.EditPetDescriptor editPetDescriptor \u003d new EditPetCommand.EditPetDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIES).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setSpecies(ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseFoodListForEdit(argMultimap.getAllValues(PREFIX_FOODLIST)).ifPresent(editPetDescriptor::setFoodList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPetDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!editPetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(EditPetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new EditPetCommand(index, editPetDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e} if {@code foodList} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code foodList} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cFood\u003e} containing zero food."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cFood\u003e\u003e parseFoodListForEdit(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert foodList !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodList.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodList.stream().allMatch(t -\u003e t.equals(\"\"))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(EditPetCommand.MESSAGE_EMPTY_FOODLIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Collection\u003cString\u003e foodSet \u003d foodList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseFoodList(foodSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 7,
      "limdylan": 7,
      "tianqi77": 91,
      "Zhu-Ruicong": 2,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/pet/FindPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new FindPetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class FindPetParser implements Parser\u003cFindPetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPetCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a FindPetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new FindPetCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 25,
      "Zhu-Ruicong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/pet/PetTrackerParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTrackerParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case AddPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new AddPetParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case EditPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new EditPetParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case DeletePetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DeletePetParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case FindPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new FindPetParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 9,
      "tianqi77": 10,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/AddSlotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new AddSlotCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class AddSlotParser implements Parser\u003cAddSlotCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public AddSlotParser(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public AddSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DURATION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet pet \u003d SlotParserUtil.parsePet(argMultimap.getValue(PREFIX_NAME).get(), model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalDateTime dateTime \u003d SlotParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Duration duration \u003d SlotParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slot \u003d new Slot(pet, dateTime, duration);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new AddSlotCommand(slot);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/DeleteSlotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new DeleteSlotCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DeleteSlotParser implements Parser\u003cDeleteSlotCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DeleteSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new DeleteSlotCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSlotCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/EditSlotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new EditSlotCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class EditSlotParser implements Parser\u003cEditSlotCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSlotCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns an EditSlotCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATETIME, PREFIX_DURATION, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            index \u003d SlotParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSlotCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotDescriptor editSlotDescriptor \u003d new EditSlotDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            editSlotDescriptor.setDateTime(SlotParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            editSlotDescriptor.setDuration(SlotParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!editSlotDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(EditSlotCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new EditSlotCommand(index, editSlotDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/FindSlotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.SlotDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.SlotPetNamePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.slot.SlotPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new FindSlotCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class FindSlotParser implements Parser\u003cFindSlotCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindSlotCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns a FindSlotCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public FindSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isEmpty()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_DATETIME).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cSlotPredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            predicates.add(new SlotPetNamePredicate(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            predicates.add(new SlotDatePredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    SlotParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get())));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assert !(predicates.isEmpty()) : \"No predicates for finding slots!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new FindSlotCommand(predicates.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .reduce((pred1, pred2) -\u003e (SlotPredicate) pred1.and(pred2))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/ScheduleParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class ScheduleParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Used to add pets reference from the ModelManager to the slots"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param model Used to add pets reference from the ModelManager to the slots"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public ScheduleParser(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case AddSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new AddSlotParser(model).parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case EditSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new EditSlotParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case DeleteSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new DeleteSlotParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        case FindSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new FindSlotParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 73,
      "limdylan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/slot/SlotParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \"Date and time must follow format \" + DateTimeUtil.DATETIME_PATTERN + \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_PETNAME \u003d \"Pet name is invalid.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_PET_DOES_NOT_EXIST \u003d \"Pet name does not match any pet in record.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses a {@code String petName} into a {@code Pet}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code petName} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Pet parsePet(String nameStr, Model model) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(nameStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedPetName \u003d nameStr.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!Name.isValidName(trimmedPetName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PETNAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Name petName \u003d new Name(trimmedPetName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return model.getPet(petName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (PetNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_PET_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        LocalDateTime parsedDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            parsedDateTime \u003d LocalDateTime.parse(trimmedDateTime, DateTimeUtil.DATETIME_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATETIME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return parsedDateTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses a {@code String duration} into an {@code Duration}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Duration newDuration;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            newDuration \u003d Duration.ofMinutes(Long.parseLong(trimmedDuration));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DURATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return newDuration;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 94,
      "limdylan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * The API of the Pet Store Helper Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Predicate\u003cSlot\u003e PREDICATE_SHOW_ALL_SLOTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Sets the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setPetTrackerFilePath(Path petTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces pet tracker book data with the data in {@code petTracker}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setPetTracker(ReadOnlyPetTracker petTracker);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the PetTracker."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    boolean hasPet(Pet pet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the pet with the given {@code name}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Pet getPet(Name name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Deletes the given pet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must exist in the pet tracker."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void deletePet(Pet target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds the given pet."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code pet} must not already exist in the pet tracker."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void addPet(Pet pet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the given pet {@code target} with {@code editedPet}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the pet tracker."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setPet(Pet target, Pet editedPet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the filtered pet list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the filter of the filtered pet list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void updateFilteredPetList(Predicate\u003cPet\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // no need for hasSlot(), because duplicate slots are allowed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Deletes the given slot."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The slot must exist in the pet tracker."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void deleteSlot(Slot target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds the given slot."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void addSlot(Slot slot);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the given slot {@code target} with {@code editedSlot}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setSlot(Slot target, Slot editedSlot);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the filter of the filtered slot list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 77,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents the in-memory model of the pet tracker data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final PetTracker petTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final FilteredList\u003cPet\u003e filteredPets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final FilteredList\u003cSlot\u003e filteredSlots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Initializes a ModelManager with the given petTracker and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ModelManager(ReadOnlyPetTracker petTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(petTracker, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.fine(\"Initializing with pet tracker: \" + petTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTracker \u003d new PetTracker(petTracker);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredPets \u003d new FilteredList\u003c\u003e(this.petTracker.getPetList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        filteredSlots \u003d new FilteredList\u003c\u003e(this.petTracker.getSlotList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this(new PetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return userPrefs.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        userPrefs.setPetTrackerFilePath(petTrackerFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPetTracker(ReadOnlyPetTracker petTracker) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTracker.resetData(petTracker);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTracker.hasPet(pet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.removePet(target);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.addPet(pet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.setPet(target, editedPet);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pet List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Pet} backed by the internal list of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code versionedpetTracker}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return filteredPets;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredPets.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Slot  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void deleteSlot(Slot target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.removeSlot(target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.addSlot(slot);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        updateFilteredSlotList(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireAllNonNull(target, editedSlot);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.setSlot(target, editedSlot);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Slot List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Slot} backed by the internal list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code versionedpetTracker}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return filteredSlots;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        filteredSlots.setPredicate(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTracker.equals(other.petTracker)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 filteredPets.equals(other.filteredPets)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 filteredSlots.equals(other.filteredSlots);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 11,
      "Zhu-Ruicong": 67,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PetTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.UniquePetList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.slot.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Wraps all pet system data at the pet-tracker level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Duplicates are not allowed (by .isSamePet comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTracker implements ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final UniquePetList pets;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Schedule slots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets \u003d new UniquePetList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        slots \u003d new Schedule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker(ReadOnlyPetTracker toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of the pet list with {@code pets}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code pets} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setPets(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.pets.setPets(pets);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of the schedule with {@code slots}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.slots.setSlots(slots);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void resetData(ReadOnlyPetTracker newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPets(newData.getPetList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        setSlots(newData.getSlotList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    //// pet-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.contains(pet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pets.getPet(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a pet to the pet tracker."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The pet must not already exist in the pet tracker."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void addPet(Pet p) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.add(p);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the given pet {@code target} in the list with {@code editedPet}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the pet tracker."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editedPet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.setPet(target, editedPet);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes {@code key} from this {@code PetTracker}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code key} must exist in the pet tracker."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void removePet(Pet key) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.remove(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    //// slot-level operations"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a slot to the schedule."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void addSlot(Slot p) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        slots.add(p);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the given slot {@code target} in the list with {@code editedSlot}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(editedSlot);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        slots.setSlot(target, editedSlot);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes {@code key} from this {@code PetTracker}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code key} must exist in the pet tracker."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void removeSlot(Slot key) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        slots.remove(key);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int numPets \u003d pets.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int numSlots \u003d slots.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%d pets, %d slots\", numPets, numSlots);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPet\u003e getPetList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return slots.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof PetTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 pets.equals(((PetTracker) other).pets)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 slots.equals(((PetTracker) other).slots));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return Objects.hash(pets, slots);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 71,
      "tianqi77": 102,
      "Zhu-Ruicong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPetTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cPet\u003e getPetList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns an unmodifiable view of the slots list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    ObservableList\u003cSlot\u003e getSlotList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "tianqi77": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Path petTrackerFilePath \u003d Paths.get(\"data\" , \"pettracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        setPetTrackerFilePath(newUserPrefs.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTrackerFilePath \u003d petTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 petTrackerFilePath.equals(o.petTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(guiSettings, petTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + petTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/DateOfBirth.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s date of birth."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \"Date of Birth must follow the format of \" + DateTimeUtil.DATE_PATTERN + \".\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param dateOfBirth A valid date of birth."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d LocalDate.parse(dateOfBirth, DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns if a given string is a valid format of date of birth."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidDateOfBirth(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDate mightBeValid \u003d LocalDate.parse(test, DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (mightBeValid.isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException p) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 5,
      "limdylan": 7,
      "Zhu-Ruicong": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Food object in Pet Shop Helper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFoodName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name and amount of food should both exist \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"and separated by a colon \u0027:\u0027.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Food names should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"spaces only, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d \"Food amount must be a positive integer number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final Integer foodAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param foodName A valid tag name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Food(String foodName, int foodAmount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        checkArgument(isValidFoodName(foodName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        checkArgument(isValidFoodAmount(foodAmount), MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmount \u003d foodAmount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given food amount is positive."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodAmount(Integer test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same type as this food."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameType(Food other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodName.equals(other.foodName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same amount as this food."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameAmount(Food other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodAmount.equals(other.foodAmount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || ((other instanceof Food) // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameType((Food) other)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameAmount((Food) other)); // state checks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(foodAmount, foodName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return \"[\" + foodName + \"]: \" + foodAmount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "tianqi77": 6,
      "Zhu-Ruicong": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Gender.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s gender in the pet shop helper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: Only two valid constants: FEMALE and MALE."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    FEMALE (\"FEMALE\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    MALE (\"MALE\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender should be either MALE or FEMALE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Gender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.value \u003d gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return (test.equals(\"MALE\")) || (test.equals(\"FEMALE\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 7,
      "Zhu-Ruicong": 25,
      "shenghaoc": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s name in the pet shop helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return fullName.compareTo(other.fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "Zhu-Ruicong": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Tests that a {@code Pet}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPet\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean test(Pet pet) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(pet.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Pet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet in the pet shop helper."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Pet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Species species;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cFood\u003e foodList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Pet(Name name, Gender gender, DateOfBirth dateOfBirth, Species species, Set\u003cFood\u003e foodList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodList.addAll(foodList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species getSpecies() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(foodList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if both pets have the same name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a weaker notion of equality between two pets."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSamePet(Pet otherPet) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (otherPet \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return otherPet !\u003d null \u0026\u0026 otherPet.getName().equals(getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if both pets have the same identity and data fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a stronger notion of equality between two pets."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof Pet)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Pet otherPet \u003d (Pet) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return otherPet.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getGender().equals(getGender())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getSpecies().equals(getSpecies())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getFoodList().equals(getFoodList())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getTags().equals(getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Date Of Birth: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Species: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getSpecies())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Foods: \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getFoodList().forEach(builder::append);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "Zhu-Ruicong": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Species.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s Species in the pet shop helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSpecies(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Species {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \"Species should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the species must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String species;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Species}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param species A valid species name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species(String species) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidSpecies(species), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid species."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidSpecies(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof Species // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 species.equals(((Species) other).species)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/UniquePetList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A list of pets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A pet is considered unique by comparing using {@code Pet#isSamePet(Pet)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * pets uses Pet#isSamePet(Pet) for equality so as to ensure that the pet being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * unique in terms of identity in the UniquePetList. However, the removal of a pet uses Pet#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * as to ensure that the pet with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * @see Pet#isSamePet(Pet)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class UniquePetList implements Iterable\u003cPet\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the list contains an equivalent pet as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean contains(Pet toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the pet in the list with the matching name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        List\u003cPet\u003e petsWithMatchingName \u003d internalList.stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .filter(pet -\u003e pet.getName().equals(name))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assert petsWithMatchingName.size() \u003c\u003d 1 : \"Duplicate pets detected!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (petsWithMatchingName.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return petsWithMatchingName.get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds a pet to the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must not already exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void add(Pet toAdd) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the pet {@code target} in the list with {@code editedPet}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!target.isSamePet(editedPet) \u0026\u0026 contains(editedPet)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.set(index, editedPet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Removes the equivalent pet from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void remove(Pet toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(UniquePetList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the contents of this list with {@code pets}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code pets} must not contain duplicate pets."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(pets);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!petsAreUnique(pets)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(pets);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Iterator\u003cPet\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof UniquePetList // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePetList) other).internalList));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if {@code pets} contains only unique pets."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private boolean petsAreUnique(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (int i \u003d 0; i \u003c pets.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c pets.size(); j++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                if (pets.get(i).isSamePet(pets.get(j))) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 16,
      "Zhu-Ruicong": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/exceptions/DuplicatePetException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation will result in duplicate Pets (Pets are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DuplicatePetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DuplicatePetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(\"Operation would result in duplicate pets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/exceptions/PetNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation is unable to find the specified pet."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class PetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/Schedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.slot.exceptions.SlotNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A collection of slots that does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Unlike {@link package seedu.address.model.pet.UniquePetList}, a schedule is allowed to contain duplicate slots."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if the schedule contains an identical slot as the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean contains(Slot toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a slot to the schedule."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void add(Slot toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the slot {@code target} in the schedule with {@code editedSlot}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireAllNonNull(target, editedSlot);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.set(index, editedSlot);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes the given slot from the schedule."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The slot must exist in the schedule."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void remove(Slot toRemove) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(Schedule replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of this schedule with {@code slots}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireAllNonNull(slots);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.setAll(slots);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cSlot\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                || (other instanceof Schedule // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 internalList.equals(((Schedule) other).internalList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/Slot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Represents a Slot in the pet shop helper schedule system."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Slot implements Comparable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Pet pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Slot(Pet pet, LocalDateTime dateTime, Duration duration) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireAllNonNull(pet, dateTime, duration);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the date on which the slot falls on, regardless of time of day."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the ending datetime of the slot, based on its starting datetime and duration."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDateTime().plus(duration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if both slots fall on the same date, regardless of time of day."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isSameDate(Slot othersSlot) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDate().equals(othersSlot.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot starts and ends on the same date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isWithinOneDay() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalDate endDate \u003d getEndDateTime().toLocalDate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDate().equals(endDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot is in conflict with the given other slot."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isInConflictWith(Slot otherSlot) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot is in conflict with one or more other slots."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean hasConflict() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        throw new UnsupportedOperationException(\"Not implemented yet!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Compares this slot to another slot."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The comparison is first done by their datetimes, then by their durations,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * then by the names of the pets occupying the slots."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(Slot other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (dateTime.compareTo(other.dateTime) !\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return dateTime.compareTo(other.dateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (duration.compareTo(other.duration) !\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return duration.compareTo(other.duration);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pet.getName().compareTo(other.pet.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if all fields of both slots are the same."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!(other instanceof Slot)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Slot otherSlot \u003d (Slot) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return otherSlot.getPet().equals(getPet())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 otherSlot.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().equals(getDuration());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return Objects.hash(pet, dateTime, duration);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%s - %s (%s)\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDateTime(), getEndDateTime(), getPet().getName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/SlotDatePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code DateTime} matches the given date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotDatePredicate extends SlotPredicate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public SlotDatePredicate(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return dateTime.toLocalDate().isEqual(slot.getDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof SlotDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 dateTime.equals(((SlotDatePredicate) other).dateTime)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/SlotPetNamePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code Pet}\u0027s {@code Name} matches the given name exactly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotPetNamePredicate extends SlotPredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final String petName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public SlotPetNamePredicate(String petName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return petName.toLowerCase().equals(slot.getPet().getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof SlotPetNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 petName.equals(((SlotPetNamePredicate) other).petName)); // state check"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/SlotPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code Name} or {@code LocalDateTime} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public abstract class SlotPredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public abstract boolean test(Slot slot);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/slot/exceptions/SlotNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package seedu.address.model.slot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Signals that the operation is unable to find the specified slot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class SlotNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Tag in the pet shop helper"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric and restricted to 1 word only.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Contains utility methods for populating {@code Pet Tracker} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static Pet[] getSamplePets() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return new Pet[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Alex\"), Gender.MALE, new DateOfBirth(\"1/12/2005\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"cat food:10\"), getTagSet(\"dumb\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Bob\"), Gender.FEMALE, new DateOfBirth(\"10/12/2001\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"cat food:10\"), getTagSet(\"tall\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Cindy\"), Gender.MALE, new DateOfBirth(\"2/10/2019\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"cat food:10\"), getTagSet(\"small\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"David\"), Gender.FEMALE, new DateOfBirth(\"4/12/2017\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"dog food:10\"), getTagSet(\"angry\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Elsa\"), Gender.FEMALE, new DateOfBirth(\"6/6/2019\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"dog food:10\"), getTagSet(\"lazy\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Foo\"), Gender.MALE, new DateOfBirth(\"1/1/2011\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    getFoodSet(\"dog food:10\"), getTagSet(\"new\"))};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static ReadOnlyPetTracker getSamplePetTracker() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetTracker samplePt \u003d new PetTracker();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Pet samplePet : getSamplePets()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            samplePt.addPet(samplePet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return samplePt;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns a food set containing the list of strings given."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static Set\u003cFood\u003e getFoodSet(String... strings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cFood\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (String t : strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            String[] temp \u003d t.split(\":\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Food food \u003d new Food(temp[0], Integer.parseInt(temp[1]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            set.add(food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 6,
      "Zhu-Ruicong": 24,
      "shenghaoc": 14,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final Integer foodAmount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedFood(String food) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String[] foodDetails \u003d food.split(\":\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.foodName \u003d foodDetails[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.foodAmount \u003d Integer.valueOf(foodDetails[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodName \u003d source.foodName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodAmount \u003d source.foodAmount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public String getFood() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return foodName + \":\" + foodAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Food.isValidFoodName(foodName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Food.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Food.isValidFoodAmount(foodAmount)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Food(foodName, foodAmount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Jackson-friendly version of {@link Pet}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonAdaptedPet {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String species;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonAdaptedPet} with the given pet details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /* ignore reading in food from json for now"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedPet(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                          @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"species\") String species,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                          @JsonProperty(\"foodList\") List\u003cJsonAdaptedFood\u003e foodList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                          @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public JsonAdaptedPet(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"species\") String species,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                @JsonProperty(\"foodList\") List\u003cJsonAdaptedFood\u003e foodList,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (foodList !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.foodList.addAll(foodList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code Pet} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedPet(Pet source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        species \u003d source.getSpecies().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodList.addAll(source.getFoodList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this Jackson-friendly adapted pet object into the model\u0027s {@code Pet} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted pet."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Pet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final List\u003cTag\u003e petTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final List\u003cFood\u003e petFoods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedFood food : foodList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petFoods.add(food.toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        final Gender modelGender \u003d Gender.valueOf(gender.toUpperCase()); // TODO: refactor gender"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (species \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Species.isValidSpecies(species)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Species modelSpecies \u003d new Species(species);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(petTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Set\u003cFood\u003e modelFoods \u003d new HashSet\u003c\u003e(petFoods);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Pet(modelName, modelGender, modelDateOfBirth, modelSpecies, modelFoods, modelTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 7,
      "shenghaoc": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPetTrackerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A class to access PetTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class JsonPetTrackerStorage implements PetTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPetTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonPetTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return readPetTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Similar to {@link #readPetTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Optional\u003cJsonSerializablePetTracker\u003e jsonPetTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                filePath, JsonSerializablePetTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!jsonPetTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return Optional.of(jsonPetTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        savePetTracker(petTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Similar to {@link #savePetTracker(ReadOnlyPetTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(petTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePetTracker(petTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePetTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * An Immutable PetTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "@JsonRootName(value \u003d \"pettracker\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonSerializablePetTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"Pets list contains duplicate pet(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedPet\u003e pets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonSerializablePetTracker} with the given pets."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonSerializablePetTracker(@JsonProperty(\"pets\") List\u003cJsonAdaptedPet\u003e pets) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.pets.addAll(pets);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code ReadOnlyPetTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePetTracker}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonSerializablePetTracker(ReadOnlyPetTracker source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pets.addAll(source.getPetList().stream().map(JsonAdaptedPet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this pet tracker into the model\u0027s {@code PetTracker} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public PetTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker petTracker \u003d new PetTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedPet jsonAdaptedPet : pets) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Pet pet \u003d jsonAdaptedPet.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            if (petTracker.hasPet(pet)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTracker.addPet(pet);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PetTrackerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Represents a storage for {@link seedu.address.model.PetTracker}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public interface PetTrackerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns PetTracker data as a {@link ReadOnlyPetTracker}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @see #getPetTrackerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Saves the given {@link ReadOnlyPetTracker} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param petTracker cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @see #savePetTracker(ReadOnlyPetTracker)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public interface Storage extends PetTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Manages storage of PetTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private PetTrackerStorage petTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public StorageManager(PetTrackerStorage petTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTrackerStorage \u003d petTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PetTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerStorage.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return readPetTracker(petTrackerStorage.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerStorage.readPetTracker(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        savePetTracker(petTracker, petTrackerStorage.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTrackerStorage.savePetTracker(petTracker, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private PetListPanel petListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private StackPane petListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petListPanel \u003d new PetListPanel(logic.getFilteredPetList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petListPanelPlaceholder.getChildren().add(petListPanel.getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public PetListPanel getPetListPanel() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petListPanel;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 10,
      "-": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PetCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * An UI component that displays information of a {@code Pet}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class PetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private static final String FXML \u003d \"PetListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final Pet pet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label species;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private FlowPane foodList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public PetCard(Pet pet, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        name.setText(pet.getName().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        gender.setText(pet.getGender().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        dateOfBirth.setText(pet.getDateOfBirth().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        species.setText(pet.getSpecies().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        pet.getFoodList().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .forEach(food -\u003e foodList.getChildren().add(new Label(food.toString())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        pet.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof PetCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetCard card \u003d (PetCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 pet.equals(card.pet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 22,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PetListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Panel containing the list of pets."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class PetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private static final String FXML \u003d \"PetListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private ListView\u003cPet\u003e petListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public PetListPanel(ObservableList\u003cPet\u003e petList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petListView.setItems(petList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petListView.setCellFactory(listView -\u003e new PetListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Pet} using a {@code PetCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    class PetListViewCell extends ListCell\u003cPet\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        protected void updateItem(Pet pet, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            super.updateItem(pet, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            if (empty || pet \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                setGraphic(new PetCard(pet, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.ui.UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "         title\u003d\"Pet Store Tracker App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003cVBox fx:id\u003d\"petList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "          \u003cStackPane fx:id\u003d\"petListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/PetListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"foodList\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"species\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$species\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/PetListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "  \u003cListView fx:id\u003d\"petListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerStorage(temporaryFolder.resolve(\"petTracker.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String deleteCommand \u003d \"deletepet 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    // Restore after display command is added, no other command with similar behavior"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    //    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    //        String listCommand \u003d ListCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    //        assertCommandSuccess(addCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Setup LogicManager with JsonPetTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPetTracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String addCommand \u003d AddPetCommand.COMMAND_WORD + NAME_DESC_COCO + GENDER_DESC_COCO + DOB_DESC_COCO"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_COCO + FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(COCO).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.addPet(expectedPet);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void getFilteredPetList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPetList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static class JsonPetTrackerIoExceptionThrowingStub extends JsonPetTrackerStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        private JsonPetTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 48,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/pet/AddPetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddPetCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void constructor_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPetCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_petAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        seedu.address.logic.commands.pet.AddPetCommandTest.ModelStubAcceptingPetAdded modelStub \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new seedu.address.logic.commands.pet.AddPetCommandTest.ModelStubAcceptingPetAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet validPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandResult commandResult \u003d new AddPetCommand(validPet).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(String.format(AddPetCommand.MESSAGE_SUCCESS, validPet), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Arrays.asList(validPet), modelStub.petsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePet_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet validPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand addCommand \u003d new AddPetCommand(validPet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPet(validPet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(CommandException.class, AddPetCommand.MESSAGE_DUPLICATE_PET, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet alice \u003d new PetBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet bob \u003d new PetBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand addAliceCommand \u003d new AddPetCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand addBobCommand \u003d new AddPetCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand addAliceCommandCopy \u003d new AddPetCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPetTracker(ReadOnlyPetTracker newData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void deleteSlot(Slot slot) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A Model stub that contains a single pet."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStubWithPet extends ModelStub {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        private final Pet pet;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelStubWithPet(Pet pet) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.pet \u003d pet;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return this.pet.isSamePet(pet);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A Model stub that always accept the pet being added."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStubAcceptingPetAdded extends ModelStub {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final ArrayList\u003cPet\u003e petsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return petsAdded.stream().anyMatch(pet::isSamePet);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petsAdded.add(pet);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new PetTracker();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/pet/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String VALID_NAME_COCO \u003d \"Coco\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String VALID_NAME_GARFIELD \u003d \"Garfield\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender VALID_GENDER_COCO \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender VALID_GENDER_GARFIELD \u003d Gender.MALE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String VALID_DOB_COCO \u003d \"2/2/2015\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String VALID_DOB_GARFIELD \u003d \"19/6/1978\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_COCO \u003d \"dog\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_GARFIELD \u003d \"cat\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String VALID_FOOD_COCO \u003d \"dogfood:10\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String VALID_FOOD_GARFIELD \u003d \"catfood:10\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_FAT \u003d \"fat\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_LAZY \u003d \"lazy\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String NAME_DESC_COCO \u003d \" \" + PREFIX_NAME + VALID_NAME_COCO;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String NAME_DESC_GARFIELD \u003d \" \" + PREFIX_NAME + VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String GENDER_DESC_COCO \u003d \" \" + PREFIX_GENDER + VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String GENDER_DESC_GARFIELD \u003d \" \" + PREFIX_GENDER + VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String DOB_DESC_COCO \u003d \" \" + PREFIX_DOB + VALID_DOB_COCO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String DOB_DESC_GARFIELD \u003d \" \" + PREFIX_DOB + VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String SPECIES_DESC_COCO \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_COCO;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String SPECIES_DESC_GARFIELD \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String FOOD_DESC_COCO \u003d \" \" + PREFIX_FOODLIST + VALID_FOOD_COCO;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String FOOD_DESC_GARFIELD \u003d \" \" + PREFIX_FOODLIST + VALID_FOOD_GARFIELD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String TAG_DESC_LAZY \u003d \" \" + PREFIX_TAG + VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String TAG_DESC_FAT \u003d \" \" + PREFIX_TAG + VALID_TAG_FAT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"femali\"; // only \"male\" and \"female\" allowed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"07/04/00\"; // must follow d-M-yyyy format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String INVALID_SPECIES_DESC \u003d \" \" + PREFIX_SPECIES; // empty string not allowed for species"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final EditPetCommand.EditPetDescriptor DESC_COCO;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final EditPetCommand.EditPetDescriptor DESC_GARFIELD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DESC_COCO \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_COCO.toString()).withDateOfBirth(VALID_DOB_COCO)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_COCO).withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DESC_GARFIELD \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD.toString()).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_LAZY, VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * - the address book, filtered pet list and selected pet in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker expectedPetTracker \u003d new PetTracker(actualModel.getPetTracker());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        List\u003cPet\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPetList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedPetTracker, actualModel.getPetTracker());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPetList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static void showPetAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d model.getFilteredPetList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final String[] splitName \u003d pet.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model.updateFilteredPetList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(1, model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 13,
      "limdylan": 1,
      "shenghaoc": 51,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/pet/DeletePetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.showPetAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * {@code DeletePetCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petToDelete \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePetCommand.MESSAGE_DELETE_PET_SUCCESS, petToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.deletePet(petToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petToDelete \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePetCommand.MESSAGE_DELETE_PET_SUCCESS, petToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.deletePet(petToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showNoPet(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getPetList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteFirstCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteSecondCommand \u003d new DeletePetCommand(INDEX_SECOND_PET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteFirstCommandCopy \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private void showNoPet(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model.updateFilteredPetList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(model.getFilteredPetList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/pet/EditPetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DESC_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DESC_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.showPetAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * EditPetCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(editedPet).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(model.getFilteredPetList().get(0), editedPet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index indexLastPet \u003d Index.fromOneBased(model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet lastPet \u003d model.getFilteredPetList().get(indexLastPet.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetBuilder petInList \u003d new PetBuilder(lastPet);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d petInList.withName(VALID_NAME_GARFIELD).withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD.toString()).withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(indexLastPet, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(lastPet, editedPet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET, new EditPetDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d new PetBuilder(petInFilteredList).withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(model.getFilteredPetList().get(0), editedPet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePetUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet firstPet \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(firstPet).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_SECOND_PET, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPetCommand.MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePetFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // edit pet in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petInList \u003d model.getPetTracker().getPetList().get(INDEX_SECOND_PET.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditPetDescriptorBuilder(petInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPetCommand.MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidPetIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidPetIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getPetList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final EditPetCommand standardCommand \u003d new EditPetCommand(INDEX_FIRST_PET, DESC_COCO);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor copyDescriptor \u003d new EditPetDescriptor(DESC_COCO);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand commandWithSameValues \u003d new EditPetCommand(INDEX_FIRST_PET, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPetCommand(INDEX_SECOND_PET, DESC_COCO)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPetCommand(INDEX_FIRST_PET, DESC_GARFIELD)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/pet/FindPetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PETS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPetCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindPetCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findFirstCommand \u003d new FindPetCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findSecondCommand \u003d new FindPetCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findFirstCommandCopy \u003d new FindPetCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_zeroKeywords_noPetFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d new FindPetCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPetList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_multipleKeywords_multiplePetsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Carl Elle Fiona\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d new FindPetCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPetList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 27,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 4,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.general.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/AddPetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DOB_DESC_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.FOOD_DESC_GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.NAME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.SPECIES_DESC_GARFIELD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.TAG_DESC_FAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddPetCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private AddPetParser parser \u003d new AddPetParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(GARFIELD).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_COCO + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_COCO + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_COCO + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPetMultipleTags \u003d new PetBuilder(GARFIELD).withTags(VALID_TAG_LAZY, VALID_TAG_FAT)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, new AddPetCommand(expectedPetMultipleTags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(COCO).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_COCO + GENDER_DESC_COCO + DOB_DESC_COCO + SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_COCO, new AddPetCommand(expectedPet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + VALID_GENDER_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing date of birth prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + VALID_DOB_GARFIELD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + VALID_SPECIES_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + VALID_GENDER_GARFIELD + VALID_DOB_GARFIELD"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + VALID_SPECIES_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + INVALID_GENDER_DESC + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + INVALID_DOB_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + INVALID_SPECIES_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + INVALID_TAG_DESC + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + INVALID_SPECIES_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + FOOD_DESC_GARFIELD, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/DeletePetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * outside of the DeletePetCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * same path through the DeletePetCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private DeletePetParser parser \u003d new DeletePetParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_validArgs_returnsDeletePetCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePetCommand(INDEX_FIRST_PET));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 10,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/EditPetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.DOB_DESC_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.SPECIES_DESC_GARFIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.TAG_DESC_FAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.CommandTestUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private EditPetParser parser \u003d new EditPetParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, DateOfBirth.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SPECIES_DESC, Species.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid gender followed by valid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC + CommandTestUtil.DOB_DESC_COCO,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // valid gender followed by invalid gender. The test case for invalid gender followed by valid gender"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + GENDER_DESC_GARFIELD + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Pet} being edited,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FAT + TAG_DESC_LAZY + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FAT + TAG_EMPTY + TAG_DESC_LAZY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FAT + TAG_DESC_LAZY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DOB_DESC + CommandTestUtil.VALID_SPECIES_COCO"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + VALID_GENDER_COCO.toString(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_GARFIELD + TAG_DESC_LAZY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + CommandTestUtil.DOB_DESC_COCO + CommandTestUtil.SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + NAME_DESC_COCO + TAG_DESC_FAT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD.toString()).withDateOfBirth(CommandTestUtil.VALID_DOB_COCO)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(CommandTestUtil.VALID_SPECIES_COCO)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_LAZY, VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_GARFIELD + CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD.toString())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(CommandTestUtil.VALID_DOB_COCO).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_COCO;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_COCO.toString()).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withDateOfBirth(CommandTestUtil.VALID_DOB_COCO).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withSpecies(CommandTestUtil.VALID_SPECIES_COCO).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FAT;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.GENDER_DESC_COCO"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + CommandTestUtil.SPECIES_DESC_COCO + CommandTestUtil.DOB_DESC_COCO + TAG_DESC_FAT"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + CommandTestUtil.GENDER_DESC_COCO + CommandTestUtil.SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + CommandTestUtil.DOB_DESC_COCO + TAG_DESC_FAT + GENDER_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DOB_DESC_GARFIELD + TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD.toString())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(VALID_DOB_GARFIELD).withSpecies(VALID_SPECIES_GARFIELD)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_FAT, VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_GENDER_DESC + GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD.toString())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_GARFIELD + INVALID_GENDER_DESC + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD.toString())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 1,
      "shenghaoc": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/FindPetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindPetCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private FindPetParser parser \u003d new FindPetParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                FindPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_validArgs_returnsFindPetCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand expectedFindPetCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new FindPetCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPetCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPetCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 12,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.parser.general.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"mali\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_DATEOFBIRTH \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \"!fruitcake\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_GENDER \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_DATEOFBIRTH \u003d \"2/12/2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_SPECIES \u003d \"Raccoon\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbor\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()-\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(INDEX_FIRST_PET, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(INDEX_FIRST_PET, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Gender expectedGender \u003d Gender.valueOf(VALID_GENDER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Gender expectedGender \u003d Gender.valueOf(VALID_GENDER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(INVALID_DATEOFBIRTH));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATEOFBIRTH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(VALID_DATEOFBIRTH));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_DATEOFBIRTH + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATEOFBIRTH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(addressWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSpecies((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSpecies(INVALID_SPECIES));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_validValueWithoutWhitespace_returnsSpecies() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedSpecies, ParserUtil.parseSpecies(VALID_SPECIES));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_validValueWithWhitespace_returnsTrimmedSpecies() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String speciesWithWhitespace \u003d WHITESPACE + VALID_SPECIES + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedSpecies, ParserUtil.parseSpecies(speciesWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 54,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/pet/PetTrackerParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.parser.general.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class PetTrackerParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final PetTrackerParser parser \u003d new PetTrackerParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand command \u003d (AddPetCommand) parser.parseCommand(PetUtil.getAddPetCommand(pet));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new AddPetCommand(pet), command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand command \u003d (DeletePetCommand) parser.parseCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DeletePetCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PET.getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new DeletePetCommand(INDEX_FIRST_PET), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand.EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(pet).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand command \u003d (EditPetCommand) parser.parseCommand(EditPetCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + INDEX_FIRST_PET.getOneBased() + \" \" + PetUtil.getEditPetDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new EditPetCommand(INDEX_FIRST_PET, descriptor), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d (FindPetCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                FindPetCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new FindPetCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/DateOfBirthTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class DateOfBirthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidDateOfBirth() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Non-dates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\" \")); // just empty space"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"not a date\")); // a sentence"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Badly formatted dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-Mar-2020\")); // d MMM yyyy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020-03-10\")); // yyyy mm dd"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"10-3-20\")); // d-M-yy"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7_3_2020\")); // bad seperator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-3-2020\")); // bad seperator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020\")); // year only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-3\")); // date and month only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Good dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7/3/2020\")); // d/M/yyyy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07/03/2020\")); // dd/MM/yyyy"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7/03/2020\")); // d/MM/yyyy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07/3/2020\")); // dd/M/yyyy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 38,
      "limdylan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Food(null, 0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String validName \u003d \"kibbles\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int invalidAmount \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int validAmout \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidName, validAmout));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(validName, invalidAmount));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Food.isValidFoodName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"one line isn\u0027t\\nenough for this food\")); // multiple lines"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"hot coca* for dogs\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"very delicious cat food\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"195\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"best food 4 cats\")); // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"CAT FOOD very good hmm\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"meshed food made for lazy cats staying at home\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"can use more than ₉99 times\")); // subscripts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"the Ⅸth test\")); // roman numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"high Ω3 content\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∀ I forgot what this sign means\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∆nutrition is top tier\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∑s up all the benefits\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⋮⋰⋯⋱\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"ni↗ce↘ fo↗od↘\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⑨ strongest food\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(0)); // reaches zero"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(-1)); // negative"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(Integer.MIN_VALUE)); // negative"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(1)); // positive integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(Integer.MAX_VALUE)); // positive integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName1 \u003d \"first food\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName2 \u003d \"second food\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt1 \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt2 \u003d 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // one equal but the other isn\u0027t"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName1, amt2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // both unequal"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt2)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // equal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(new Food(foodName1, amt1).equals(new Food(foodName1, amt1)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"coca*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"very big dog\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"no 1 dogggg\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Ozzy Pawsborne\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Doc McDoggins Successor of Paws Davis the 3rd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 11,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/PetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet person \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(new Tag(\"unused\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void isSamePet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.isSamePet(COCO));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // different species -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same name, same gender, same date of birth, same species, different foodList -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // TBD after SampleDataUtil is finished!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // different gender and date of birth -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // same name, different gender, different date of birth, different species, different  tags -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same name, same gender, same date of birth, same species, different tags -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet aliceCopy \u003d new PetBuilder(COCO).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.equals(COCO));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(COCO.equals(GARFIELD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withDateOfBirth(VALID_DOB_GARFIELD).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 74,
      "limdylan": 17,
      "shenghaoc": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/SpeciesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class SpeciesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Species(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidSpecies_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidSpecies \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Species(invalidSpecies));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidSpecies() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null Species"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Species.isValidSpecies(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid Species"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"dog*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid Species"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"dog cat\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"genetically engineered cat girls \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"prototype 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"Omega Wolf\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"As if the previous species name is not long enough here is \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"one to bring it to the next level\")); // long Speciess"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/UniquePetListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class UniquePetListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final UniquePetList uniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(uniquePetList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_duplicatePet_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.add(COCO));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullTargetPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(null, COCO));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullEditedPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(COCO, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_targetPetNotInList_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.setPet(COCO, COCO));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetIsSamePet_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, COCO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(COCO);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, GARFIELD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasNonUniqueIdentity_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPet(COCO, GARFIELD));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_petDoesNotExist_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.remove(COCO));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_existingPet_removesPet() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.remove(COCO);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullUniquePetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((UniquePetList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_uniquePetList_replacesOwnListWithProvidedUniquePetList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(expectedUniquePetList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((List\u003cPet\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPet\u003e petList \u003d Collections.singletonList(GARFIELD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(petList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_listWithDuplicatePets_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPet\u003e listWithDuplicatePets \u003d Arrays.asList(COCO, COCO);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPets(listWithDuplicatePets));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            -\u003e uniquePetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 165,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPet.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonAdaptedPetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DOB \u003d \"01 Mar 2010\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \"cat^\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD_NAME \u003d \"ABC\u0026\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD_AMOUNT \u003d \"-1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD \u003d INVALID_FOOD_NAME + \":\" + INVALID_FOOD_AMOUNT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#lazy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_NAME \u003d GARFIELD.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_DOB \u003d GARFIELD.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_GENDER \u003d GARFIELD.getGender().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_SPECIES \u003d GARFIELD.getSpecies().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final List\u003cJsonAdaptedFood\u003e VALID_FOODLIST \u003d GARFIELD.getFoodList().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d GARFIELD.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_validPetDetails_returnsPet() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet(GARFIELD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(GARFIELD, pet.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(INVALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                null, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, INVALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, null, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, INVALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, VALID_GENDER, null, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, INVALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Species.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_DOB, null, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidFoodList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cJsonAdaptedFood\u003e invalidFoodList \u003d new ArrayList\u003c\u003e(VALID_FOODLIST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        invalidFoodList.add(new JsonAdaptedFood(INVALID_FOOD));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, invalidFoodList, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, pet::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, invalidTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, pet::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 128,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPetTrackerStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonPetTrackerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPetTrackerStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPetTracker(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPetTracker\u003e readPetTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new JsonPetTrackerStorage(Paths.get(filePath)).readPetTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFalse(readPetTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"notJsonFormatPetTracker.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_invalidPetTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"invalidPetTracker.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_invalidAndValidPetTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"invalidAndValidPetTracker.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readAndSavePetTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPetTracker.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker original \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonPetTrackerStorage jsonPetTrackerStorage \u003d new JsonPetTrackerStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ReadOnlyPetTracker readBack \u003d jsonPetTrackerStorage.readPetTracker(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        original.addPet(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        original.removePet(AMY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        readBack \u003d jsonPetTrackerStorage.readPetTracker(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        original.addPet(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        readBack \u003d jsonPetTrackerStorage.readPetTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void savePetTracker_nullPetTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePetTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Saves {@code petTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private void savePetTracker(ReadOnlyPetTracker petTracker, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            new JsonPetTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    .savePetTracker(petTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void savePetTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePetTracker(new PetTracker(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 105,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePetTrackerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.testutil.pet.TypicalPets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonSerializablePetTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePetTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TYPICAL_PETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPetTracker.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path INVALID_PET_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPetTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path DUPLICATE_PET_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePetTracker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_typicalPetsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PETS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker petTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker typicalPetTracker \u003d TypicalPets.getTypicalPetTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(petTrackerFromFile, typicalPetTracker);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidPetFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PET_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_duplicatePets_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PET_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePetTracker.MESSAGE_DUPLICATE_PET,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 46,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        userPrefs.setPetTrackerFilePath(Paths.get(\"pettracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/PshStorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PshStorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d new JsonPetTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        storageManager \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void petTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * {@link JsonPetTrackerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPetTrackerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker original \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        storageManager.savePetTracker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ReadOnlyPetTracker retrieved \u003d storageManager.readPetTracker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertNotNull(storageManager.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 14,
      "shenghaoc": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the middle index of the pet in the {@code model}\u0027s pet list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPetList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the last index of the pet in the {@code model}\u0027s pet list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the pet in the {@code model}\u0027s pet list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static Pet getPet(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return model.getFilteredPetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_FIRST_PET \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_SECOND_PET \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_THIRD_PET \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/pet/EditPetDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A utility class to help with building EditPetDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private EditPetDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder(EditPetDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.descriptor \u003d new EditPetDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns an {@code EditPetDescriptor} with fields containing {@code pet}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder(Pet pet) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setName(pet.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setGender(pet.getGender());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setDateOfBirth(pet.getDateOfBirth());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setSpecies(pet.getSpecies());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setFoodList(pet.getFoodList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setTags(pet.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setGender(Gender.valueOf(gender));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Species} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setSpecies(new Species(species));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPetDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/pet/PetBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A utility class to help with building Pet objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Kiruya Momochi\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender DEFAULT_GENDER \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"2/9/1998\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_SPECIES \u003d \"Cat\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String DEFAULT_FOOD_NAME \u003d \"catfood\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Integer DEFAULT_FOOD_AMOUT \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private DateOfBirth dob;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Species species;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cFood\u003e foodSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d new Species(DEFAULT_SPECIES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodSet.add(new Food(DEFAULT_FOOD_NAME, DEFAULT_FOOD_AMOUT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Initializes the PetBuilder with the data of {@code petToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder(Pet petToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d petToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        gender \u003d petToCopy.getGender();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d petToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d petToCopy.getSpecies();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e(petToCopy.getFoodList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(petToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Name} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Pet} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Species} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public PetBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.species \u003d new Species(species);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Gender} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withGender(Gender gender) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withDateOfBirth(String dob) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.dob \u003d new DateOfBirth(dob);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the {@code foodList} into a {@code Set\u003cFood\u003e} and set it to the {@code Pet} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetBuilder withFoodList(String ... foodList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.foodSet \u003d SampleDataUtil.getFoodSet(foodList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Pet build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new Pet(name, gender, dob, species, foodSet, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 83,
      "limdylan": 10,
      "tianqi77": 8,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/pet/PetUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.parser.general.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A utility class for Pet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class PetUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns an add command string for adding the {@code pet}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getAddPetCommand(Pet pet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return AddPetCommand.COMMAND_WORD + \" \" + getPetDetails(pet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the part of command string for the given {@code pet}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getPetDetails(Pet pet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_NAME + pet.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_GENDER + pet.getGender().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_DOB + pet.getDateOfBirth().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_SPECIES + pet.getSpecies().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pet.getFoodList().stream().forEach(s -\u003e sb.append(PREFIX_FOODLIST + s.foodName + \":\" + s.foodAmount + \" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pet.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the part of command string for the given {@code EditPetDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getEditPetDescriptorDetails(EditPetDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DOB).append(dateOfBirth.toString())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getFoodList().get().forEach(s -\u003e sb.append(PREFIX_FOODLIST + s.foodName + \":\" + s.foodAmount + \" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getSpecies().ifPresent(species -\u003e sb.append(PREFIX_SPECIES).append(species.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 6,
      "shenghaoc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/pet/TypicalPets.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package seedu.address.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_DOB_COCO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_FOOD_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_FOOD_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static seedu.address.logic.commands.pet.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import seedu.address.model.PetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class containing a list of {@code Pet} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TypicalPets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet AMY \u003d new PetBuilder().withName(\"Amy\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            .withSpecies(\"Dog\").withDateOfBirth(\"1/6/2015\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withGender(Gender.FEMALE).withFoodList(\"Brand A:10\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"darkFur\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet BOB \u003d new PetBuilder().withName(\"Bob\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withSpecies(\"Cat\").withFoodList(\"Brand B:10\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            .withDateOfBirth(\"19/6/1978\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"fat\", \"lazy\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet CARL \u003d new PetBuilder().withName(\"Carl\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"1/3/2015\").withSpecies(\"Husky\").withFoodList(\"Brand C:10\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet DANIEL \u003d new PetBuilder().withName(\"Daniel\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"2/3/2015\").withSpecies(\"Dolphin\").withTags(\"pink\").withFoodList(\"Brand D:10\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet ELLE \u003d new PetBuilder().withName(\"Elle\").withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"3/3/2015\").withFoodList(\"Brand E:10\").withSpecies(\"Parrot\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet FIONA \u003d new PetBuilder().withName(\"Fiona\").withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"4/3/2015\").withFoodList(\"Brand F:10\").withSpecies(\"Goldfish\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet GEORGE \u003d new PetBuilder().withName(\"George\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"5/3/2015\").withSpecies(\"Slug\").withFoodList(\"Brand G:10\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet HOON \u003d new PetBuilder().withName(\"Hoon\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"6/3/2015\").withSpecies(\"passerine\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet IDA \u003d new PetBuilder().withName(\"Ida\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"7/3/2015\").withSpecies(\"bull\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added - Pet\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet COCO \u003d new PetBuilder().withName(VALID_NAME_COCO).withGender(VALID_GENDER_COCO)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(VALID_DOB_COCO).withSpecies(VALID_SPECIES_COCO).withFoodList(VALID_FOOD_COCO)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet GARFIELD \u003d new PetBuilder().withName(VALID_NAME_GARFIELD).withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(VALID_DOB_GARFIELD).withSpecies(VALID_SPECIES_GARFIELD).withFoodList(VALID_FOOD_GARFIELD)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(VALID_TAG_FAT, VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private TypicalPets() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns a {@code PetTracker} with all the typical pets."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static PetTracker getTypicalPetTracker() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker ab \u003d new PetTracker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Pet pet : getTypicalPets()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            ab.addPet(pet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static List\u003cPet\u003e getTypicalPets() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AMY, BOB, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 31,
      "limdylan": 2,
      "tianqi77": 3,
      "shenghaoc": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        String testFilePathInView \u003d \"/petview/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "-": 113
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/invalidFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 6
    }
  }
]
