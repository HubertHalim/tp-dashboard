[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-name\u0027: \u0027Pet Store Helper\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W15-4/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/PshMessages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PshMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_PET_DISPLAYED_INDEX \u003d \"The pet index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_PETS_LISTED_OVERVIEW \u003d \"%1$d pets listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PshLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * API of the Logic component for Pet Store Helper"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface PshLogic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PshLogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petparser.PetTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * The main LogicManager of Pet Store Helper."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PshLogicManager implements PshLogic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final PshModel model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final PetTrackerParser petTrackerParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshLogicManager(PshModel model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petTrackerParser \u003d new PetTrackerParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Command command \u003d petTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            //model.getPetTracker is ReadOnlyPetTracker,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            //here is casted to ReadOnlyAddressBook to pass checkstyle test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            storage.saveAddressBook((ReadOnlyAddressBook) model.getPetTracker());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getPetTracker();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getFilteredPetList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalCommands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public abstract CommandResult execute(PshModel model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalCommands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalCommands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Pet Store Helper as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalCommands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalCommands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalcommands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Gender.valueOf(trimmedGender);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Species parseSpecies(String species) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedSpecies \u003d species.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Species.isValidSpecies(trimmedSpecies)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Species(trimmedSpecies);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String Food} into an {@code Food}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Food parseFood(String food) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] foodDetails \u003d food.split(\":\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedFood \u003d foodDetails[0].trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int foodAmount;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            foodAmount \u003d Integer.parseInt(foodDetails[1].trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodName(trimmedFood)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodAmount(foodAmount)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Food(trimmedFood, foodAmount);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cFood\u003e parseFoodList(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(foodList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cFood\u003e foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String food : foodList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            foodSet.add(parseFood(food));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return foodSet;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/generalParser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.generalparser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petCommands/AddPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class AddPetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to the pet store helper. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"SPECIES \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"LIST OF FOOD AND AMOUNT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"Teddy \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"male \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"01-01-2019 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"dog \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand A: 15 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand B: 20 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"small size \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"lazy \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New pet added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This pet already exists in the pet store helper\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Pet toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand(Pet pet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        toAdd \u003d pet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (model.hasPet(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.addPet(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof AddPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPetCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petCommands/DeletePetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class DeletePetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \": Deletes the pet identified by the index number used in the displayed pet list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DELETE_PET_SUCCESS \u003d \"Deleted Pet: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(PshMessages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.deletePet(petToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PET_SUCCESS, petToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof DeletePetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petCommands/EditPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.model.PshModel.PREDICATE_SHOW_ALL_PETS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class EditPetCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpet\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the pets identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"by the index number used in the displayed pets list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_FOODLIST + \"LIST OF FOOD AND AMOUNT] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"female \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"01-02-2013\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EDIT_PET_SUCCESS \u003d \"Edited Pet: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the pet store helper.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final EditPetDescriptor editPetDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param editPetDescriptor details to edit the person with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand(Index index, EditPetDescriptor editPetDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editPetDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.editPetDescriptor \u003d new EditPetDescriptor(editPetDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(PshMessages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet editedPet \u003d createEditedPet(petToEdit, editPetDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!petToEdit.isSamePet(editedPet) \u0026\u0026 model.hasPet(editedPet)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.setPet(petToEdit, editedPet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PET_SUCCESS, editedPet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static Pet createEditedPet(Pet petToEdit, EditPetDescriptor editPetDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert petToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Name updatedName \u003d editPetDescriptor.getName().orElse(petToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Gender updatedGender \u003d editPetDescriptor.getGender().orElse(petToEdit.getGender());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPetDescriptor.getDateOfBirth().orElse(petToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Species updatedSpecies \u003d editPetDescriptor.getSpecies().orElse(petToEdit.getSpecies());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cFood\u003e updatedFoodList \u003d editPetDescriptor.getFoodList().orElse(petToEdit.getFoodList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPetDescriptor.getTags().orElse(petToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Pet(updatedName, updatedGender, updatedDateOfBirth, updatedSpecies, updatedFoodList, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(other instanceof EditPetCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand e \u003d (EditPetCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 editPetDescriptor.equals(e.editPetDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static class EditPetDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Species species;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor(EditPetDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setSpecies(toCopy.species);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setFoodList(toCopy.foodList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setSpecies(Species species) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.species \u003d species;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSpecies\u003e getSpecies() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(species);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setFoodList(Set\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.foodList \u003d (foodList !\u003d null) ? new HashSet\u003c\u003e(foodList) : null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cFood\u003e\u003e getFoodList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (foodList !\u003d null) ? Optional.of(Collections.unmodifiableSet(foodList)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (!(other instanceof EditPetDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            EditPetDescriptor e \u003d (EditPetDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getSpecies().equals(e.getSpecies())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getFoodList().equals(e.getFoodList())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 243
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petCommands/FindPetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class FindPetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpet\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all pets whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                String.format(PshMessages.MESSAGE_PETS_LISTED_OVERVIEW, model.getFilteredPetList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof FindPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petCommands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.model.PshModel.PREDICATE_SHOW_ALL_PETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.PshModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Lists all pets in the pet tracker to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all pets.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(PshModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/AddPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.AddPetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new AddPetCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class AddPetParser implements Parser\u003cAddPetCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPetCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an AddPetCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_SPECIES,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        PREFIX_FOODLIST, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_SPECIES, PREFIX_FOODLIST)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(String.format(PshMessages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    AddPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Species species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cFood\u003e foodList \u003d ParserUtil.parseFoodList(argMultimap.getAllValues(CliSyntax.PREFIX_FOODLIST));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(CliSyntax.PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet pet \u003d new Pet(name, gender, dateOfBirth, species, foodList, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new AddPetCommand(pet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_FOODLIST \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/DeletePetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.DeletePetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new DeletePetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class DeletePetParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePetCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a DeletePetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DeletePetCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    String.format(PshMessages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/EditPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.core.PshMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.logic.petparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.EditPetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new EditPetCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class EditPetParser implements Parser\u003cEditPetCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPetCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an EditPetCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        PREFIX_SPECIES, PREFIX_FOODLIST, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand.EditPetDescriptor editPetDescriptor \u003d new EditPetCommand.EditPetDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIES).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setSpecies(ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseFoodListForEdit(argMultimap.getAllValues(PREFIX_FOODLIST)).ifPresent(editPetDescriptor::setFoodList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPetDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!editPetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(EditPetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new EditPetCommand(index, editPetDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code foodList} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cFood\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cFood\u003e\u003e parseFoodListForEdit(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert foodList !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodList.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Collection\u003cString\u003e foodSet \u003d foodList.size() \u003d\u003d 1 \u0026\u0026 foodList.contains(\"\") ? Collections.emptySet() : foodList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseFoodList(foodSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/FindPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.PshMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.FindPetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new FindPetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class FindPetParser implements Parser\u003cFindPetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    String.format(PshMessages.MESSAGE_INVALID_COMMAND_FORMAT, FindPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new FindPetCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/petParser/PetTrackerParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.logic.petparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.core.PshMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.core.PshMessages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalcommands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.generalparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.AddPetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.DeletePetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.EditPetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.FindPetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.logic.petcommands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTrackerParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case AddPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new AddPetParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case EditPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new EditPetParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case DeletePetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DeletePetParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case FindPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new FindPetParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PetTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.UniquePetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Wraps all pet system data at the pet-tracker level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Duplicates are not allowed (by .isSamePet comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTracker implements ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final UniquePetList pets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets \u003d new UniquePetList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker(ReadOnlyPetTracker toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPets(List\u003cPet\u003e pet) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.pets.setPets(pets);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void resetData(ReadOnlyPetTracker newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPets(newData.getPetList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.contains(pet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void addPet(Pet p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editedPet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.setPet(target, editedPet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void removePet(Pet key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.asUnmodifiableObservableList().size() + \" pets\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPet\u003e getPetList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 pets.equals(((PetTracker) other).pets));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PshModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * The API of the Pet Store Helper Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface PshModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setUserPrefs(PshReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    PshReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setPetTrackerFilePath(Path petTrackerFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setPetTracker(ReadOnlyPetTracker petTracker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    boolean hasPet(Pet pet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void deletePet(Pet target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void addPet(Pet pet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void setPet(Pet target, Pet editedPet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void updateFilteredPetList(Predicate\u003cPet\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PshModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PshModelManager implements PshModel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final PetTracker petTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final PshUserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final FilteredList\u003cPet\u003e filteredPets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshModelManager(ReadOnlyPetTracker petTracker, PshReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireAllNonNull(petTracker, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + petTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.petTracker \u003d new PetTracker(petTracker);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.userPrefs \u003d new PshUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredPets \u003d new FilteredList\u003c\u003e(this.petTracker.getPetList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this(new PetTracker(), new PshUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setUserPrefs(PshReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return userPrefs.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        userPrefs.setPetTrackerFilePath(petTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPetTracker(ReadOnlyPetTracker petTracker) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.petTracker.resetData(petTracker);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return petTracker.hasPet(pet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petTracker.removePet(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petTracker.addPet(pet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petTracker.setPet(target, editedPet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pet List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return filteredPets;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredPets.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(obj instanceof PshModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PshModelManager other \u003d (PshModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return petTracker.equals(other.petTracker)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 filteredPets.equals(other.filteredPets);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PshReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface PshReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tianqi77": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PshUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PshUserPrefs implements PshReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Path petTrackerFilePath \u003d Paths.get(\"data\" , \"pettracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshUserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PshUserPrefs(PshReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void resetData(PshReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPetTrackerFilePath(newUserPrefs.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return petTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.petTrackerFilePath \u003d petTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PshUserPrefs o \u003d (PshUserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 petTrackerFilePath.equals(o.petTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Objects.hash(guiSettings, petTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + petTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPetTracker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cPet\u003e getPetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/DateOfBirth.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s date of birth."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date of Birth must follow the format of d-M-yyyy.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param dateOfBirth A valid date of birth."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.value \u003d LocalDate.parse(dateOfBirth, FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns if a given string is a valid format of date of birth."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidDateOfBirth(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            LocalDate mightBeValid \u003d LocalDate.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (mightBeValid.isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException p) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10,
      "Zhu-Ruicong": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Food object in Pet Shop Helper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFoodName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Food names should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"spaces only, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d \"Food amount must be a number and greater than 0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final Integer foodAmount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param foodName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Food(String foodName, int foodAmount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidFoodName(foodName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidFoodAmount(foodAmount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmount \u003d foodAmount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given food amount is positive."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodAmount(Integer test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same type as this food."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameType(Food other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodName.equals(other.foodName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same amount as this food."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameAmount(Food other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodAmount.equals(other.foodAmount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || ((other instanceof Food) // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameType((Food) other)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameAmount((Food) other)); // state checks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(foodAmount, foodName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return \"[\" + foodName + \"]: \" + foodAmount;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 3,
      "tianqi77": 1,
      "Zhu-Ruicong": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Gender.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s gender in the pet shop helper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: Only two valid constants: FEMALE and MALE."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    FEMALE (\"female\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    MALE (\"male\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender should be either male or female\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Gender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.value \u003d gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return (test.equals(\"male\")) || (test.equals(\"female\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 9,
      "Zhu-Ruicong": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s name in the pet shop helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Tests that a {@code Pet}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPet\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean test(Pet pet) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(pet.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Pet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet in the pet shop helper."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Pet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Species species;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cFood\u003e foodList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Pet(Name name, Gender gender, DateOfBirth dateOfBirth, Species species, Set\u003cFood\u003e foodList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodList.addAll(foodList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species getSpecies() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(foodList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if both pets of the same name and gender have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a weaker notion of equality between two pets."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSamePet(Pet otherPet) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (otherPet \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return otherPet !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getSpecies().equals(getSpecies())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 (otherPet.getDateOfBirth().equals(getDateOfBirth()) || otherPet.getGender().equals(getGender()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if both pets have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a stronger notion of equality between two pets."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof Pet)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Pet otherPet \u003d (Pet) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return otherPet.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getGender().equals(getGender())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getSpecies().equals(getSpecies())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getFoodList().equals(getFoodList())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Date Of Birth: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Species: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getSpecies())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Foods: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getFoodList().forEach(builder::append);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/Species.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s Species in the pet shop helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSpecies(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Species {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \"Species should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the species must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String species;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Species}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param species A valid species name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species(String species) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidSpecies(species), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid species."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidSpecies(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof Species // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 species.equals(((Species) other).species)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/UniquePetList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import seedu.address.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A list of pets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A pet is considered unique by comparing using {@code Pet#isSamePet(Pet)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * pets uses Pet#isSamePet(Pet) for equality so as to ensure that the pet being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * unique in terms of identity in the UniquePetList. However, the removal of a pet uses Pet#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * as to ensure that the pet with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * @see Pet#isSamePet(Pet)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class UniquePetList implements Iterable\u003cPet\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the list contains an equivalent pet as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean contains(Pet toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePet);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds a pet to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void add(Pet toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the pet {@code target} in the list with {@code editedPet}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!target.isSamePet(editedPet) \u0026\u0026 contains(editedPet)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.set(index, editedPet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Removes the equivalent pet from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void remove(Pet toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(UniquePetList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the contents of this list with {@code pets}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code pets} must not contain duplicate pets."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireAllNonNull(pets);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!petsAreUnique(pets)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(pets);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Iterator\u003cPet\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof UniquePetList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePetList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if {@code pets} contains only unique pets."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private boolean petsAreUnique(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (int i \u003d 0; i \u003c pets.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c pets.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                if (pets.get(i).isSamePet(pets.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/exceptions/DuplicatePetException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation will result in duplicate Pets (Pets are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DuplicatePetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DuplicatePetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(\"Operation would result in duplicate pets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pet/exceptions/PetNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package seedu.address.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation is unable to find the specified pet."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class PetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Tag in the pet shop helper"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender VALID_GENDER_COCO \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender VALID_GENDER_GARFIELD \u003d Gender.MALE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DOB_COCO \u003d \"2-2-2015\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DOB_GARFIELD \u003d \"19-6-1978\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_COCO \u003d \"dog\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_GARFIELD \u003d \"cat\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_FAT \u003d \"fat\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_HYPER \u003d \"hyper\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_LAZY \u003d \"lazy\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/DateOfBirthTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class DateOfBirthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidDateOfBirth() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Non-dates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\" \")); // just empty space"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"not a date\")); // a sentence"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Badly formatted dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-Mar-2020\")); // d MMM yyyy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020-03-10\")); // yyyy mm dd"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"10-3-20\")); // d-M-yy"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7_3_2020\")); // bad seperator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7/3/2020\")); // bad seperator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020\")); // year only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-3\")); // date and month only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Good dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7-3-2020\")); // d-M-yyyy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07-03-2020\")); // dd-MM-yyyy"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7-03-2020\")); // d-MM-yyyy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07-3-2020\")); // dd-M-yyyy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Food(null, 0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String validName \u003d \"kibbles\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int invalidAmount \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int validAmout \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidName, validAmout));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(validName, invalidAmount));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Food.isValidFoodName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"one line isn\u0027t\\nenough for this food\")); // multiple lines"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"hot coca* for dogs\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"very delicious cat food\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"195\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"best food 4 cats\")); // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"CAT FOOD very good hmm\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"meshed food made for lazy cats staying at home\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"can use more than ₉99 times\")); // subscripts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"the Ⅸth test\")); // roman numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"high Ω3 content\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∀ I forgot what this sign means\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∆nutrition is top tier\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∑s up all the benefits\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⋮⋰⋯⋱\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"ni↗ce↘ fo↗od↘\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⑨ strongest food\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(0)); // reaches zero"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(-1)); // negative"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(Integer.MIN_VALUE)); // negative"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(1)); // positive integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(Integer.MAX_VALUE)); // positive integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName1 \u003d \"first food\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName2 \u003d \"second food\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt1 \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt2 \u003d 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // one equal but the other isn\u0027t"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName1, amt2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // both unequal"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt2)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // equal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(new Food(foodName1, amt1).equals(new Food(foodName1, amt1)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.testutil.PetBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                Collections.singletonList(\"Kiruya\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(predicate.test(new PetBuilder().withName(\"Kiruya Garfield\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Kiruya\", \"Garfield\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(predicate.test(new PetBuilder().withName(\"Kiruya Garfield\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Garfield\", \"Momochi\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(predicate.test(new PetBuilder().withName(\"Kiruya Momochi\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Kiruya\", \"Garfield\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(predicate.test(new PetBuilder().withName(\"Kiruya Garfield\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(predicate.test(new PetBuilder().withName(\"Kiruya\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Momochi\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(predicate.test(new PetBuilder().withName(\"Kiruya Garfield\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Keywords match date of birth and species, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"2-9-1998\", \"Cat\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(predicate.test(new PetBuilder().withName(\"Kiruya\").withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withDateOfBirth(\"2-9-1998\").withSpecies(\"Cat\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"coca*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"very big dog\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"no 1 dogggg\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Ozzy Pawsborne\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Doc McDoggins Successor of Paws Davis the 3rd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/PetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.TypicalPets.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.TypicalPets.COCO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.testutil.PetBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet person \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void isSamePet() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.isSamePet(COCO));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different gender and date of birth -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different species -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same name, same gender, same date of birth, same species, different foodList -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // TBD after SampleDataUtil is finished!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same name, same gender, same date of birth, same species, different tags -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet aliceCopy \u003d new PetBuilder(COCO).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.equals(aliceCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(COCO.equals(COCO));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withDateOfBirth(VALID_DOB_GARFIELD).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/SpeciesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class SpeciesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Species(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidSpecies_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidSpecies \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Species(invalidSpecies));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidSpecies() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null Species"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Species.isValidSpecies(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid Species"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"dog*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid Species"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"dog cat\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"genetically engineered cat girls \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"prototype 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"Omega Wolf\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"As if the previous species name is not long enough here is \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"one to bring it to the next level\")); // long Speciess"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pet/UniquePetListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.TypicalPets.COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.testutil.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.testutil.PetBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class UniquePetListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final UniquePetList uniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(uniquePetList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_duplicatePet_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.add(COCO));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullTargetPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(null, COCO));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullEditedPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(COCO, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_targetPetNotInList_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.setPet(COCO, COCO));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetIsSamePet_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, COCO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(COCO);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPet(COCO, GARFIELD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasNonUniqueIdentity_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPet(COCO, GARFIELD));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_petDoesNotExist_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.remove(COCO));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_existingPet_removesPet() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.remove(COCO);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullUniquePetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((UniquePetList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_uniquePetList_replacesOwnListWithProvidedUniquePetList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(expectedUniquePetList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((List\u003cPet\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPet\u003e petList \u003d Collections.singletonList(GARFIELD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(petList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_listWithDuplicatePets_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPet\u003e listWithDuplicatePets \u003d Arrays.asList(COCO, COCO);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPets(listWithDuplicatePets));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            -\u003e uniquePetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PetBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Species;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Kiruya Momochi\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Gender DEFAULT_GENDER \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"2-9-1998\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_SPECIES \u003d \"Cat\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private DateOfBirth dob;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Species species;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cFood\u003e foodSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d new Species(DEFAULT_SPECIES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code petToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder(Pet petToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d petToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        gender \u003d petToCopy.getGender();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d petToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d petToCopy.getSpecies();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e(petToCopy.getFoodList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(petToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withSpecies(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.species \u003d new Species(address);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withGender(Gender gender) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withDateOfBirth(String dob) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.dob \u003d new DateOfBirth(dob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Pet build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new Pet(name, gender, dob, species, foodSet, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPets.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_COCO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HYPER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import seedu.address.model.pet.Pet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class containing a list of {@code Pet} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TypicalPets {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet COCO \u003d new PetBuilder().withName(\"Coco\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withSpecies(\"Dog\").withDateOfBirth(\"1-6-2015\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"darkFur\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet GARFIELD \u003d new PetBuilder().withName(\"Garfield Arbuckle\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withSpecies(\"Cat\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"19-6-1978\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"fat\", \"lazy\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet CARL \u003d new PetBuilder().withName(\"Carl Kurz\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"1-3-2015\").withSpecies(\"Husky\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet DANIEL \u003d new PetBuilder().withName(\"Daniel Meier\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"2-3-2015\").withSpecies(\"Dolphin\").withTags(\"pink\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet ELLE \u003d new PetBuilder().withName(\"Elle Meyer\").withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"3-3-2015\").withSpecies(\"Parrot\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet FIONA \u003d new PetBuilder().withName(\"Fiona Kunz\").withGender(Gender.FEMALE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"4-3-2015\").withSpecies(\"Goldfish\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet GEORGE \u003d new PetBuilder().withName(\"George Best\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"5-3-2015\").withSpecies(\"Slug\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet HOON \u003d new PetBuilder().withName(\"Hoon Meier\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"6-3-2015\").withSpecies(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet IDA \u003d new PetBuilder().withName(\"Ida Mueller\").withGender(Gender.MALE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(\"7-3-2015\").withSpecies(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added - Pet\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet AMY \u003d new PetBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_COCO)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(VALID_DOB_COCO).withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_HYPER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Pet BOB \u003d new PetBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withDateOfBirth(VALID_DOB_GARFIELD).withSpecies(VALID_SPECIES_GARFIELD)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(VALID_TAG_FAT, VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private TypicalPets() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * TBD"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /* public static AddressBook getTypicalSpeciesBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Pet pet : getTypicalPets()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            ab.addPet(pet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static List\u003cPet\u003e getTypicalPets() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(COCO, GARFIELD, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 76
    }
  }
]
