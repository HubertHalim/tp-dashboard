[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    compile group: \u0027com.sun.mail\u0027, name: \u0027javax.mail\u0027, version: \u00271.6.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveName \u003d \u0027Sharkie.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveVersion \u003d \u00271.2.1\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10,
      "jumpcutfindo": 1,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.storage.JsonUserDataStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.storage.JsonWalletStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.storage.UserDataStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.storage.WalletStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserDataStorage userDataStorage \u003d new JsonUserDataStorage(userPrefs.getUserDataFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletStorage walletStorage \u003d new JsonWalletStorage(userPrefs.getWalletFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userDataStorage, userPrefsStorage, walletStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ReadOnlyAddressBook initialAddressBookData \u003d getStoredAddressBook(storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ReadOnlyWallet initialWalletData \u003d getStoredWallet(storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new ModelManager(initialAddressBookData, initialWalletData, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private ReadOnlyAddressBook getStoredAddressBook(Storage storage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Optional\u003cReadOnlyAddressBook\u003e addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private ReadOnlyWallet getStoredWallet(Storage storage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Optional\u003cReadOnlyWallet\u003e walletOptional \u003d storage.readWallet();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            if (!walletOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty Wallet\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return walletOptional.orElseGet(SampleDataUtil::getSampleWallet);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Wallet\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new Wallet();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Wallet\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new Wallet();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Checks if the user data is stored."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * If user data is not stored, opens the window to record user data."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void checkUserData() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Optional\u003cReadOnlyUserData\u003e userDataOptional;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userDataOptional \u003d storage.readUserData();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (userDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                logic.setUserData((UserData) userDataOptional.get());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                logger.info(\"User data file not found. Kindly enter your data. Thank you. :)\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                ui.openEnterUserDataWindow();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            logger.warning(\"User data file not in the correct format. Kindly re-enter your data. Thank you. :)\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            ui.openEnterUserDataWindow();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Kindly re-enter your data. Thank you. :)\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            ui.openEnterUserDataWindow();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        checkUserData();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 31,
      "-": 176,
      "joel-lim": 29,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command \\nNeed help? Enter \u0027help\u0027 in the command \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"box or visit \u0027Help \u003e Help\u0027 in the menu bar to find out more!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_INVALID_DEBT_DISPLAYED_INDEX \u003d \"The debt index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_INVALID_LOAN_DISPLAYED_INDEX \u003d \"The loan index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_EMPTY_USER_DATA \u003d \"Missing user data!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Please proceed to \u0027Edit \u003e Edit user\u0027s data\u0027 to include your contact details.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"User data has to be saved before using the following command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_EMAIL_ERROR \u003d \"Error occured while sending email:\\n%1$s\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"\\nPlease make sure that you are connected to the internet.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_TRANSACTIONS_LISTED_OVERVIEW \u003d \"%1$d transactions listed!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d \"The transaction index provided is \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_KEYWORD_NOT_FOUND \u003d \"Keyword should be keyed in after the prefix\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 8,
      "gracegrape": 4,
      "-": 11,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 112,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Ignores case, and a full word match is not required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return equalsSubWordIgnoreCase(preppedWord, preppedSentence);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns true if the {@code descriptionString} contains {@code keywordString}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            * @param keywordString cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            * @param descriptionString cannot be null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            * @return boolean value stating if {@code keywordString} can be found in {@code descriptionString}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static boolean equalsSubWordIgnoreCase(String keywordString, String descriptionString) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String keywordStringLowerCase \u003d keywordString.toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String descriptionStringLowerCase \u003d descriptionString.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        boolean isContains \u003d descriptionStringLowerCase.contains(keywordStringLowerCase);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return isContains;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 17,
      "jumpcutfindo": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Records and stores the user data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param name  The user\u0027s name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param phone The user\u0027s phone number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param email The user\u0027s email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IOException If error occurs when writing the user data into the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void storeUserData(String name, String phone, String email) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of transactions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns an unmodifiable view of the list of all transactions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the Wallet."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    ReadOnlyWallet getWallet();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the user prefs\u0027 wallet file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Path getWalletFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the user data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    ReadOnlyUserData getUserData();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the user data."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void setUserData(UserData userData);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if user data is empty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    boolean isUserDataNull();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 28,
      "gracegrape": 5,
      "jumpcutfindo": 9,
      "-": 49,
      "joel-lim": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.SharkieParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final SharkieParser sharkieParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        sharkieParser \u003d new SharkieParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Command command \u003d sharkieParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            storage.saveWallet(model.getWallet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void storeUserData(String name, String phone, String email) throws IllegalArgumentException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!(Name.isValidName(name) \u0026\u0026 Phone.isValidPhone(phone) \u0026\u0026 Email.isValidEmail(email))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            User user \u003d new User(new Name(name), new Phone(phone), new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            UserData userData \u003d new UserData(user);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            model.setUserData(userData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            storage.saveUserData(userData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return model.getTransactionList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ReadOnlyUserData getUserData() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return model.getUserData();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserData(UserData userData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(userData);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isUserDataNull() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return model.getUserData().isEmpty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ReadOnlyWallet getWallet() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return model.getWallet();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return model.getWalletFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 33,
      "gracegrape": 5,
      "jumpcutfindo": 6,
      "-": 74,
      "joel-lim": 13,
      "CheyanneSim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 17,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/global/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 20,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleAddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleAddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || (other instanceof PeopleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((PeopleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 2,
      "jumpcutfindo": 7,
      "-": 52,
      "joel-lim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || (other instanceof PeopleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PeopleDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 7,
      "-": 47,
      "joel-lim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleEditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleEditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cDebt\u003e debts \u003d personToEdit.getDebts(); // edit command does not allow editing of debt"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cLoan\u003e loans \u003d personToEdit.getLoans();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, debts, loans, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (!(other instanceof PeopleEditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand e \u003d (PeopleEditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 13,
      "jumpcutfindo": 9,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeoplePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Finds and lists all persons in address book that contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleFindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons that contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Parameters: \u003cprefix\u003e \u003ckeywords\u003e...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Examples: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + COMMAND_WORD + \" \" + PREFIX_NAME + \"alice bob charlie\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" \" + PREFIX_PHONE + \"91234 8834 (Finds people \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"with phone number that contains 91234 or 8834)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" \" + PREFIX_EMAIL + \"gmail yahoo (Finds people \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"that use either gmail or yahoo emails)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"debt loan (Finds people \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"who has either debt(s) or loan(s))\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String ONLY_ONE_PARAMETER_ALLOWED \u003d \"Only 1 parameter is allowed.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Example: \\n\" + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" n/Alex Sarah\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" t/Friend\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"This is not allowed: \" + PEOPLE_COMMAND_TYPE + \" \" + COMMAND_WORD + \" n/Alex t/Friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final PeoplePredicate predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleFindCommand(PeoplePredicate predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || (other instanceof PeopleFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 predicate.equals(((PeopleFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 2,
      "jumpcutfindo": 8,
      "-": 27,
      "joel-lim": 1,
      "CheyanneSim": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleLendCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Records the amount of money the user lends to a person."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleLendCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records the amount of money that you lent \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"to a person.\\nParameters: \u003cindex\u003e (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_NAME + \"\u003cdescription\u003e \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + \"\u003camount\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"\u003cdate:dd/mm/yyyy\u003e]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + COMMAND_WORD + \" 4 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_NAME + \"Dinner \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + \"10.00 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_DATE + \"02/02/2020\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_LEND_SUCCESS \u003d \"Increased loan to %1$s by %2$s. %1$s now owes you %3$s.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Loan loan;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleLendCommand(Index targetIndex, Loan loan) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.loan \u003d loan;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person personUserLends \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person addedLoanPerson \u003d createPersonLends(personUserLends, loan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setPerson(personUserLends, addedLoanPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LEND_SUCCESS, personUserLends.getName(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                loan.getAmount(), addedLoanPerson.getLoans().getTotal()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates and returns a {@code Person} after adding the {@code loan} the user lends to the person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static Person createPersonLends(Person personUserLends, Loan loan) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assert personUserLends !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Name name \u003d personUserLends.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Phone phone \u003d personUserLends.getPhone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Email email \u003d personUserLends.getEmail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cDebt\u003e debts \u003d personUserLends.getDebts();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cLoan\u003e updatedLoans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        updatedLoans.setTransactions(personUserLends.getLoans());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        updatedLoans.add(loan);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.addAll(personUserLends.getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.add(new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Person(name, phone, email, debts, updatedLoans, updatedTags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                || (other instanceof PeopleLendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PeopleLendCommand) other).targetIndex))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 loan.equals(((PeopleLendCommand) other).loan); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 94,
      "CheyanneSim": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleOweCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Records the amount of money the user owe to the person identified using its displayed index from the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleOweCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"owe\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records the amount of money that you owe a\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \" person.\\nParameters: \u003cindex\u003e (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PREFIX_NAME + \"\u003cdescription\u003e \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PREFIX_AMOUNT + \"\u003camount\u003e \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"\u003cdate:dd/mm/yyyy\u003e]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + COMMAND_WORD + \" 4 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PREFIX_NAME + \"Supper \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PREFIX_AMOUNT + \"5.00 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + PREFIX_DATE + \"10/10/2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_OWE_SUCCESS \u003d \"Increased debt to %1$s by %2$s. You now owe %1$s %3$s.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final Debt debt;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleOweCommand(Index targetIndex, Debt debt) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.debt \u003d debt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwes \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person addedDebtPerson \u003d createPersonOwed(personUserOwes, debt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        model.setPerson(personUserOwes, addedDebtPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OWE_SUCCESS, personUserOwes.getName(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                debt.getAmount(), addedDebtPerson.getDebts().getTotal()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Creates and returns a {@code Person} after adding {@code debt} the user owes to the person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static Person createPersonOwed(Person personUserOwes, Debt debt) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assert personUserOwes !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Name name \u003d personUserOwes.getName();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Phone phone \u003d personUserOwes.getPhone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Email email \u003d personUserOwes.getEmail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionList\u003cDebt\u003e updatedDebts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedDebts.setTransactions(personUserOwes.getDebts());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedDebts.add(debt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionList\u003cLoan\u003e loans \u003d personUserOwes.getLoans();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.addAll(personUserOwes.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.add(new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Person(name, phone, email, updatedDebts, loans, updatedTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                || (other instanceof PeopleOweCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PeopleOweCommand) other).targetIndex))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 debt.equals(((PeopleOweCommand) other).debt); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleReceivedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Records that the user has received the amount money lent to a person,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * specified by an index in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleReceivedCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"received\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records that the person has paid you back.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Parameters: \u003cperson\u0027s index\u003e (must be a positive integer) [\" + PREFIX_TRANSACTION_INDEX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"\u003cloans\u0027s index\u003e (must be a positive integer)]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + COMMAND_WORD + \" 4 i/1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_RECEIVED_SUCCESS \u003d \"Removed loan to %1$s by %2$s. %1$s now owes you %3$s.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_NO_LOAN \u003d \"%1$s does not owe you money :(\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Index targetPersonIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Index targetLoanIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleReceivedCommand(Index targetIndex, Index targetLoanIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.targetPersonIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.targetLoanIndex \u003d targetLoanIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (targetPersonIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person personUserLends \u003d lastShownList.get(targetPersonIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (personUserLends.getLoans().getTotal().isZero()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_LOAN, personUserLends.getName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person personReducedLoan \u003d createPersonReceived(personUserLends, targetLoanIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount amountReceived \u003d getAmountReceived(personUserLends, targetLoanIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setPerson(personUserLends, personReducedLoan);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RECEIVED_SUCCESS, personUserLends.getName(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                amountReceived, personReducedLoan.getLoans().getTotal()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the {@code Amount} that the user has received from {@code personUserLends}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static Amount getAmountReceived(Person personUserLends, Index targetLoanIndex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount amountReceived;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (targetLoanIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            amountReceived \u003d personUserLends.getLoans().getTotal();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            List\u003cLoan\u003e loans \u003d personUserLends.getLoans().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            assert targetLoanIndex.getZeroBased() \u003c loans.size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            amountReceived \u003d loans.get(targetLoanIndex.getZeroBased()).getAmount();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return amountReceived;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates and returns a {@code Person} after reducing the loans."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static Person createPersonReceived(Person personUserLends, Index targetLoanIndex)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assert personUserLends !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Name name \u003d personUserLends.getName();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Phone phone \u003d personUserLends.getPhone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Email email \u003d personUserLends.getEmail();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cDebt\u003e debts \u003d personUserLends.getDebts();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cLoan\u003e updatedLoans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.addAll(personUserLends.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (targetLoanIndex !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            List\u003cLoan\u003e loans \u003d personUserLends.getLoans().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (targetLoanIndex.getZeroBased() \u003e\u003d loans.size()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Loan loanReceived \u003d loans.get(targetLoanIndex.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            updatedLoans.setTransactions(personUserLends.getLoans());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            updatedLoans.remove(loanReceived);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetLoanIndex \u003d\u003d null || updatedLoans.asUnmodifiableObservableList().isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            updatedTags.remove(new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Person(name, phone, email, debts, updatedLoans, updatedTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                || (other instanceof PeopleReceivedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 targetPersonIndex.equals(((PeopleReceivedCommand) other).targetPersonIndex))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 (targetLoanIndex \u003d\u003d ((PeopleReceivedCommand) other).targetLoanIndex"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                || targetLoanIndex.equals(((PeopleReceivedCommand) other).targetLoanIndex));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 128,
      "CheyanneSim": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleRemindAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMAIL_ERROR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Reminds everyone in the address book, who owe the user money."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindAllCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remindall\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_REMINDALL_SUCCESS \u003d \"Reminded %1$s to return %2$s!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_REMINDALL_SUCCESS_EMAIL \u003d \"Sharkie has \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"sent copies of the reminders to your email!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_HAS_ZERO_LOAN \u003d \"No one owes you money :(\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PeopleRemindCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (model.isUserDataNull()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMPTY_USER_DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        User user \u003d model.getUserData().getUser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        int numberOfPeopleReminded \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logger.info(\"Sending reminders...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                if (!person.getLoans().getTotal().isZero()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    Reminder reminder \u003d new Reminder(user, person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    reminder.sendReminder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    feedbackToUser +\u003d String.format(MESSAGE_REMINDALL_SUCCESS, person.getName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            person.getLoans().getTotal());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    numberOfPeopleReminded++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EMAIL_ERROR, e.getMessage()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        feedbackToUser +\u003d MESSAGE_REMINDALL_SUCCESS_EMAIL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (numberOfPeopleReminded \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(MESSAGE_HAS_ZERO_LOAN);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleRemindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMAIL_ERROR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Reminds a person, who is identified by a specific index in the address book,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * to return his or her debt to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_REMIND_SUCCESS \u003d \"Reminded %1$s to return %2$s!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Sharkie has sent a copy of the reminder to your email!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_HAS_ZERO_LOAN \u003d \"%1$s does not owe you money :(\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reminds a person to return you \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"his or her unpaid debt.\\nParameters: \u003cindex\u003e (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + COMMAND_WORD + \" 4 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PeopleRemindCommand.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleRemindCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person personToBeReminded \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (personToBeReminded.getLoans().getTotal().isZero()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_HAS_ZERO_LOAN,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    personToBeReminded.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (model.isUserDataNull()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMPTY_USER_DATA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        User user \u003d model.getUserData().getUser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Reminder reminder \u003d new Reminder(user, personToBeReminded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logger.info(\"Sending reminder to \" + personToBeReminded.getName() + \"...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            reminder.sendReminder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EMAIL_ERROR, e.getMessage()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMIND_SUCCESS, personToBeReminded.getName(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                personToBeReminded.getLoans().getTotal()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                || (other instanceof PeopleRemindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((PeopleRemindCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/people/PeopleReturnedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Records that a debt that the user owe, identified using its displayed index in the Debts table, has been"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * returned to the person identified using its displayed index from the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleReturnedCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"returned\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records that you have returned a debt that\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \" you owed. Parameters: \u003cperson\u0027s index\u003e (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \" i/[\u003cdebt\u0027s index\u003e (must be a positive integer)]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Example: \" + PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + COMMAND_WORD + \" 4 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_RETURNED_SUCCESS \u003d \"Reduced debt to %1$s by %2$s. You now owe %1$s \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"%3$s.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String MESSAGE_NO_DEBT \u003d \"You don\u0027t owe %1$s any money :)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final Index targetPersonIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private final Index targetDebtIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleReturnedCommand(Index targetPersonIndex, Index targetDebtIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.targetPersonIndex \u003d targetPersonIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.targetDebtIndex \u003d targetDebtIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetPersonIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwes \u003d lastShownList.get(targetPersonIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (personUserOwes.getDebts().getTotal().isZero()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_DEBT, personUserOwes.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personReducedDebt \u003d createPersonReturned(personUserOwes, targetDebtIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount amountReturned \u003d getAmountReturned(personUserOwes, targetDebtIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        model.setPerson(personUserOwes, personReducedDebt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RETURNED_SUCCESS, personUserOwes.getName(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                amountReturned, personReducedDebt.getDebts().getTotal()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Returns the {@code Amount} that the user has returned {@code personUserOwes}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static Amount getAmountReturned(Person personUserOwes, Index targetDebtIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount amountReturned;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetDebtIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            amountReturned \u003d personUserOwes.getDebts().getTotal();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            List\u003cDebt\u003e debts \u003d personUserOwes.getDebts().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            assert targetDebtIndex.getZeroBased() \u003c debts.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            amountReturned \u003d debts.get(targetDebtIndex.getZeroBased()).getAmount();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return amountReturned;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Creates and returns a {@code Person} after returning the debt(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static Person createPersonReturned(Person personUserOwes, Index targetDebtIndex)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assert personUserOwes !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Name name \u003d personUserOwes.getName();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Phone phone \u003d personUserOwes.getPhone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Email email \u003d personUserOwes.getEmail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionList\u003cDebt\u003e updatedDebts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionList\u003cLoan\u003e loans \u003d personUserOwes.getLoans();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        updatedTags.addAll(personUserOwes.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetDebtIndex !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            List\u003cDebt\u003e debts \u003d personUserOwes.getDebts().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            if (targetDebtIndex.getZeroBased() \u003e\u003d debts.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_DEBT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            Debt debtReturned \u003d debts.get(targetDebtIndex.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            updatedDebts.setTransactions(personUserOwes.getDebts());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            updatedDebts.remove(debtReturned);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (targetDebtIndex \u003d\u003d null || updatedDebts.asUnmodifiableObservableList().isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            updatedTags.remove(new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Person(name, phone, email, updatedDebts, loans, updatedTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                || (other instanceof PeopleReturnedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 targetPersonIndex.equals(((PeopleReturnedCommand) other).targetPersonIndex))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 (targetDebtIndex \u003d\u003d ((PeopleReturnedCommand) other).targetDebtIndex"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                || targetDebtIndex.equals(((PeopleReturnedCommand) other).targetDebtIndex)); // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletBudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Records a budget as set by the user for a selected month."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * If no date is indicated, the budget will be set for all months."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletBudgetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a budget for the user. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + PREFIX_AMOUNT + \"\u003camount\u003e \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + \"[\" + PREFIX_MONTH + \"\u003cmonth: 1 - 12\u003e] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"\u003cyear\u003e]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + PREFIX_AMOUNT + \"1000 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + PREFIX_MONTH + \"10 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + PREFIX_YEAR + \"2020\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DEFAULT \u003d \"Default budget has been set at %1$s.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget has been set at %1$s for %2$s %3$s.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public WalletBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (budget.isDefault()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            model.setDefaultBudget(budget);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_DEFAULT, budget.getAmount()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            model.setBudget(budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, budget.getAmount(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    budget.getMonth(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    budget.getYear()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || other instanceof WalletBudgetCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 budget.equals(((WalletBudgetCommand) other).budget);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Deletes a transaction identified using it\u0027s displayed index from the wallet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \": Deletes the expense/income identified by the index number used in the displayed transaction list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof WalletDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((WalletDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Edits the details of an existing income/expense in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletEditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transaction identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"by the index number used in the displayed transaction list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_NAME + \"Duck Rice \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_AMOUNT + \"3.80\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_DATE + \"11/11/2020\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + PREFIX_TAG + \"food\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSACTION_SUCCESS \u003d \"Edited Transaction: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @param index                     of the person in the filtered transaction list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @param editTransactionDescriptor details to edit the transaction with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletEditCommand(Index index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireAllNonNull(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction transactionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction editedTransaction \u003d createEditedTransaction(transactionToEdit, editTransactionDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Creates and returns a {@code Transaction} with the details of {@code transactionToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * edited with {@code editTransactionDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private static Transaction createEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                                       EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assert transactionToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Description updatedDescription \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                editTransactionDescriptor.getDescription().orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Amount updatedAmount \u003d editTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Date updatedDate \u003d editTransactionDescriptor.getDate().orElse(transactionToEdit.getDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Tag updatedTag \u003d editTransactionDescriptor.getTag().orElse(transactionToEdit.getTag());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (transactionToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new Expense(updatedDescription, updatedAmount, updatedDate, updatedTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new Income(updatedDescription, updatedAmount, updatedDate, updatedTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (!(other instanceof WalletEditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletEditCommand e \u003d (WalletEditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 editTransactionDescriptor.equals(e.editTransactionDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Stores the details to edit the Transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public EditTransactionDescriptor() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, date, tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 217,
      "jumpcutfindo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Adds an expense to the wallet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletExpenseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the wallet. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_NAME + \"Chicken Rice \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_AMOUNT + \"3.50 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_DATE + \"10/10/2010 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\\nYour expenditure for %2$s is: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            + \"%3$s/%4$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Creates a WalletExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public WalletExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                toAdd,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                toAdd.getDate().getMonth() + \" \" + toAdd.getDate().getYear(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                model.getTotalExpenditureInMonth(toAdd.getDate()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                model.getBudget(toAdd.getDate().getMonth(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        toAdd.getDate().getYear())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || (other instanceof WalletExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 toAdd.equals(((WalletExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 9,
      "joel-lim": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.WalletPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Finds and lists all transactions in wallet book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all transactions with description containing \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Parameters: prefix/KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" n/rice water chicken\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" $/12 5\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" d/11/11/2011 22/02/2020\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            + COMMAND_WORD + \" t/food shopping\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String WRONG_AMT \u003d \"Amount to find must be a whole integer. Doubles or decimals are not \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"allowed.\\n\" + \"Example: \" + COMMAND_WORD + \" \" + WALLET_COMMAND_TYPE + \" $/5 10\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String ONLY_ONE_PARAMETER_ALLOWED \u003d \"Only 1 parameter is allowed.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"Example: \\n\" + WALLET_COMMAND_TYPE + \" \" + COMMAND_WORD + \" $/5 10\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + WALLET_COMMAND_TYPE + \" \" + COMMAND_WORD + \" n/chicken noodles\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            + \"This is not allowed: \" + WALLET_COMMAND_TYPE + \" \" + COMMAND_WORD + \" n/rice $/4 d/03/03/2020 t/food\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final WalletPredicate predicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletFindCommand(WalletPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                String.format(Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        model.getFilteredTransactionList().size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private void requireNonNull(Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof WalletFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 predicate.equals(((WalletFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 58,
      "CheyanneSim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletIncomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Adds an income to the wallet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletIncomeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"income\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an income to the wallet. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \"Example: \" + WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_NAME + \"CS2103T TA \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_AMOUNT + \"1000 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_DATE + \"10/10/2019 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + PREFIX_TAG + \"Work\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New income added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Income toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Creates a WalletIncomeCommand to add the specified {@code Income}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public WalletIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(income);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        toAdd \u003d income;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        model.addIncome(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || (other instanceof WalletIncomeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 toAdd.equals(((WalletIncomeCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/wallet/WalletListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Lists all transactions in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all transactions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliPrefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Contains Command Line Interface (CLI) prefix definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class CliPrefix {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String PEOPLE_COMMAND_TYPE \u003d \"people\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String WALLET_COMMAND_TYPE \u003d \"wallet\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String GLOBAL_COMMAND_TYPE \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 9,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 1,
      "jumpcutfindo": 2,
      "-": 14,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.model.transaction.Date.DATE_PATTERN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Amount(Double.valueOf(amount.trim()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new Date(LocalDate.parse(trimmedDate, DateTimeFormatter.ofPattern(DATE_PATTERN)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Date.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(Date.MONTH_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return Month.of(Integer.parseInt(trimmedMonth));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Date.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(Date.YEAR_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return Year.of(Integer.parseInt(trimmedYear));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 55,
      "-": 108,
      "CheyanneSim": 34,
      "joel-lim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SharkieParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.GLOBAL_COMMAND_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleFindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleLendCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleOweCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReceivedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindAllCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReturnedCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletBudgetCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletDeleteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletExpenseCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletFindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletIncomeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleAddCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleDeleteCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleEditCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleFindCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleLendCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleOweCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleReceivedCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.people.PeopleRemindCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.people.PeopleReturnedCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletBudgetCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletDeleteCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletEditCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletExpenseCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletFindCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.wallet.WalletIncomeCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class SharkieParser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandType\u003e\\\\S+ )?(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        final String commandType \u003d matcher.group(\"commandType\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (commandType \u003d\u003d GLOBAL_COMMAND_TYPE) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return getGlobalCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        switch (commandType.trim()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PEOPLE_COMMAND_TYPE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return getPeopleCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case WALLET_COMMAND_TYPE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return getWalletCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Command getPeopleCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleClearCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case PeopleListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleListCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        case PeopleOweCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleOweCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        case PeopleReturnedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return new PeopleReturnedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        case PeopleLendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleLendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        case PeopleReceivedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleReceivedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        case PeopleRemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleRemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        case PeopleRemindAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleRemindAllCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Command getWalletCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case WalletBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new WalletBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        case WalletExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new WalletExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        case WalletIncomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new WalletIncomeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        case WalletDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new WalletDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        case WalletListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new WalletListCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        case WalletEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new WalletEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        case WalletFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new WalletFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private Command getGlobalCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 34,
      "gracegrape": 19,
      "jumpcutfindo": 107,
      "CheyanneSim": 15,
      "joel-lim": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleAddCommandParser implements Parser\u003cPeopleAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //add command does not allow adding debts, loans and tags straight away"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cDebt\u003e debts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cLoan\u003e loans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person person \u003d new Person(name, phone, email, debts, loans, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new PeopleAddCommand(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 15,
      "jumpcutfindo": 8,
      "-": 45,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleDeleteCommandParser implements Parser\u003cPeopleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new PeopleDeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleEditCommandParser implements Parser\u003cPeopleEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(PeopleEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new PeopleEditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 1,
      "jumpcutfindo": 14,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_KEYWORD_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleFindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleEmailPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeoplePhonePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeoplePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleTagPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Parses input arguments and creates a new PeopleFindCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleFindCommandParser implements Parser\u003cPeopleFindCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_PREDICATE \u003d \"\u0027Debt\u0027 and \u0027Loan\u0027 (case-insensitive) are the only \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"tags that can be used in people find command.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Set\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeopleFindCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * and returns a PeopleFindCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PeopleFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePredicate predicate \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        int numOfTokensPresent \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (numOfTokensPresent \u003e 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    String.format(PeopleFindCommand.ONLY_ONE_PARAMETER_ALLOWED, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (nameKeywords.length \u003d\u003d 1 \u0026\u0026 nameKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            predicate \u003d new PeopleNamePredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String[] phoneKeywords \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (phoneKeywords.length \u003d\u003d 1 \u0026\u0026 phoneKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            predicate \u003d new PeoplePhonePredicate(Arrays.asList(phoneKeywords));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String[] emailKeywords \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (emailKeywords.length \u003d\u003d 1 \u0026\u0026 emailKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            predicate \u003d new PeopleEmailPredicate(Arrays.asList(emailKeywords));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (tagKeywords.length \u003d\u003d 1 \u0026\u0026 tagKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            //Can only search for debt or loan in tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            validTags.add(new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            validTags.add(new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!validTags.stream().anyMatch(tag -\u003e Arrays.asList(tagKeywords).stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    .anyMatch(tagKeyword -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, tagKeyword)))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        MESSAGE_INVALID_TAG_PREDICATE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            predicate \u003d new PeopleTagPredicate(Arrays.asList(tagKeywords));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new PeopleFindCommand(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 20,
      "gracegrape": 13,
      "jumpcutfindo": 11,
      "-": 15,
      "CheyanneSim": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleLendCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleLendCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Parses input arguments and creates a new PeopleLendCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleLendCommandParser implements Parser\u003cPeopleLendCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeopleLendCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * and returns a PeopleLendCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleLendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                PREFIX_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleLendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleLendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            date \u003d Date.getDefault();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleLendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Loan loan \u003d new Loan(description, amount, date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new PeopleLendCommand(index, loan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 67,
      "CheyanneSim": 3,
      "joel-lim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleOweCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleOweCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Parses input arguments and creates a new PeopleOweCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleOweCommandParser implements Parser\u003cPeopleOweCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeopleOweCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * and returns a PeopleOweCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleOweCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                PREFIX_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleOweCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleOweCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            date \u003d Date.getDefault();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleOweCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debt \u003d new Debt(description, amount, date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new PeopleOweCommand(index, debt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleReceivedCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReceivedCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Parses input arguments and creates a new PeoplePaidCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleReceivedCommandParser implements Parser\u003cPeopleReceivedCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeoplePaidCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * and returns a PeoplePaidCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleReceivedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Index loanIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TRANSACTION_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                loanIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TRANSACTION_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                loanIndex \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleReceivedCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new PeopleReceivedCommand(personIndex, loanIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleRemindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Parses input arguments and creates a new PeopleRemindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindCommandParser implements Parser\u003cPeopleRemindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeopleRemindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * and returns a PeopleRemindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PeopleRemindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return new PeopleRemindCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleRemindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/people/PeopleReturnedCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReturnedCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Parses input arguments and creates a new PeopleReturnedCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleReturnedCommandParser implements Parser\u003cPeopleReturnedCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PeopleReturnedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * and returns a PeopleReturnedCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleReturnedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index debtIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TRANSACTION_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                debtIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TRANSACTION_INDEX).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                debtIndex \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleReturnedCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new PeopleReturnedCommand(personIndex, debtIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletBudgetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Parses user input and creates a new WalletBudgetCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletBudgetCommandParser implements Parser\u003cWalletBudgetCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WalletBudgetCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * and returns a WalletBudgetCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public WalletBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Month month;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Year year;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budget \u003d new Budget(amount, month, year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budget \u003d new Budget(amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new WalletBudgetCommand(budget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletDeleteCommandParser implements Parser\u003cWalletDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return new WalletDeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletEditCommandParser implements Parser\u003cWalletEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        EditTransactionDescriptor editTransactionDescriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            editTransactionDescriptor.setDescription("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            editTransactionDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            editTransactionDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            editTransactionDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (!editTransactionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new ParseException(WalletEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new WalletEditCommand(index, editTransactionDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletExpenseCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Parses input arguments and creates a new WalletExpenseCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletExpenseCommandParser implements Parser\u003cWalletExpenseCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * WalletExpenseCommand and returns a WalletExpenseCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public WalletExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent() || !argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            date \u003d Date.getDefault();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Tag tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            tag \u003d Tag.getDefault();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Expense expense \u003d new Expense(description, amount, date, tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new WalletExpenseCommand(expense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_KEYWORD_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.wallet.WalletFindCommand.ONLY_ONE_PARAMETER_ALLOWED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletFindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.AmountContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.WalletPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletFindCommandParser implements Parser\u003cWalletFindCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletPredicate walletFindPredicate \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        int numOfTokensPresent \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            numOfTokensPresent++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (numOfTokensPresent \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    String.format(ONLY_ONE_PARAMETER_ALLOWED, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (nameKeywords.length \u003d\u003d 1 \u0026\u0026 nameKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            walletFindPredicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            String[] amountKeywords \u003d argMultimap.getValue(PREFIX_AMOUNT).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (amountKeywords.length \u003d\u003d 1 \u0026\u0026 amountKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            for (String str : amountKeywords) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                ParserUtil.parseAmount(str);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                if (str.contains(\".\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletFindCommand.WRONG_AMT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            walletFindPredicate \u003d new AmountContainsKeywordsPredicate(Arrays.asList(amountKeywords));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            String[] dateKeywords \u003d argMultimap.getValue(PREFIX_DATE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (dateKeywords.length \u003d\u003d 1 \u0026\u0026 dateKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            for (String str : dateKeywords) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                ParserUtil.parseDate(str);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            walletFindPredicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(dateKeywords));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            if (tagKeywords.length \u003d\u003d 1 \u0026\u0026 tagKeywords[0].equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            walletFindPredicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new WalletFindCommand(walletFindPredicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 114,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/wallet/WalletIncomeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletIncomeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Parses input arguments and creates a new WalletIncomeCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletIncomeCommandParser implements Parser\u003cWalletIncomeCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * WalletIncomeCommand and returns a WalletIncomeCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public WalletIncomeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent() || !argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            System.out.println(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletIncomeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            date \u003d Date.getDefault();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Tag tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            tag \u003d Tag.getDefault();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Income income \u003d new Income(description, amount, date, tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new WalletIncomeCommand(income);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the user prefs\u0027 user data file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Path getUserDataFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the user prefs\u0027 user data file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void setUserDataFilePath(Path userDataFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the user prefs\u0027 wallet file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Path getWalletFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Sets the user prefs\u0027 wallet file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void setWalletFilePath(Path walletFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    ReadOnlyWallet getWallet();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Replaces user data with new {@code userData}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void setUserData(ReadOnlyUserData userData);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the UserData."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    ReadOnlyUserData getUserData();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if the user has not enter the user data."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    boolean isUserDataNull();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if the given {@code income} exists in the Wallet."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    boolean hasIncome(Income income);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Adds the given {@code income} to the Wallet."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void addIncome(Income income);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Deletes the given income."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * The income must exist in the Wallet."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void deleteIncome(Income target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the given income {@code target} with {@code editedIncome}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code target} must exist in the Wallet."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void setIncome(Income target, Income editedIncome);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if the given {@code expense} exists in the Wallet."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Adds the given {@code expense} to the Wallet."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * The expense must exist in the Wallet."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code target} must exist in the Wallet."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the total expenditure in the month of the specified date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    Amount getTotalExpenditureInMonth(Date date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets a budget as {@code budget}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the default budget as {@code budget}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    void setDefaultBudget(Budget budget);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns whether the budget for a specified month and year has been exceeded."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    boolean hasExceededBudget(Month month, Year year);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the budget specified for the month and year, if any."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    Budget getBudget(Month month, Year year);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Deletes the given transaction."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * The transaction must exist in the Wallet."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteTransaction(Transaction transactionToDelete);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns an unmodifiable view of the filtered Expense list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns an unmodifiable view of the filtered Income list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    ObservableList\u003cIncome\u003e getFilteredIncomeList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Replaces the given transaction {@code target} with {@code editedTransaction}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * {@code target} must exist in the Wallet."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    void setTransaction(Transaction target, Transaction editedTransaction);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns an unmodifiable view of the filtered Transaction list"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns an unmodifiable view of the Transaction list"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 24,
      "gracegrape": 45,
      "jumpcutfindo": 35,
      "-": 84,
      "joel-lim": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final UserData userData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Wallet wallet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    // wallet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private final FilteredList\u003cIncome\u003e filteredIncomes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private FilteredList\u003cTransaction\u003e filteredTransactions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, wallet and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyWallet wallet,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(addressBook, wallet, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \", wallet: \" + wallet + \" and user \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                + \"prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.wallet \u003d new Wallet(wallet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.userData \u003d new UserData();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // wallet"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003cExpense\u003e(this.wallet.getExpenseList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredIncomes \u003d new FilteredList\u003cIncome\u003e(this.wallet.getIncomeList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this(addressBook, new Wallet(), userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this(new AddressBook(), new Wallet(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path getUserDataFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userPrefs.getUserDataFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath(Path userDataFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(userDataFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userPrefs.setUserDataFilePath(userDataFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return userPrefs.getWalletFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setWalletFilePath(Path walletFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(walletFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        userPrefs.setAddressBookFilePath(walletFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserData(ReadOnlyUserData userData) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.userData.resetData(userData);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ReadOnlyUserData getUserData() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userData;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isUserDataNull() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this.userData.isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wallet \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ReadOnlyWallet getWallet() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return wallet;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    //Income"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasIncome(Income income) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return wallet.hasIncome(income);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.addIncome(income);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteIncome(Income target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        wallet.deleteIncome(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome(Income target, Income editedIncome) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(target, editedIncome);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.setIncome(target, editedIncome);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    //Expense"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return wallet.hasExpense(expense);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.addExpense(expense);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        wallet.deleteExpense(target);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    //Transactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void setTransaction(Transaction transactionToEdit, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (transactionToEdit instanceof Expense) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setExpense((Expense) transactionToEdit, (Expense) editedTransaction);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            assert transactionToEdit instanceof Income"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    : \"transactionToEdit should be either an Expense class or Income class\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            setIncome((Income) transactionToEdit, (Income) editedTransaction);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        //update transaction list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Amount getTotalExpenditureInMonth(Date date) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return wallet.getTotalExpenditureInMonth(date);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        wallet.setBudget(budget);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setDefaultBudget(Budget budget) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        wallet.setDefaultBudget(budget);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean hasExceededBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return wallet.hasExceededBudget(month, year);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Budget getBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return wallet.getBudget(month, year);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Deletes {@code transactionToDelete} from the transaction list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteTransaction(Transaction transactionToDelete) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (transactionToDelete instanceof Expense) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            deleteExpense((Expense) transactionToDelete);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            assert transactionToDelete instanceof Income"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    : \"transactionToDelete should be either an Expense class or Income class\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            deleteIncome((Income) transactionToDelete);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        //update transaction list"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions \u003d new FilteredList\u003cTransaction\u003e(this.wallet.getTransactionList());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * internal list of {@code versionedAddressBook}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return addressBook.equals(other.addressBook) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons) \u0026\u0026 wallet.equals(other.wallet);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods Wallet \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return filteredIncomes;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return this.wallet.getTransactionList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        filteredTransactions.setPredicate(predicate);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 32,
      "gracegrape": 80,
      "jumpcutfindo": 38,
      "-": 147,
      "joel-lim": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public interface ReadOnlyUserData {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    User getUser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if the user data is empty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Path getUserDataFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWallet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Unmodifiable view of a Wallet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public interface ReadOnlyWallet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an unmodifiable view of the list of Transactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    ObservableList\u003cTransaction\u003e getTransactionList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an unmodifiable view of the list of Incomes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    ObservableList\u003cIncome\u003e getIncomeList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an unmodifiable view of the list of Expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an unmodifiable view of the list of Budgets."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the unmodifiable budget specified for the month and year, if any."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Budget getBudget(Month month, Year year);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the default budget set by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Budget getDefaultBudget();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Wraps all data of the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class UserData implements ReadOnlyUserData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final User user;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserData(User user) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserData() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.user \u003d new User();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates an UserData using the data in the {@code toBeCopied}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserData(ReadOnlyUserData toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Resets the existing data of this {@code UserData} with {@code newUserData}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void resetData(ReadOnlyUserData newUserData) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(newUserData);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.user.setUser(newUserData.getUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return user.getName() \u003d\u003d null \u0026\u0026 user.getPhone() \u003d\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 user.getEmail() \u003d\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                || (other instanceof UserData // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 user.equals(((UserData) other).user));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return user.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Path userDataFilePath \u003d Paths.get(\"data\", \"userdata.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Path walletFilePath \u003d Paths.get(\"data\", \"wallet.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        setUserDataFilePath(newUserPrefs.getUserDataFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path getUserDataFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userDataFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath(Path userDataFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(userDataFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.userDataFilePath \u003d userDataFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return walletFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setWalletFilePath(Path walletFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(walletFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.walletFilePath \u003d walletFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 11,
      "jumpcutfindo": 2,
      "-": 86,
      "joel-lim": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Wallet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.BudgetList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Wraps all data at the wallet level"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class Wallet implements ReadOnlyWallet {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final TransactionList\u003cIncome\u003e incomes \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final TransactionList\u003cExpense\u003e expenses \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final BudgetList budgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Wallet() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Creates an Wallet using the Transactions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Wallet(ReadOnlyWallet toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List Overwrite Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the contents of the income list with {@code incomes}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncomes(List\u003cIncome\u003e incomes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.incomes.setTransactions(incomes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.expenses.setTransactions(expenses);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Resets the existing data of this {@code Wallet} with {@code newData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void resetData(ReadOnlyWallet newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        setIncomes(newData.getIncomeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        setDefaultBudget(newData.getDefaultBudget());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Income-related Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if an identical income exists in the Wallet"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasIncome(Income income) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(income);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return incomes.contains(income);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Adds an income to the Wallet."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        incomes.add(income);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the given income {@code target} in the list with {@code editedIncome}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code target} must exist in the Wallet"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome(Income target, Income editedIncome) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(editedIncome);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        incomes.setTransaction(target, editedIncome);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Removes {@code key} from this {@code Wallet}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code key} must exist in the wallet."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteIncome(Income key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        incomes.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense-related Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if an identical expense exists in the Wallet"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Adds an expense to the Wallet."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code target} must exist in the Wallet"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expenses.setTransaction(target, editedExpense);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Removes {@code key} from this {@code Wallet}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code key} must exist in the wallet."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteExpense(Expense key) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Amount getTotalExpenditureInMonth(Date date) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TransactionList\u003cExpense\u003e filteredExpenseList \u003d expenses.getTransactionsInMonth(date.getMonth(), date.getYear());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return filteredExpenseList.getTotal();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget-related Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Replaces the budget in the Wallet with {@code budget}. If a budget was previously set, it overrides that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * budget and sets this new value."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (budgets.containsBudgetOf(budget.getMonth(), budget.getYear())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Budget existingBudget \u003d budgets.get(budget.getMonth(), budget.getYear());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            budgets.setBudget(existingBudget, budget);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            budgets.add(budget);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the contents of the budget list with {@code budgets}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Replaces the default budget in the Wallet with {@code budget}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setDefaultBudget(Budget budget) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        budgets.setDefaultBudget(budget);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Checks if the budget has been exceeded in the month and year selected."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean hasExceededBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireAllNonNull(month, year);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TransactionList\u003cExpense\u003e filteredExpenseList \u003d expenses.getTransactionsInMonth(month, year);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget budgetToCompare \u003d budgets.get(month, year);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return budgetToCompare.getAmount().isLessThan(filteredExpenseList.getTotal());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Budget getBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return budgets.get(month, year);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Budget getDefaultBudget() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return budgets.getDefaultBudget();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactions.addAll(getIncomeList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactions.addAll(getExpenseList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        FXCollections.sort(transactions, new Comparator\u003cTransaction\u003e() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            public int compare(Transaction o1, Transaction o2) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                return -o1.getDate().compareTo(o2.getDate());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return FXCollections.unmodifiableObservableList(transactions);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cIncome\u003e getIncomeList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return incomes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || (other instanceof Wallet // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 incomes.equals(((Wallet) other).incomes)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 expenses.equals(((Wallet) other).expenses));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Objects.hash(incomes, expenses);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 2,
      "jumpcutfindo": 57,
      "joel-lim": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeopleEmailPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleEmailPredicate extends PeoplePredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleEmailPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeopleNamePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleNamePredicate extends PeoplePredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleNamePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeoplePhonePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeoplePhonePredicate extends PeoplePredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeoplePhonePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeoplePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Tests that a {@code Person} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public abstract class PeoplePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    protected final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeoplePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                || (other instanceof PeoplePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 keywords.equals(((PeoplePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PeopleTagPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleTagPredicate extends PeoplePredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public PeopleTagPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return person.getTags().stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .anyMatch(tag -\u003e keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final TransactionList\u003cDebt\u003e debts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final TransactionList\u003cLoan\u003e loans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Person(Name name, Phone phone, Email email,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                  TransactionList\u003cDebt\u003e debts, TransactionList\u003cLoan\u003e loans, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.debts.setTransactions(debts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.loans.setTransactions(loans);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public TransactionList\u003cDebt\u003e getDebts() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return debts;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public TransactionList\u003cLoan\u003e getLoans() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return loans;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 otherPerson.getDebts().equals(getDebts())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 otherPerson.getLoans().equals(getLoans())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return Objects.hash(name, phone, email, debts, loans, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" You owe: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getDebts().getTotal())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" You lent: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getLoans().getTotal());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 21,
      "-": 109,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/User.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User(Name name, Phone phone, Email email) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireAllNonNull(name, phone, email);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Represents an empty user data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Replaces the user with {@code newUser}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUser(User newUser) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.name \u003d newUser.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.phone \u003d newUser.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.email \u003d newUser.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if both users have the same data."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        User otherUser \u003d (User) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return otherUser.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 otherUser.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 otherUser.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return Objects.hash(name, phone, email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        builder.append(\"User: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a reminder, which reminds people on their unpaid debts through emails."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private User sender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Person receiver;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private MimeMessage message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final String emailUsername \u003d \"noreply.loansharkie\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final String emailPassword \u003d \"cs2103t-w12-3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs a Reminder object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Reminder(User sender, Person receiver) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireAllNonNull(sender, receiver);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.sender \u003d sender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.receiver \u003d receiver;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sends an email to the receiver."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws MessagingException if error occurs while sending the email."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void sendReminder() throws MessagingException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Properties properties \u003d new Properties();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        properties.put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        properties.put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        properties.put(\"mail.smtp.host\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        properties.put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Session session \u003d Session.getInstance(properties, new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                return new PasswordAuthentication(emailUsername, emailPassword);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        constructMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Transport.send(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs the content of the email."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @return A message to be sent."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws MessagingException if email address of the sender or receiver is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private MimeMessage constructMessage() throws MessagingException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String content \u003d \"\u003ch2\u003e\u003cstrong\u003e[Sharkie] Reminder\u003c/strong\u003e\u003c/h2\u003e\u003cp\u003eHello \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + receiver.getName().toString() + \",\u003c/p\u003e\u003cp\u003eYou have yet settle your debt to \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\u003cspan style\u003d\\\"background-color: #ffff00;\\\"\u003e \" + sender.getName().toString() + \"\u003c/span\u003e.\u003c/p\u003e\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\u003cp\u003eHere is the list of your debts:\u003c/p\u003e\u003col\u003e\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (Loan loan: this.receiver.getLoans()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            content +\u003d \"\u003cli\u003e\" + loan.toString() + \"\u003c/li\u003e\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        content +\u003d \"\u003c/ol\u003e\u003cp style\u003d\\\"padding-left: 30px;\\\"\u003e\u003cspan style\u003d\\\"color: #000000; background-color: #ffff00;\\\"\u003e\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"Total :\u0026nbsp;\" + receiver.getLoans().getTotal().toString() + \"\u003c/span\u003e\u003c/p\u003e\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\u003cp\u003eFor further details, contact \" + sender.getName().toString() + \" via \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + sender.getPhone().toString() + \" or \" + sender.getEmail().toString() + \".\u003c/p\u003e\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\u003cp\u003eThank you.\u003c/p\u003e\u003cp\u003e\u0026nbsp;\u003c/p\u003e\u003cp\u003eRegards,\u003c/p\u003e\u003cp\u003eSharkie.\u003c/p\u003e\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message.setFrom(new InternetAddress(\"noreply.loansharkie@gmail.com\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message.addRecipient(Message.RecipientType.CC, new InternetAddress(sender.getEmail().toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message.addRecipient(Message.RecipientType.TO, new InternetAddress(receiver.getEmail().toString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message.setSubject(\"[Sharkie] Reminder from \" + sender.getName().toString() + \" on unsettled debts!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        message.setContent(content, \"text/html; charset\u003dutf-8\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User getSender() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this.sender;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Person getReceiver() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this.receiver;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if both sender and receiver are the same."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return otherReminder.getSender().equals(getSender())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u0026\u0026 otherReminder.getReceiver().equals(getReceiver());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return Objects.hash(sender, receiver);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        builder.append(\"Sender: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getSender())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" Receiver: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getReceiver());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        this.tagName \u003d tagName.substring(0, 1).toUpperCase() + tagName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a default tag labelled \"Misc\"."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static Tag getDefault() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Tag(\"Misc\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "joel-lim": 9,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Amount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents an Amount of money."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class Amount implements Comparable\u003cAmount\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            \"Amount of money should be non-negative, have up to two decimal places, and not be too large\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            + \" (not exceeding ninety quadrillion dollars)\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+([.]\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final long MAX_VALUE \u003d Long.MAX_VALUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // Amount is stored in cents to prevent floating point errors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final long amountInCents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs an {@code Amount}. Private constructor accepts a long."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Amount(long amountInCents) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assert amountInCents \u003e\u003d 0 : \"Amounts should be non-negative\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amountInCents \u003d amountInCents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs an {@code Amount}. Public constructor accepts a double."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param amountInDollars A valid amount of money."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Amount(double amountInDollars) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this(Math.round(amountInDollars * 100));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if a given amount (in String form) is valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // Check for long overflow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            double doubleTest \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return doubleTest * 100 \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an Amount equivalent to zero."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static Amount zero() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Amount(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an Amount equivalent to the maximum amount."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static Amount max() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Amount(MAX_VALUE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Adds {@code amountToAdd} to the current amount."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * @return the total amount after adding, or maximum amount if overflow occurs."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Amount add(Amount amountToAdd) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            long totalAmount \u003d Math.addExact(amountToAdd.amountInCents, amountInCents);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return new Amount(totalAmount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } catch (ArithmeticException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return Amount.max();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the difference between this amount and a given amount."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Amount difference(Amount o) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        long difference \u003d Math.abs(amountInCents - o.amountInCents);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Amount(difference);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Returns true if the amount is zero."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return this.amountInCents \u003d\u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return \"$\" + inDollars();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public String inDollars() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return String.format(\"%d.%02d\", amountInCents / 100, amountInCents % 100);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 amountInCents \u003d\u003d ((Amount) other).amountInCents); // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Long.valueOf(amountInCents).hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int compareTo(Amount o) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Long.compare(amountInCents, o.amountInCents);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean isLessThan(Amount o) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return amountInCents \u003c o.amountInCents;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 1,
      "joel-lim": 102,
      "CheyanneSim": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/AmountContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Tests that a {@code Transaction} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class AmountContainsKeywordsPredicate extends WalletPredicate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public AmountContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .anyMatch(keyword -\u003e keyword.equals(transaction.getAmount().inDollars().substring(0, keyword.length()))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u0026\u0026 (transaction.getAmount().inDollars().substring(keyword.length(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        keyword.length() + 1)).equals(\".\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof AmountContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 keywords.equals(((AmountContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Represents a Budget for the wallet."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String BUDGET_OK \u003d \"Your current expenditure is: %1$s / %2$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String BUDGET_EXCEEDED \u003d \"You have exceeded your budget by: %1$s / %2$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final boolean isDefault;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Budget(Amount amount, Month month, Year year, boolean isDefault) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(amount, month, year, isDefault);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.isDefault \u003d isDefault;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Creates a default budget that applies to all months."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Budget(Amount amount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this(amount, Date.getDefault().getMonth(), Date.getDefault().getYear(), true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Creates a budget for a specified month and year."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Budget(Amount amount, Month month, Year year) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this(amount, month, year, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean isDefault() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return isDefault;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a default Budget of zero amount."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static Budget getDefault() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Budget(Amount.zero());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Checks if the date of the {@code other Budget} is equal to the date of this Budget object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean dateEquals(Budget other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return month.equals(other.getMonth())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 year.equals(other.getYear());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || other instanceof Budget"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 amount.equals(((Budget) other).getAmount())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 month.equals(((Budget) other).getMonth())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 year.equals(((Budget) other).getYear())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 isDefault \u003d\u003d ((Budget) other).isDefault();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return amount.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 60,
      "joel-lim": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/BudgetList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * A list of Budgets to record individual months\u0027 budgets."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Supports a limited set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class BudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Budget defaultBudget \u003d Budget.getDefault();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Budget getDefaultBudget() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return defaultBudget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setDefaultBudget(Budget budget) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.defaultBudget \u003d budget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns true if the list contains an equivalent budget of the date given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean containsBudgetOf(Month month, Year year) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireAllNonNull(month, year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget tempBudget \u003d new Budget(Amount.zero(), month, year);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return internalList.stream().anyMatch(tempBudget::dateEquals);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Adds a Budget to the list, replacing if there is a Budget that already exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns a budget of the {@code month} and {@code year}. If the individual budget doesn\u0027t exist, the default"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * budget is returned."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Budget get(Month month, Year year) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireAllNonNull(month, year);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (Budget b : internalList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            if (b.getMonth().equals(month) \u0026\u0026 b.getYear().equals(year) \u0026\u0026 !b.getAmount().isZero()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                return b;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return defaultBudget;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Replaces the budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the contents of this list with {@code budgets}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || other instanceof BudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 internalList.equals(((BudgetList) other).internalList)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 defaultBudget.equals(((BudgetList) other).getDefaultBudget());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Objects.hash(internalList, defaultBudget);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 97,
      "joel-lim": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Represents a Date in Sharkie."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Guarantees: immutable; date is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"dd/MM/uuuu\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be in form: \" + DATE_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String MONTH_MESSAGE_CONSTRAINTS \u003d \"Month should be an integer (between 1 to 12)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String YEAR_MESSAGE_CONSTRAINTS \u003d \"Year should be a non-negative integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Constructs a valid Date object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns true if a given String is a valid date format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            LocalDate.parse(test, DateTimeFormatter.ofPattern(DATE_PATTERN).withResolverStyle(ResolverStyle.STRICT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if a given String is a valid month."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            int monthInt \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return monthInt \u003e\u003d 1 \u0026\u0026 monthInt \u003c\u003d 12;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if a given String is a valid year."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            int yearInt \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return yearInt \u003e\u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a default date set to today\u0027s date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static Date getDefault() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Date(LocalDate.now());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Returns the String of the date in \"dd/MM/yyyy\" format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public String getInputFormat() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_PATTERN));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return date.getMonth();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return Year.of(date.getYear());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns whether the Date is in the specified month."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean inMonth(Month month, Year year) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return getMonth().equals(month) \u0026\u0026 getYear().equals(year);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                || (other instanceof Date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u0026\u0026 date.toString().equals(((Date) other).toString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return getLocalDate().compareTo(other.getLocalDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 77,
      "CheyanneSim": 10,
      "joel-lim": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DateContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Tests that a {@code Transaction} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class DateContainsKeywordsPredicate extends WalletPredicate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DateContainsKeywordsPredicate.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public DateContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        logger.info(transaction.getDate().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    Date date \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        date \u003d ParserUtil.parseDate(keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    return date.toString().equals(transaction.getDate().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 keywords.equals(((DateContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Debt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Represents a Debt, money which the user owes another person.."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class Debt extends Transaction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Constructs a Debt object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Debt(Description description, Amount amount, Date date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(description, amount, date, new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        builder.append(\" Debt description: \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .append(getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents a Transaction\u0027s Description in the Wallet."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class Description implements Comparable\u003cDescription\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            \"Descriptions should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @param description A valid description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return test !\u003d null \u0026\u0026 !test.trim().isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \u0026\u0026 this.description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public int compareTo(Description other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return this.description.compareTo(other.description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 6,
      "joel-lim": 39,
      "CheyanneSim": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/DescriptionContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Tests that a {@code Transaction}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class DescriptionContainsKeywordsPredicate extends WalletPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        transaction.getDescription().description, keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Expense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents an outflow of money from the Wallet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class Expense extends Transaction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Expense(Description description, Amount amount, Date date, Tag tag) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(description, amount, date, tag);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if both Expenses have the same data fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount()) \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherExpense.getTag().equals(getTag());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // use \"e\" to differentiate from income"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Objects.hash(\"e\", description, amount, date, tag);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 42,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Income.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents an inflow of money to the Wallet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class Income extends Transaction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Income(Description description, Amount amount, Date date, Tag tag) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(description, amount, date, tag);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if both Incomes have the same data fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!(other instanceof Income)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Income otherIncome \u003d (Income) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return otherIncome.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherIncome.getAmount().equals(getAmount()) \u0026\u0026 otherIncome.getDate().equals(getDate())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherIncome.getTag().equals(getTag());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // use \"i\" to differentiate from expense"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Objects.hash(\"i\", description, amount, date, tag);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 42,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Loan.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a loan, money which the user lends."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Loan extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs a Loans object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Loan(Description description, Amount amount, Date date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(description, amount, date, new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        builder.append(\" Loan description: \")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .append(getDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 26,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TagContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Tests that a {@code Transaction} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class TagContainsKeywordsPredicate extends WalletPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        transaction.getTag().tagName, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/Transaction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents a Transaction in the Wallet."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    protected final Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    protected final Amount amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    protected final Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    protected final Tag tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Transaction(Description description, Amount amount, Date date, Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(description, amount, date, tag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(\" Tag: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if both Transactions have the same data fields."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Transaction otherTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return otherTransaction.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherTransaction.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherTransaction.getDate().equals(getDate())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \u0026\u0026 otherTransaction.getTag().equals(getTag());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return Objects.hash(description, amount, date, tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 84,
      "CheyanneSim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/TransactionList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A list of transactions that does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Generics are used to allow creating list of expenses and list of incomes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TransactionList\u003cT extends Transaction\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Returns the total amount in a the transaction list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Amount getTotal() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return internalList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .map(Transaction::getAmount)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .reduce(Amount.zero(), Amount::add);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns true if the list contains an equivalent transaction as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Adds a Transaction to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the transaction {@code target} in the list with {@code editedTransaction}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransaction(T target, T editedTransaction) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(target, editedTransaction);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        internalList.set(index, editedTransaction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Removes the equivalent transaction from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * The transaction must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new TransactionNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions(TransactionList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Replaces the contents of this list with {@code transactions}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions(List\u003cT\u003e transactions) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireAllNonNull(transactions);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        internalList.setAll(transactions);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Retrieves a list of expenses filtered by the month they were added, using {@code date}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public TransactionList\u003cT\u003e getTransactionsInMonth(Month month, Year year) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TransactionList\u003cT\u003e filteredTransactions \u003d new TransactionList\u003cT\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        for (T transaction : this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            if (transaction.getDate().getMonth().equals(month) \u0026\u0026 transaction.getDate().getYear().equals(year)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                filteredTransactions.add(transaction);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return filteredTransactions;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sorts the {@code internalList} by date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        FXCollections.sort(internalList, new Comparator\u003cTransaction\u003e() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            public int compare(Transaction o1, Transaction o2) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                return -o1.getDate().compareTo(o2.getDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                || (other instanceof TransactionList\u003c?\u003e // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                        \u0026\u0026 internalList.equals(((TransactionList\u003c?\u003e) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 38,
      "joel-lim": 103,
      "CheyanneSim": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/WalletPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Tests that a {@code Transaction} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public abstract class WalletPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    protected final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public WalletPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                || (other instanceof WalletPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 keywords.equals(((WalletPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/BudgetNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Signals that the operation is unable to find the specified Budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Signals that the operation is unable to find the specified transaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TransactionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} and {@code Wallet} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(new Debt(new Description(\"Supper\"), new Amount(5),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2020-02-03\")))),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getLoanList(new Loan(new Description(\"Breakfast\"), new Amount(3),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2018-08-08\")))),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getTagSet(\"Debt\", \"Loan\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(new Debt(new Description(\"Shopping\"), new Amount(102),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2020-01-01\")))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getLoanList(new Loan(new Description(\"Lunch\"), new Amount(12),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                                    new Date(LocalDate.parse(\"2019-09-09\"))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            new Loan(new Description(\"Movie\"), new Amount(10),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                                    new Date(LocalDate.parse(\"2020-02-02\")))),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getTagSet(\"Debt\", \"Loan\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(new Debt(new Description(\"Gift for someone\"), new Amount(10),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2019-12-12\"))),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            new Debt(new Description(\"Movie\"), new Amount(13),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2019-12-10\")))),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getLoanList(new Loan(new Description(\"Shopping\"), new Amount(150),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2018-08-18\")))),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getTagSet(\"Debt\", \"Loan\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getLoanList(new Loan(new Description(\"Supper\"), new Amount(8),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                            new Date(LocalDate.parse(\"2020-02-24\")))),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getTagSet(\"Loan\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(), getLoanList(), getTagSet()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    getDebtList(), getLoanList(), getTagSet())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Expense[]{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Laksa\"), new Amount(8),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-27\")), new Tag(\"Food\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Nikes\"), new Amount(250),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-02\")), new Tag(\"Fashion\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Top up ezlink\"), new Amount(50),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-02-03\")), new Tag(\"Transport\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Grab\"), new Amount(30),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-27\")), new Tag(\"Transport\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Water bill\"), new Amount(170),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-01\")), new Tag(\"Utilities\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Expense(new Description(\"Rental\"), new Amount(50),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-30\")), new Tag(\"Rental\"))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static Income[] getSampleIncomes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Income[]{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Income(new Description(\"Tutoring\"), new Amount(300),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-01-01\")), new Tag(\"Job\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Income(new Description(\"TA\"), new Amount(100),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-02-02\")), new Tag(\"Job\")),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            new Income(new Description(\"Allowance\"), new Amount(200),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                    new Date(LocalDate.parse(\"2020-03-03\")), new Tag(\"Allowance\"))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        };"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static ReadOnlyWallet getSampleWallet() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Wallet sampleWallet \u003d new Wallet();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        for (Income sampleIncome : getSampleIncomes()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            sampleWallet.addIncome(sampleIncome);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            sampleWallet.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return sampleWallet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Returns a list of debts containing the {@code debts} given."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static TransactionList\u003cDebt\u003e getDebtList(Debt... debts) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cDebt\u003e list \u003d Arrays.stream(debts)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionList\u003cDebt\u003e debtList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        debtList.setTransactions(list);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return debtList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns a list of loans containing the {@code loanss} given."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static TransactionList\u003cLoan\u003e getLoanList(Loan... loans) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cLoan\u003e list \u003d Arrays.stream(loans)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        TransactionList\u003cLoan\u003e loanList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        loanList.setTransactions(list);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return loanList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 37,
      "-": 46,
      "CheyanneSim": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Jackson-friendly version of {@link Budget}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String isDefault;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"month\") String month,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"year\") String year,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"isDefault\") String isDefault) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.isDefault \u003d isDefault;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedBudget(Budget budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        amount \u003d budget.getAmount().inDollars();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        month \u003d String.valueOf(budget.getMonth().getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        year \u003d String.valueOf(budget.getYear().getValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        isDefault \u003d String.valueOf(budget.isDefault());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s Budget class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // Early exit if it is a default budget (don\u0027t care about month and year)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final boolean modelIsDefault \u003d Boolean.parseBoolean(isDefault);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (modelIsDefault) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new Budget(modelAmount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Month.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Date.isValidMonth(month)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Date.MONTH_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Month modelMonth \u003d Month.of(Integer.parseInt(month));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Year.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Date.isValidYear(year)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Date.YEAR_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Year modelYear \u003d Year.of(Integer.parseInt(year));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (isDefault \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Boolean.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Budget(modelAmount, modelMonth, modelYear);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDebt.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Jackson-friendly version of {@link Debt}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class JsonAdaptedDebt extends JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Constructs a {@code JsonAdaptedDebt} with the given debt details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public JsonAdaptedDebt(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                             @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(description, amount, date, \"Debt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Converts a given {@code Debt} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public JsonAdaptedDebt(Debt debt) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(debt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Converts this Jackson-friendly adapted debt object into the model\u0027s Debt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public Debt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        TransactionDescriptor descriptor \u003d toDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new Debt(descriptor.description, descriptor.amount, descriptor.date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Jackson-friendly version of {@link Expense}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonAdaptedExpense extends JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(description, amount, date, tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedExpense(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(expense);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s Expense."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionDescriptor descriptor \u003d toDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Expense(descriptor.description, descriptor.amount, descriptor.date, descriptor.tag);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIncome.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Jackson-friendly version of {@link Income}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonAdaptedIncome extends JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code JsonAdaptedIncome} with the given income details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedIncome(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(description, amount, date, tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts a given {@code Income} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedIncome(Income income) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(income);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted income object into the model\u0027s Income."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Income toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionDescriptor descriptor \u003d toDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Income(descriptor.description, descriptor.amount, descriptor.date, descriptor.tag);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLoan.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Jackson-friendly version of {@link Loan}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonAdaptedLoan extends JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs a {@code JsonAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonAdaptedLoan(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                             @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(description, amount, date, \"Loan\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Converts a given {@code Loan} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonAdaptedLoan(Loan loan) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        super(loan);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted loan object into the model\u0027s Loan."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionDescriptor descriptor \u003d toDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Loan(descriptor.description, descriptor.amount, descriptor.date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 32,
      "joel-lim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final List\u003cJsonAdaptedDebt\u003e debts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final List\u003cJsonAdaptedLoan\u003e loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                             @JsonProperty(\"debts\") List\u003cJsonAdaptedDebt\u003e debts,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                             @JsonProperty(\"loans\") List\u003cJsonAdaptedLoan\u003e loans,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (debts !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            this.debts.addAll(debts);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (loans !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            this.loans.addAll(loans);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        debts.addAll(source.getDebts().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .map(JsonAdaptedDebt::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        loans.addAll(source.getLoans().asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .map(JsonAdaptedLoan::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final List\u003cDebt\u003e debtsToPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (JsonAdaptedDebt debt : debts) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            debtsToPerson.add(debt.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final List\u003cLoan\u003e loansToPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (JsonAdaptedLoan loan : loans) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            loansToPerson.add(loan.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final TransactionList\u003cDebt\u003e modelDebts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        modelDebts.setTransactions(debtsToPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final TransactionList\u003cLoan\u003e modelLoans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        modelLoans.setTransactions(loansToPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelDebts, modelLoans, modelTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 36,
      "-": 94,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTransaction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Jackson-friendly version of {@link Transaction}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Subclasses (Expense, Income, etc) should implement toModelType() with their own constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public abstract class JsonAdaptedTransaction {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransaction} with the given transaction details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedTransaction(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                             @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts a given {@code Transaction} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonAdaptedTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        description \u003d transaction.getDescription().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        amount \u003d transaction.getAmount().inDollars();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        date \u003d transaction.getDate().getInputFormat();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        tag \u003d transaction.getTag().tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into the model\u0027s Transaction subclasses."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Subclasses should implement this method with the relevant constructor (Expense, Income, etc)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public abstract Transaction toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this Jackson-friendly adapted transaction object into a TransactionDescriptor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted transaction."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionDescriptor toDescriptor() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Amount modelAmount \u003d new Amount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Date modelDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            modelDate \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new TransactionDescriptor(modelDescription, modelAmount, modelDate, modelTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedUser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Jackson-friendly version of {@link User}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "class JsonAdaptedUser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs a {@code JsonAdaptedUser} with the given details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonAdaptedUser(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                             @JsonProperty(\"email\") String email) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Converts a given {@code User} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonAdaptedUser(ReadOnlyUserData source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        name \u003d source.getUser().getName().fullName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        phone \u003d source.getUser().getPhone().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        email \u003d source.getUser().getEmail().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Converts this Jackson-friendly adapted user object into the model\u0027s {@code User} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new User(modelName, modelPhone, modelEmail);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableUserData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * An Immutable UserData that is serializable to JSON format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@JsonRootName(value \u003d \"userdata\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "class JsonSerializableUserData {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final JsonAdaptedUser user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructs a {@code JsonSerializableUserData} with the given information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonSerializableUserData(@JsonProperty(\"user\") JsonAdaptedUser user) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Converts a given {@code ReadOnlyUserData} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableUserData}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonSerializableUserData(ReadOnlyUserData source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        user \u003d new JsonAdaptedUser(source);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Converts user data into the model\u0027s {@code UserData} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserData toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData userData \u003d new UserData(this.user.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userData;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableWallet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * An Immutable Wallet that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "@JsonRootName(value \u003d \"wallet\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "class JsonSerializableWallet {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final List\u003cJsonAdaptedIncome\u003e incomes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final JsonAdaptedBudget defaultBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Constructs a {@code JsonSerializableWallet} with the given transactions and budgets."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonSerializableWallet(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            @JsonProperty(\"incomes\") List\u003cJsonAdaptedIncome\u003e incomes,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            @JsonProperty(\"defaultBudget\") JsonAdaptedBudget defaultBudget) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.incomes.addAll(incomes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.defaultBudget \u003d defaultBudget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts a given {@code ReadOnlyWallet} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *               {@code JsonSerializableWallet}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonSerializableWallet(ReadOnlyWallet source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        incomes.addAll(source.getIncomeList().stream().map(JsonAdaptedIncome::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget modelDefaultBudget \u003d source.getDefaultBudget();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (modelDefaultBudget !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            defaultBudget \u003d new JsonAdaptedBudget(modelDefaultBudget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            defaultBudget \u003d new JsonAdaptedBudget(Budget.getDefault());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Converts this wallet into the model\u0027s {@code Wallet} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Wallet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.addExpense(expense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (JsonAdaptedIncome jsonAdaptedIncome : incomes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Income income \u003d jsonAdaptedIncome.toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.addIncome(income);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.setBudget(budget);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (defaultBudget !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.setDefaultBudget(defaultBudget.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return wallet;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserDataStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A class to access UserData data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class JsonUserDataStorage implements UserDataStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserDataStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public JsonUserDataStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path getUserDataFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Optional\u003cReadOnlyUserData\u003e readUserData() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return readUserData(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Similar to {@link #readUserData()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Optional\u003cReadOnlyUserData\u003e readUserData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Optional\u003cJsonSerializableUserData\u003e jsonUserData \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                filePath, JsonSerializableUserData.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!jsonUserData.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return Optional.of(jsonUserData.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void saveUserData(ReadOnlyUserData userData) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        saveUserData(userData, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Similar to {@link #saveUserData(ReadOnlyUserData)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void saveUserData(ReadOnlyUserData userData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(userData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserData(userData), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonWalletStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A class to access Wallet data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonWalletStorage implements WalletStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWalletStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public JsonWalletStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Optional\u003cReadOnlyWallet\u003e readWallet() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return readWallet(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Similar to {@link #readWallet()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Optional\u003cReadOnlyWallet\u003e readWallet(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Optional\u003cJsonSerializableWallet\u003e jsonWallet \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                filePath, JsonSerializableWallet.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        if (!jsonWallet.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return Optional.of(jsonWallet.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet(ReadOnlyWallet wallet) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        saveWallet(wallet, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Similar to {@link #saveWallet(ReadOnlyWallet)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet(ReadOnlyWallet wallet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(wallet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWallet(wallet), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, WalletStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Path getUserDataFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Optional\u003cReadOnlyUserData\u003e readUserData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Optional\u003cReadOnlyUserData\u003e readUserData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void saveUserData(ReadOnlyUserData userData) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void saveUserData(ReadOnlyUserData userData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10,
      "-": 31,
      "joel-lim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Manages storage of AddressBook and Wallet data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private UserDataStorage userDataStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private WalletStorage walletStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserDataStorage userDataStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            UserPrefsStorage userPrefsStorage, WalletStorage walletStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.userDataStorage \u003d userDataStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.walletStorage \u003d walletStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserData methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path getUserDataFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userDataStorage.getUserDataFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Optional\u003cReadOnlyUserData\u003e readUserData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return readUserData(userDataStorage.getUserDataFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Optional\u003cReadOnlyUserData\u003e readUserData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userDataStorage.readUserData(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void saveUserData(ReadOnlyUserData userData) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        saveUserData(userData, userDataStorage.getUserDataFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void saveUserData(ReadOnlyUserData userData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userDataStorage.saveUserData(userData, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wallet methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return walletStorage.getWalletFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Optional\u003cReadOnlyWallet\u003e readWallet() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return readWallet(getWalletFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Optional\u003cReadOnlyWallet\u003e readWallet(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return walletStorage.readWallet(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet(ReadOnlyWallet wallet) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        saveWallet(wallet, getWalletFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet(ReadOnlyWallet wallet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        walletStorage.saveWallet(wallet, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 33,
      "-": 73,
      "joel-lim": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TransactionDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A helper class to hold Transaction details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TransactionDescriptor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final Description description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public final Tag tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionDescriptor(Description description, Amount amount, Date date, Tag tag) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserDataStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserData}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public interface UserDataStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns the file path of the user data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Path getUserDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns user data as a {@link ReadOnlyUserData}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Optional\u003cReadOnlyUserData\u003e readUserData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @see #getUserDataFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    Optional\u003cReadOnlyUserData\u003e readUserData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Saves the given {@link ReadOnlyUserData} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param userData cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void saveUserData(ReadOnlyUserData userData) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @see #saveUserData(ReadOnlyUserData)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void saveUserData(ReadOnlyUserData userData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WalletStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Wallet}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public interface WalletStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Path getWalletFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns Wallet data as a {@link ReadOnlyWallet}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Optional\u003cReadOnlyWallet\u003e readWallet() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @see #getWalletFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    Optional\u003cReadOnlyWallet\u003e readWallet(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Saves the given {@link ReadOnlyWallet} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @param wallet cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void saveWallet(ReadOnlyWallet wallet) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * @see #saveWallet(ReadOnlyWallet)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    void saveWallet(ReadOnlyWallet wallet, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private ProgressIndicator executionProgressIndicator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Thread t1 \u003d new Thread(new Runnable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                MainWindow.editResultDisplay(\"Executing command...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                executionProgressIndicator.setVisible(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        t1.start();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Thread t2 \u003d new Thread(new Runnable() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                executionProgressIndicator.setVisible(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        t2.start();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 24,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EnterUserDataWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * The UI component that is responsible for receiving user\u0027 data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class EnterUserDataWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String MISSING_DATA_MESSAGE \u003d \"Your details are missing. \\nTo use Sharkie, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"please enter your details: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"The details you keyed in are invalid. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + \"Kindly re-enter your details: \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EnterUserDataWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String FXML \u003d \"EnterUserDataWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public final UserDataStorageManager userDataStorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    protected Label instructionMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Label errorMessageName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Label errorMessagePhone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Label errorMessageEmail;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TextField userNameTextField;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TextField userPhoneTextField;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TextField userEmailTextField;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Button submitButton;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates a new EnterUserDataWindow."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param root Stage to use as the root of the EnterUserDataWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public EnterUserDataWindow(Stage root, UserDataStorageManager userDataStorageManager) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.userDataStorageManager \u003d userDataStorageManager;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        instructionMessage.setText(MISSING_DATA_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userNameTextField.textProperty()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userNameTextField));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userPhoneTextField.textProperty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userPhoneTextField));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userEmailTextField.textProperty()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userEmailTextField));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates a new EnterUserDataWindow."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public EnterUserDataWindow(UserDataStorageManager userDataStorageManager) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this(new Stage(), userDataStorageManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userNameTextField.textProperty()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userNameTextField));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userPhoneTextField.textProperty()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userPhoneTextField));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userEmailTextField.textProperty()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(userEmailTextField));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Shows the window to enter user data."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               Thread."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logger.fine(\"Showing the window for user data input.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        errorMessageName.setText(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns true if the window is currently being shown."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Hides the window to enter user data."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Handles the Submit button pressed event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void handleUserData() throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userDataStorageManager.storeUserData(userNameTextField.getText(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    userPhoneTextField.getText(), userEmailTextField.getText());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            setStyleToIndicateInputFailure();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the text field style to use the default style."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void setStyleToDefault(TextField textField) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        textField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the text fields style to indicate a failed command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setStyleToIndicateInputFailure() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        instructionMessage.setText(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        errorMessageName.setText(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        errorMessagePhone.setText(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        errorMessageEmail.setText(\"\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ObservableList\u003cString\u003e styleClassName \u003d userNameTextField.getStyleClass();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ObservableList\u003cString\u003e styleClassPhone \u003d userPhoneTextField.getStyleClass();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ObservableList\u003cString\u003e styleClassEmail \u003d userEmailTextField.getStyleClass();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Name.isValidName(userNameTextField.getText())) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            styleClassName.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            errorMessageName.setText(\"Your name should not be empty or start with a whitespace!\\n\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userNameTextField.setText(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userNameTextField.setPromptText(\"Invalid name!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Phone.isValidPhone(userPhoneTextField.getText())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            styleClassPhone.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            errorMessagePhone.setText(\"Your phone number should consist of 3 or more digits!\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userPhoneTextField.setText(\"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userPhoneTextField.setPromptText(\"Invalid phone number!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!Email.isValidEmail(userEmailTextField.getText())) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            styleClassEmail.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            errorMessageEmail.setText(\"Your email should be a valid email!\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userEmailTextField.setText(\"\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            userEmailTextField.setPromptText(\"Invalid address!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Automatically fills in the user details in respective field in enter user data window."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void fillInUserDetails(User user) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userNameTextField.setText(user.getName().toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userPhoneTextField.setText(user.getPhone().toString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userEmailTextField.setText(user.getEmail().toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Represents a function that stores user data."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public interface UserDataStorageManager {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         * @see seedu.address.logic.Logic#storeUserData(String, String, String)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        void storeUserData(String name, String phone, String email) throws IllegalArgumentException, IOException;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-w12-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Button openBrowserButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private WebView webView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final WebEngine webEngine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        webEngine.load(USERGUIDE_URL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *                                       if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *                                       Thread."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called on the primary stage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void openBrowser() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Desktop.getDesktop().browse(new URL(USERGUIDE_URL).toURI());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            MainWindow.editResultDisplay(\"Error occurs while opening Sharkie\u0027s user guide in browser :(\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 19,
      "jumpcutfindo": 4,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private WalletTransactionsPanel walletTransactionsPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private WalletStatisticsPanel walletStatisticsPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private EnterUserDataWindow enterUserDataWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private StackPane walletTransactionsPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private StackPane walletStatisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        enterUserDataWindow \u003d new EnterUserDataWindow(this::storeUserData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletTransactionsPanel \u003d new WalletTransactionsPanel(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletTransactionsPanelPlaceholder.getChildren().add(walletTransactionsPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletStatisticsPanel \u003d new WalletStatisticsPanel(logic.getWallet().getBudget(Date.getDefault().getMonth(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Date.getDefault().getYear()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletStatisticsPanelPlaceholder.getChildren().add(walletStatisticsPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Handles the event when the edit user data button in the menu is clicked."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void handleEditUserData() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        openUserDataWindow();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        enterUserDataWindow.getRoot().setTitle(\"Edit User Data\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        enterUserDataWindow.instructionMessage.setText(\"Edit your details: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!logic.isUserDataNull()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            enterUserDataWindow.fillInUserDetails(logic.getUserData().getUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Opens the window to enter user data or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void openUserDataWindow() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (!enterUserDataWindow.isShowing()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            enterUserDataWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            enterUserDataWindow.focus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Edits the text shown in ResultDisplay."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static void editResultDisplay(String text) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        resultDisplay.setFeedbackToUser(text);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        enterUserDataWindow.hide();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public WalletTransactionsPanel getWalletTransactionsPanel() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return walletTransactionsPanel;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            resultDisplay.resetStyles();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    resultDisplay.setStyleToIndicatePass();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                        handleHelp();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        resultDisplay.setStyleToIndicateNeutral();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                });"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                        handleExit();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        resultDisplay.setStyleToIndicateNeutral();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                });"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    updateWalletPanels();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    resultDisplay.setStyleToIndicateFailure();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Updates the UI panels related to the wallets when a command has executed."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void updateWalletPanels() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletTransactionsPanel.update(logic.getFilteredTransactionList());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletStatisticsPanel.update(logic.getWallet().getBudget(Date.getDefault().getMonth(),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Date.getDefault().getYear()),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                logic.getTransactionList());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @see seedu.address.logic.Logic#storeUserData(String, String, String)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void storeUserData(String name, String phone, String email)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throws IllegalArgumentException, IOException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        logic.storeUserData(name, phone, email);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 64,
      "gracegrape": 5,
      "jumpcutfindo": 35,
      "-": 195,
      "joel-lim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableView\u003cDebt\u003e debts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cDebt, Description\u003e debtDesc;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cDebt, Amount\u003e debtAmt;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cDebt, LocalDate\u003e debtDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableView\u003cLoan\u003e loans;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cLoan, Description\u003e loanDesc;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cLoan, Amount\u003e loanAmt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TableColumn\u003cLoan, LocalDate\u003e loanDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        debts.setPlaceholder("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new PersonTablePanel\u003cDebt\u003e(person.getDebts().asUnmodifiableObservableList()).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        loans.setPlaceholder("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new PersonTablePanel\u003cLoan\u003e(person.getLoans().asUnmodifiableObservableList()).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setProperties();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setProperties() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TableColumn\u003cDebt, String\u003e debtTitle \u003d new TableColumn\u003c\u003e(\"Debts\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        debts.getColumns().add(debtTitle);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TableColumn\u003cLoan, String\u003e loanTitle \u003d new TableColumn\u003c\u003e(\"Loans\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        loans.getColumns().add(loanTitle);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 23,
      "jumpcutfindo": 12,
      "-": 65,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 5,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonTablePanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * Panel containing the table of transactions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PersonTablePanel\u003cT extends Transaction\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String FXML \u003d \"PersonTablePanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonTablePanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private TableView\u003cT\u003e transactionTableView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private TableColumn\u003cT, String\u003e indexTableColumn;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private TableColumn\u003cT, Description\u003e descriptionTableColumn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private TableColumn\u003cT, Amount\u003e amountTableColumn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private TableColumn\u003cT, String\u003e dateTableColumn;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public PersonTablePanel(ObservableList\u003cT\u003e transactionList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        indexTableColumn.setCellValueFactory(data -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            T transaction \u003d data.getValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            int index \u003d transactionTableView.getItems().indexOf(transaction) + 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            return new SimpleStringProperty(Integer.toString(index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        descriptionTableColumn.setCellValueFactory(new PropertyValueFactory\u003cT, Description\u003e(\"description\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        amountTableColumn.setCellValueFactory(new PropertyValueFactory\u003cT, Amount\u003e(\"amount\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        dateTableColumn.setCellValueFactory(data -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            T transaction \u003d data.getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            Date transactionDate \u003d transaction.getDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return new SimpleStringProperty("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    String.format(\"%s %s %s\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                            transactionDate.getLocalDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                            transactionDate.getMonth().toString().substring(0, 3),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                            transactionDate.getYear()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        transactionTableView.setItems(transactionList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setProperties();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setProperties() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        indexTableColumn.setStyle(\"-fx-alignment: CENTER;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        amountTableColumn.setStyle(\"-fx-alignment: CENTER;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        dateTableColumn.setStyle(\"-fx-alignment: CENTER;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 23,
      "CheyanneSim": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String NEUTRAL_STYLE_CLASS \u003d \"neutral\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String PASS_STYLE_CLASS \u003d \"pass\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the text of the ResultDisplay to the feedback produced by executing the command entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the style of the ResultDisplay to the pass style."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setStyleToIndicatePass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (styleClass.contains(PASS_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.add(PASS_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the style of the ResultDisplay to the failure style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setStyleToIndicateFailure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the style of the ResultDisplay to the neutral style."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setStyleToIndicateNeutral() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (styleClass.contains(NEUTRAL_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.add(NEUTRAL_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Resets the styles of the ResultDisplay."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void resetStyles() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.remove(NEUTRAL_STYLE_CLASS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.remove(PASS_STYLE_CLASS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 49,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * A UI component that displays information of a {@code Transaction}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class TransactionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String FXML \u003d \"TransactionCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INCOME_CLASS \u003d \"positive\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String EXPENSE_CLASS \u003d \"negative\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public final Transaction transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Label tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public TransactionCard(Transaction transaction, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        description.setText(transaction.getDescription().description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (transaction instanceof Expense) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            amount.setText(\"-\" + String.format(\"%s\", transaction.getAmount().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            amount.getStyleClass().add(EXPENSE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            amount.setText(\"+\" + String.format(\"%s\", transaction.getAmount().toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            amount.getStyleClass().add(INCOME_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tag.setText(transaction.getTag().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (!(other instanceof TransactionCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        TransactionCard card \u003d (TransactionCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u0026\u0026 transaction.equals(card.transaction);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 60,
      "jumpcutfindo": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransactionGroupCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * A UI component that displays information of a group of {@code Transaction}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class TransactionGroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final int LIST_CELL_HEIGHT \u003d 32;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final int LIST_OFFSET \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String FXML \u003d \"TransactionGroupCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String POSITIVE_CLASS \u003d \"positive\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String NEGATIVE_CLASS \u003d \"negative\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public final FilteredList\u003cTransaction\u003e groupTransactionsList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label transactionGroupLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label groupExpenditureLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private ListView\u003cTransaction\u003e transactionItemsList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private int startIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public TransactionGroupCard(FilteredList\u003cTransaction\u003e groupTransactionsList, int startIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.groupTransactionsList \u003d groupTransactionsList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setProperties();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setGroupLabel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setGroupExpenditure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionItemsList.setItems(groupTransactionsList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionItemsList.setCellFactory(listView -\u003e new TransactionListViewCell());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionItemsList.setPrefHeight(groupTransactionsList.size() * LIST_CELL_HEIGHT + LIST_OFFSET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setProperties() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionItemsList.setMouseTransparent(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionItemsList.setFocusTraversable(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setGroupLabel() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date groupDate \u003d groupTransactionsList.get(0).getDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionGroupLabel.setText(String.format(\"%s %s %s\", groupDate.getLocalDate().getDayOfMonth(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                groupDate.getMonth(), groupDate.getYear()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setGroupExpenditure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        long groupValue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            groupValue \u003d groupTransactionsList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .mapToLong(t -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                if (t instanceof Expense) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    return -t.getAmount().amountInCents;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    return t.getAmount().amountInCents;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            })"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .reduce(0, Math::addExact);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (ArithmeticException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            // Overflow occurs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            groupValue \u003d Amount.MAX_VALUE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (groupValue \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            groupExpenditureLabel.setText(\"-\" + new Amount(-groupValue / 100));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            groupExpenditureLabel.getStyleClass().add(NEGATIVE_CLASS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            groupExpenditureLabel.setText(\"+\" + new Amount(groupValue / 100));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            groupExpenditureLabel.getStyleClass().add(POSITIVE_CLASS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Transaction} using a {@code TransactionCard}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        protected void updateItem(Transaction transaction, boolean empty) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            super.updateItem(transaction, empty);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    if (empty || transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        setGraphic(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        setGraphic(new TransactionCard(transaction, startIndex).getRoot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        startIndex +\u003d 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 6,
      "jumpcutfindo": 94,
      "joel-lim": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Opens the window to enter user data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    void openEnterUserDataWindow();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 5,
      "jumpcutfindo": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/sharkie_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void openEnterUserDataWindow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.mainWindow.openUserDataWindow();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 5,
      "jumpcutfindo": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WalletStatisticsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Ui panel containing the statistics of the Wallet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletStatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String FXML \u003d \"WalletStatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String BUDGET_NOT_SET \u003d \"No budget set!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final String UNDER_BUDGET \u003d \"You are %s under your budget! Good job!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final String OVER_BUDGET \u003d \"You are %s over your budget! Oh no!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String OVER_BUDGET_CLASS \u003d \"budget-over\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String UNDER_BUDGET_CLASS \u003d \"budget-under\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WalletStatisticsPanel.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private PieChart expenditurePieChart;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label currentMonthYearLabel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label budgetRemainingLabel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label budgetOverUnderLabel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private VBox walletStatisticsLayout;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private VBox walletStatisticsPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private ObservableList\u003cTransaction\u003e walletTransactionList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public WalletStatisticsPanel(Budget budget, ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        update(budget, transactionList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        setProperties();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Updates the statistics displayed with the modified {@code wallet} and {@code transactionList}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void update(Budget budget, ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.walletTransactionList \u003d transactionList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (transactionList.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            walletStatisticsLayout.setVisible(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            walletStatisticsPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            resetStyles();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            setCurrentMonthYear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            populatePieChart();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            updateBudgetRemaining();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            walletStatisticsLayout.setVisible(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            walletStatisticsPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Updates the current month / year label to the current date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setCurrentMonthYear() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date currDate \u003d Date.getDefault();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        currentMonthYearLabel.setText(String.format(\"%s %s\", currDate.getMonth(), currDate.getYear()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Populates the pie chart with the data provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void populatePieChart() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date currDate \u003d Date.getDefault();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        HashMap\u003cTag, Amount\u003e tagAmounts \u003d new HashMap\u003cTag, Amount\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        List\u003cTransaction\u003e expensesThisMonth \u003d walletTransactionList"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .filter(t -\u003e t instanceof Expense)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .filter(t -\u003e t.getDate().inMonth(currDate.getMonth(), currDate.getYear()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (Transaction t : expensesThisMonth) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Tag tag \u003d t.getTag();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Amount amount \u003d t.getAmount();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            tagAmounts.put(tag, tagAmounts.getOrDefault(tag, Amount.zero()).add(amount));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (Map.Entry\u003cTag, Amount\u003e entry : tagAmounts.entrySet()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Tag tag \u003d entry.getKey();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Amount amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            PieChart.Data tempData \u003d new PieChart.Data(tag.tagName, amount.amountInCents / 100);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            expenditurePieChart.layout();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            pieChartData.add(tempData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        pieChartData.forEach(data -\u003e data.nameProperty().bind(Bindings.concat(data.getName(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(\" $%.2f\", data.getPieValue()))));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expenditurePieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Updates the budget remaining after deducting the month\u0027s total expenditure."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void updateBudgetRemaining() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date currDate \u003d Date.getDefault();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Month currMonth \u003d currDate.getMonth();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Year currYear \u003d currDate.getYear();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (budget.getAmount().isZero()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budgetRemainingLabel.setText(BUDGET_NOT_SET);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budgetOverUnderLabel.setVisible(false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            Amount totalExpenditure \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                walletTransactionList"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .filter(t -\u003e t instanceof Expense \u0026\u0026 t.getDate().inMonth(currMonth, currYear))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                        .map(Transaction::getAmount)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                        .reduce(Amount.zero(), Amount::add);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            Amount currBudgetAmount \u003d budget.getAmount();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            budgetRemainingLabel.setText(totalExpenditure.toString() + \" / \" + currBudgetAmount.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            if (totalExpenditure.isLessThan(currBudgetAmount)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                budgetOverUnderLabel.setText(String.format(UNDER_BUDGET,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                        currBudgetAmount.difference(totalExpenditure)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                budgetRemainingLabel.getStyleClass().add(UNDER_BUDGET_CLASS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                budgetOverUnderLabel.setText(String.format(OVER_BUDGET,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                        currBudgetAmount.difference(totalExpenditure)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                budgetRemainingLabel.getStyleClass().add(OVER_BUDGET_CLASS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budgetOverUnderLabel.setVisible(true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void resetStyles() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d budgetRemainingLabel.getStyleClass();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.remove(OVER_BUDGET_CLASS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        styleClass.remove(UNDER_BUDGET_CLASS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void setProperties() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletStatisticsPlaceholder.managedProperty().bind(walletStatisticsPlaceholder.visibleProperty());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        walletStatisticsLayout.managedProperty().bind(walletStatisticsLayout.visibleProperty());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 148,
      "joel-lim": 32,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WalletTransactionsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * Panel containing the list of transactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletTransactionsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String FXML \u003d \"WalletTransactionsPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WalletTransactionsPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Label transactionCountLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private ListView\u003cFilteredList\u003cTransaction\u003e\u003e transactionGroupsListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private ObservableList\u003cTransaction\u003e walletTransactionList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private ObservableList\u003cFilteredList\u003cTransaction\u003e\u003e filteredGroupedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public WalletTransactionsPanel(ObservableList\u003cTransaction\u003e transactionList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.walletTransactionList \u003d transactionList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        update(transactionList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Updates the transaction list UI component with the given {@code newTransactionList}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void update(ObservableList\u003cTransaction\u003e newTransactionList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.walletTransactionList \u003d newTransactionList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        populateGroupedList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        updateTransactionCount();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void updateTransactionCount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionCountLabel.setText(String.format(\"%d transactions\", walletTransactionList.size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Filters the items in the transaction list into {@code FilteredList\u003cTransaction\u003e}, and populates the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private void populateGroupedList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (walletTransactionList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            filteredGroupedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            transactionGroupsListView.setItems(filteredGroupedList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        filteredGroupedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        while (i \u003c walletTransactionList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            Date currDate \u003d walletTransactionList.get(i).getDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            FilteredList\u003cTransaction\u003e tempList \u003d walletTransactionList.filtered(t -\u003e t.getDate().equals(currDate));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            filteredGroupedList.add(tempList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            i +\u003d tempList.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionGroupsListView.setItems(filteredGroupedList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        transactionGroupsListView.setCellFactory(listView -\u003e new TransactionGroupCell());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Custom {@code ListCell} that displays a group of {@code Transaction} using {@code TransactionCard}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    class TransactionGroupCell extends ListCell\u003cFilteredList\u003cTransaction\u003e\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        protected void updateItem(FilteredList\u003cTransaction\u003e groupItems, boolean empty) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            super.updateItem(groupItems, empty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            if (empty || groupItems \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                int startIndex \u003d walletTransactionList.indexOf(groupItems.get(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                setGraphic(new TransactionGroupCard(groupItems, startIndex).getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 100
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" stylesheets\u003d\"@css/CommandLine.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003cProgressIndicator fx:id\u003d\"executionProgressIndicator\" maxWidth\u003d\"30\" visible\u003d\"false\"\u003e\u003c/ProgressIndicator\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10,
      "jumpcutfindo": 3,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/EnterUserDataWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003cfx:root title\u003d\"User Data Missing!\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" alwaysOnTop\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003cImage url\u003d\"@/images/edit_icon.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"300\" minWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cLabel fx:id\u003d\"instructionMessage\" text\u003d\"instruction\" textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cLabel text\u003d\"Name: \" minWidth\u003d\"60\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cVBox minWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cLabel fx:id\u003d\"errorMessageName\" text\u003d\"\" textAlignment\u003d\"LEFT\" textFill\u003d\"red\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cTextField fx:id\u003d\"userNameTextField\" onAction\u003d\"#handleUserData\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                       promptText\u003d\"Enter your name here\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cLabel text\u003d\"Phone: \" minWidth\u003d\"60\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cVBox minWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cLabel fx:id\u003d\"errorMessagePhone\" text\u003d\"\" textAlignment\u003d\"LEFT\" textFill\u003d\"red\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cTextField fx:id\u003d\"userPhoneTextField\" onAction\u003d\"#handleUserData\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                       promptText\u003d\"Enter your phone number here\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cLabel text\u003d\"Email: \" minWidth\u003d\"60\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cVBox minWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cLabel fx:id\u003d\"errorMessageEmail\" text\u003d\"\" textAlignment\u003d\"LEFT\" textFill\u003d\"red\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cTextField fx:id\u003d\"userEmailTextField\" onAction\u003d\"#handleUserData\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                       promptText\u003d\"Enter your e-mail here\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserData\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                text\u003d\"Submit\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 126
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cBorderPane prefHeight\u003d\"500\" prefWidth\u003d\"900\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003ccenter\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cWebView fx:id\u003d\"webView\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/center\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cButton fx:id\u003d\"openBrowserButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#openBrowser\" text\u003d\"Open In Browser\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 18,
      "jumpcutfindo": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"800.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Sharkie\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        \u003cImage url\u003d\"@/images/sharkie_icon.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cVBox maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleEditUserData\" text\u003d\"Edit user\u0027s data\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help \" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cTabPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"pane-with-border\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003cTab text\u003d\"Wallet\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003cHBox fx:id\u003d\"transactionList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"340.0\" AnchorPane.bottomAnchor\u003d\"0.8\" AnchorPane.leftAnchor\u003d\"0.8\" AnchorPane.rightAnchor\u003d\"0.8\" AnchorPane.topAnchor\u003d\"0.8\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"walletStatisticsPanelPlaceholder\" maxWidth\u003d\"500.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"walletTransactionsPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cTab text\u003d\"People\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"personList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.8\" AnchorPane.rightAnchor\u003d\"0.8\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cURL value\u003d\"@css/MainWindow.css\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cURL value\u003d\"@css/General.css\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 3,
      "gracegrape": 17,
      "jumpcutfindo": 35,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"225.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"100.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"id.\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"Name\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003cHBox maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cTableView fx:id\u003d\"debts\" prefHeight\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                   \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                       \u003cLabel text\u003d\"You have no debts :)\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                   \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "               \u003c/TableView\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \u003cTableView fx:id\u003d\"loans\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        \u003cLabel text\u003d\"You did not lend this person money :)\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \u003c/TableView\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 18,
      "jumpcutfindo": 40,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cVBox stylesheets\u003d\"@css/PersonListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/PersonTablePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    \u003cTableView fx:id\u003d\"transactionTableView\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            \u003cLabel text\u003d\"Nothing\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"indexTableColumn\" editable\u003d\"false\" maxWidth\u003d\"3000.0\" minWidth\u003d\"-1.0\" prefWidth\u003d\"-1.0\" text\u003d\"No.\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"descriptionTableColumn\" editable\u003d\"false\" maxWidth\u003d\"7000.0\" minWidth\u003d\"-1.0\" prefWidth\u003d\"-1.0\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"amountTableColumn\" editable\u003d\"false\" maxWidth\u003d\"4000.0\" minWidth\u003d\"-1.0\" prefWidth\u003d\"-1.0\" text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"dateTableColumn\" editable\u003d\"false\" maxWidth\u003d\"4000.0\" minWidth\u003d\"25.0\" prefWidth\u003d\"-1.0\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 9,
      "CheyanneSim": 14
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" text\u003d\"Welcome to Sharkie! To get started, read our user guide that can be accessed using \u0026quot;help\u0026quot;!\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cURL value\u003d\"@css/ResultDisplay.css\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cURL value\u003d\"@css/General.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/stylesheets\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 11,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TransactionCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"32.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"id: \"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003cLabel fx:id\u003d\"tag\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" text\u003d\"tag\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cLine endX\u003d\"100.0\" startX\u003d\"-100.0\" stroke\u003d\"#999999\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                        \u003cLabel fx:id\u003d\"amount\" alignment\u003d\"CENTER_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" text\u003d\"amount\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                              \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cInsets left\u003d\"4.0\" right\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 40,
      "jumpcutfindo": 28
    }
  },
  {
    "path": "src/main/resources/view/TransactionGroupCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cVBox maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cLabel fx:id\u003d\"transactionGroupLabel\" text\u003d\"Date\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cInsets bottom\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cListView fx:id\u003d\"transactionItemsList\" cacheShape\u003d\"false\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel text\u003d\"Total: \"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupExpenditureLabel\" text\u003d\"price\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cInsets bottom\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 50
    }
  },
  {
    "path": "src/main/resources/view/WalletStatisticsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" stylesheets\u003d\"@css/WalletStatisticsPanel.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Expenditure\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cVBox fx:id\u003d\"walletStatisticsPlaceholder\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cImageView fitWidth\u003d\"250.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cImage url\u003d\"@../images/no_transactions_sharkie.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"No transactions entered!\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cVBox fx:id\u003d\"walletStatisticsLayout\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" stylesheets\u003d\"@css/WalletStatisticsPanel.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cPieChart fx:id\u003d\"expenditurePieChart\" animated\u003d\"false\" labelsVisible\u003d\"false\" legendSide\u003d\"RIGHT\" maxHeight\u003d\"250.0\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"300.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cInsets bottom\u003d\"-20.0\" right\u003d\"72.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentMonthYearLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Date\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cLabel fx:id\u003d\"budgetRemainingLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"spent / remaining\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cLabel fx:id\u003d\"budgetOverUnderLabel\" alignment\u003d\"CENTER\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 70
    }
  },
  {
    "path": "src/main/resources/view/WalletTransactionsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" stylesheets\u003d\"@css/WalletTransactionPanel.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel text\u003d\"Transactions\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cURL value\u003d\"@css/General.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cURL value\u003d\"@css/WalletTransactionPanel.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cLabel fx:id\u003d\"transactionCountLabel\" alignment\u003d\"CENTER_RIGHT\" cacheShape\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Transactions\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cURL value\u003d\"@css/General.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                  \u003cURL value\u003d\"@css/WalletTransactionPanel.css\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "      \u003cListView fx:id\u003d\"transactionGroupsListView\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "         \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 8,
      "jumpcutfindo": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/sharkie_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Query word matches part of a sentence word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Sentence words matches part of query word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Matches partial word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"Cc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aA\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  cC  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 12,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.storage.JsonUserDataStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.storage.JsonWalletStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonUserDataStorage userDataStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonUserDataStorage(temporaryFolder.resolve(\"userData.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonWalletStorage walletStorage \u003d new JsonWalletStorage(temporaryFolder.resolve(\"wallet.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userDataStorage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                userPrefsStorage, walletStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String deleteCommand \u003d \"people delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String listCommand \u003d PEOPLE_COMMAND_TYPE + \" \" + PeopleListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(listCommand, PeopleListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonUserDataStorage userDataStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonUserDataIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionUserData.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonWalletStorage walletStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonWalletStorage(temporaryFolder.resolve(\"ioExceptionWallet.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userDataStorage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                userPrefsStorage, walletStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PEOPLE_COMMAND_TYPE + \" \" + PeopleAddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void storeUserData_invalidUserInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String invalidUserName \u003d \" \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String invalidUserPhone \u003d \"dff\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String invalidUserEmail \u003d \"21d\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String validUserName \u003d \"john\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String validUserPhone \u003d \"98765432\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String validUserEmail \u003d \"abcdefg@gmail.com\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //invalid name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertIllegalArgumentException(invalidUserName, validUserPhone, validUserEmail, IllegalArgumentException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertIllegalArgumentException(validUserName, invalidUserPhone, validUserEmail, IllegalArgumentException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertIllegalArgumentException(validUserName, validUserPhone, invalidUserEmail, IllegalArgumentException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Checks the argument and confirms that a IllegalArgumentException"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * is thrown and that the result message is correct."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void assertIllegalArgumentException(String name, String phone, String email,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                                                Class\u003c? extends Throwable\u003e expectedException) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(expectedException, () -\u003e logic.storeUserData(name, phone, email));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method of {@code UserData} is called."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static class JsonUserDataIoExceptionThrowingStub extends JsonUserDataStorage {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        private JsonUserDataIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        public void saveUserData(ReadOnlyUserData userData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 48,
      "jumpcutfindo": 13,
      "-": 152,
      "joel-lim": 9,
      "CheyanneSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_DESC_AMY \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_DESC_BOB \u003d \"iPhone\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_AMOUNT_AMY \u003d \"5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_AMOUNT_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"02/02/2020\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_TRANSACTION_INDEX_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_TAG_DEBT \u003d \"Debt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_TAG_FOOD \u003d \"Food\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String VALID_TAG_SHOPPING \u003d \"Shopping\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_DATE \u003d \"20/02/2020\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_AMOUNT \u003d \"1000\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_MONTH \u003d \"09\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_YEAR \u003d \"2020\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String OWE_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + VALID_AMOUNT_AMY + \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String OWE_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_DESC_BOB + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final String RETURNED_DESC_AMY \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            \" \" + PREFIX_TRANSACTION_INDEX + VALID_TRANSACTION_INDEX_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String LEND_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + VALID_AMOUNT_AMY + \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String RECEIVED_DESC_AMY \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \" \" + PREFIX_TRANSACTION_INDEX + VALID_TRANSACTION_INDEX_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String LEND_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_DESC_BOB + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            + PREFIX_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String TAG_DESC_DEBT \u003d \" \" + PREFIX_TAG + VALID_TAG_DEBT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String TAG_DESC_FOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String TAG_DESC_SHOPPING \u003d \" \" + PREFIX_TAG + VALID_TAG_SHOPPING;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_DATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_MONTH_DESC \u003d \" \" + PREFIX_MONTH + VALID_MONTH;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + VALID_YEAR;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String INVALID_TRANSACTION_DESC \u003d \" \" + PREFIX_NAME + \"\"; // description cannot be empty"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"9ab\"; // only numbers allowed in amount"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"20 May 2020\"; // date in wrong format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String INVALID_AMOUNT \u003d \" \" + PREFIX_AMOUNT + \"9ab\"; // only numbers allowed in amount"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String INVALID_DATE \u003d \" \" + PREFIX_DATE + \"20 May 2020\"; // date in wrong format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String INVALID_TRANSACTION_INDEX \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \" \" + PREFIX_TRANSACTION_INDEX + \"-5\"; // negative index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"food*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String INVALID_MONTH_DESC \u003d \" \" + PREFIX_MONTH + \"args\"; // only numbers allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"interstellar\"; // only numbers allowed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final PeopleEditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final PeopleEditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            Command command, Model actualModel, CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                            Model actualModel,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                                            String expectedMessage,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        model.updateFilteredPersonList(new PeopleNamePredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the transaction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public static void showTransactionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction transaction \u003d model.getFilteredTransactionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        final String[] splitDescription \u003d transaction.getDescription().description.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.updateFilteredTransactionList(new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertEquals(1, model.getFilteredTransactionList().size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 33,
      "gracegrape": 16,
      "jumpcutfindo": 23,
      "-": 107,
      "CheyanneSim": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.global.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 18,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/global/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.global.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 18,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleAddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new PeopleAddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                String.format(PeopleAddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(new PeopleAddCommand(personInList), model, PeopleAddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleAddCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PeopleAddCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        CommandResult commandResult \u003d new PeopleAddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(String.format(PeopleAddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleAddCommand peopleAddCommand \u003d new PeopleAddCommand(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(CommandException.class, PeopleAddCommand.MESSAGE_DUPLICATE_PERSON, ("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ) -\u003e peopleAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleAddCommand addAliceCommand \u003d new PeopleAddCommand(alice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleAddCommand addBobCommand \u003d new PeopleAddCommand(bob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleAddCommand addAliceCommandCopy \u003d new PeopleAddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10,
      "gracegrape": 1,
      "jumpcutfindo": 12,
      "-": 91,
      "joel-lim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new PeopleClearCommand(), model, PeopleClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new PeopleClearCommand(), model, PeopleClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleDeleteCommand peopleDeleteCommand \u003d new PeopleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleDeleteCommand peopleDeleteCommand \u003d new PeopleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleDeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleDeleteCommand peopleDeleteCommand \u003d new PeopleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleDeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleDeleteCommand peopleDeleteCommand \u003d new PeopleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleDeleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleDeleteCommand deleteFirstCommand \u003d new PeopleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleDeleteCommand deleteSecondCommand \u003d new PeopleDeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleDeleteCommand deleteFirstCommandCopy \u003d new PeopleDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 10,
      "-": 87,
      "CheyanneSim": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleEditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleEditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleEditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(peopleEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleEditCommand, model, PeopleEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleEditCommand, model, PeopleEditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleEditCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand peopleEditCommand \u003d new PeopleEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(peopleEditCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleEditCommand standardCommand \u003d new PeopleEditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEditCommand commandWithSameValues \u003d new PeopleEditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleEditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleEditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 2,
      "jumpcutfindo": 19,
      "-": 131,
      "CheyanneSim": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleFindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleFindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleNamePredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleNamePredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand findFirstCommand \u003d new PeopleFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand findSecondCommand \u003d new PeopleFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand findFirstCommandCopy \u003d new PeopleFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand command \u003d new PeopleFindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand command \u003d new PeopleFindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Parses {@code userInput} into a {@code PeopleNamePredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private PeopleNamePredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new PeopleNamePredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 7,
      "-": 66,
      "CheyanneSim": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleLendCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.SHOPPING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.TRAVEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleLendCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserLends \u003d lastShownList.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person addedLoanPerson \u003d new PersonBuilder(personUserLends).withLoans(SHOPPING).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleLendCommand peopleLendCommand \u003d new PeopleLendCommand(INDEX_FIRST, SHOPPING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleLendCommand.MESSAGE_LEND_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                addedLoanPerson.getName(), SHOPPING.getAmount(), addedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), addedLoanPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleLendCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserLends \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person addedLoanPerson \u003d new PersonBuilder(personUserLends).withLoans(SHOPPING).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleLendCommand peopleLendCommand \u003d new PeopleLendCommand(INDEX_FIRST, SHOPPING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleLendCommand.MESSAGE_LEND_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                addedLoanPerson.getName(), SHOPPING.getAmount(), addedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), addedLoanPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleLendCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleLendCommand peopleLendCommand \u003d new PeopleLendCommand(outOfBoundIndex, SHOPPING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleLendCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleLendCommand peopleLendCommand \u003d new PeopleLendCommand(outOfBoundIndex, SHOPPING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleLendCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleLendCommand standardCommand \u003d new PeopleLendCommand(INDEX_FIRST, SHOPPING);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleLendCommand commandWithSameValues \u003d new PeopleLendCommand(INDEX_FIRST, SHOPPING);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleLendCommand(INDEX_SECOND, SHOPPING)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleLendCommand(INDEX_FIRST, TRAVEL)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 79,
      "CheyanneSim": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new PeopleListCommand(), model, PeopleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new PeopleListCommand(), model, PeopleListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 4,
      "-": 33,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleOweCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.MILKTEA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleOweCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwe \u003d lastShownList.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person addedDebtPerson \u003d new PersonBuilder(personUserOwe).withDebts(TEXTBOOK).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand peopleOweCommand \u003d new PeopleOweCommand(INDEX_FIRST, TEXTBOOK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleOweCommand.MESSAGE_OWE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                addedDebtPerson.getName(), TEXTBOOK.getAmount(), addedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), addedDebtPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleOweCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwe \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person addedDebtPerson \u003d new PersonBuilder(personUserOwe).withDebts(TEXTBOOK).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand peopleOweCommand \u003d new PeopleOweCommand(INDEX_FIRST, TEXTBOOK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleOweCommand.MESSAGE_OWE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                addedDebtPerson.getName(), TEXTBOOK.getAmount(), addedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), addedDebtPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleOweCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand peopleOweCommand \u003d new PeopleOweCommand(outOfBoundIndex, TEXTBOOK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleOweCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand peopleOweCommand \u003d new PeopleOweCommand(outOfBoundIndex, TEXTBOOK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleOweCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleOweCommand standardCommand \u003d new PeopleOweCommand(INDEX_FIRST, TEXTBOOK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand commandWithSameValues \u003d new PeopleOweCommand(INDEX_FIRST, TEXTBOOK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleOweCommand(INDEX_SECOND, TEXTBOOK)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleOweCommand(INDEX_FIRST, MILKTEA)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleReceivedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleReceivedCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_unfilteredListReceivedAll_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person receivedAllPerson \u003d lastShownList.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount totalLoan \u003d receivedAllPerson.getLoans().getTotal();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person removedLoanPerson \u003d new PersonBuilder(receivedAllPerson).withLoans().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReceivedCommand.MESSAGE_RECEIVED_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                removedLoanPerson.getName(), totalLoan, removedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(1), removedLoanPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleReceivedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_filteredListReceivedAll_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person receivedAllPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount totalLoan \u003d receivedAllPerson.getLoans().getTotal();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person removedLoanPerson \u003d new PersonBuilder(receivedAllPerson).withLoans().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReceivedCommand.MESSAGE_RECEIVED_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                removedLoanPerson.getName(), totalLoan, removedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), removedLoanPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleReceivedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_unfilteredListReceivedByIndex_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserLend \u003d lastShownList.get(INDEX_THIRD.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cLoan\u003e loans \u003d personUserLend.getLoans().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount loanReduced \u003d loans.get(0).getAmount();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Loan[] reducedLoans \u003d new Loan[loans.size() - 1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (int i \u003d 0; i \u003c reducedLoans.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            reducedLoans[i] \u003d loans.get(i + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person reducedLoanPerson \u003d new PersonBuilder(personUserLend).withLoans(reducedLoans).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_THIRD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                INDEX_FIRST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReceivedCommand.MESSAGE_RECEIVED_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                reducedLoanPerson.getName(), loanReduced, reducedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(2), reducedLoanPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleReceivedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_filteredListReceivedByIndex_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_THIRD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserLend \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cLoan\u003e loans \u003d personUserLend.getLoans().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Amount loanReduced \u003d loans.get(0).getAmount();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Loan[] reducedLoans \u003d new Loan[loans.size() - 1];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (int i \u003d 0; i \u003c reducedLoans.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            reducedLoans[i] \u003d loans.get(i + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person reducedLoanPerson \u003d new PersonBuilder(personUserLend).withLoans(reducedLoans).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReceivedCommand.MESSAGE_RECEIVED_SUCCESS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                reducedLoanPerson.getName(), loanReduced, reducedLoanPerson.getLoans().getTotal());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), reducedLoanPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleReceivedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleReceivedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_invalidLoanIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserLend \u003d lastShownList.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Index outOfBoundIndex \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Index.fromOneBased(personUserLend.getLoans().asUnmodifiableObservableList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_SECOND, outOfBoundIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleReceivedCommand, model, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_noLoan_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person receivedAllPerson \u003d lastShownList.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person removedLoanPerson \u003d new PersonBuilder(receivedAllPerson).withLoans().build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReceivedCommand peopleReceivedCommand \u003d new PeopleReceivedCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReceivedCommand.MESSAGE_NO_LOAN, removedLoanPerson.getName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), removedLoanPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleReceivedCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final PeopleReceivedCommand standardCommand \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReceivedCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        final PeopleReceivedCommand receiveAllCommand \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReceivedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReceivedCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values with null Loan index"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand receiveAllCommandWithSameValue \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReceivedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(receiveAllCommand.equals(receiveAllCommandWithSameValue));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(receiveAllCommand.equals(receiveAllCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReceivedCommand(INDEX_THIRD, INDEX_FIRST)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different loan index -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReceivedCommand(INDEX_SECOND, INDEX_SECOND)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no loan index -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReceivedCommand(INDEX_THIRD, null)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "syinyichen": 176,
      "CheyanneSim": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleRemindAllCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.people.PeopleRemindAllCommand.MESSAGE_REMINDALL_SUCCESS_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.getTypicalUserData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindAllCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_emptyUserData_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleRemindAllCommand peopleRemindallCommand \u003d new PeopleRemindAllCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleRemindallCommand, model, Messages.MESSAGE_EMPTY_USER_DATA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(getTypicalUserData());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (Person p: lastShownList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!p.getLoans().getTotal().isZero()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                expectedMessage +\u003d String.format(PeopleRemindAllCommand.MESSAGE_REMINDALL_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        p.getName(), p.getLoans().getTotal());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedMessage +\u003d MESSAGE_REMINDALL_SUCCESS_EMAIL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(new PeopleRemindAllCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(getTypicalUserData());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (Person p: lastShownList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!p.getLoans().getTotal().isZero()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                expectedMessage +\u003d String.format(PeopleRemindAllCommand.MESSAGE_REMINDALL_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        p.getName(), p.getLoans().getTotal());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedMessage +\u003d MESSAGE_REMINDALL_SUCCESS_EMAIL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(new PeopleRemindAllCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_allPeopleWithZeroDebt_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(getTypicalUserData());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).withLoans().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person bob \u003d new PersonBuilder(BOB).withLoans().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person carl \u003d new PersonBuilder(CARL).withLoans().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        AddressBook ab \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPerson(alice)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPerson(bob)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPerson(carl).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setAddressBook(ab);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d \"No one owes you money :(\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(new PeopleRemindAllCommand(), model, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleRemindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.getTypicalUserData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_emptyUserData_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleRemindCommand peopleRemindCommand \u003d new PeopleRemindCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleRemindCommand, model, Messages.MESSAGE_EMPTY_USER_DATA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(getTypicalUserData());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserReminds \u003d lastShownList.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleRemindCommand peopleRemindCommand \u003d new PeopleRemindCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleRemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                personUserReminds.getName(), personUserReminds.getLoans().getTotal());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleRemindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        model.setUserData(getTypicalUserData());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserReminds \u003d model.getFilteredPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleRemindCommand peopleRemindCommand \u003d new PeopleRemindCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleRemindCommand.MESSAGE_REMIND_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                personUserReminds.getName(), personUserReminds.getLoans().getTotal());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandSuccess(peopleRemindCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void execute_personWithZeroDebt_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserReminds \u003d lastShownList.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleRemindCommand peopleRemindCommand \u003d new PeopleRemindCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(\"%1$s does not owe you money :(\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                personUserReminds.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertCommandFailure(peopleRemindCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleRemindCommand standardCommand \u003d new PeopleRemindCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleRemindCommand commandWithSameValues \u003d new PeopleRemindCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleRemindCommand(INDEX_THIRD)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 93,
      "CheyanneSim": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/people/PeopleReturnedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.commands.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "class PeopleReturnedCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_unfilteredListPaidAll_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person returnedAllPerson \u003d lastShownList.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount totalDebt \u003d returnedAllPerson.getDebts().getTotal();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person removedDebtPerson \u003d new PersonBuilder(returnedAllPerson).withDebts().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReturnedCommand.MESSAGE_RETURNED_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                removedDebtPerson.getName(), totalDebt, removedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(1), removedDebtPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleReturnedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_filteredListPaidAll_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person returnedAllPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount totalDebt \u003d returnedAllPerson.getDebts().getTotal();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person removedDebtPerson \u003d new PersonBuilder(returnedAllPerson).withDebts().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReturnedCommand.MESSAGE_RETURNED_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                removedDebtPerson.getName(), totalDebt, removedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), removedDebtPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleReturnedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_unfilteredListPaidByIndex_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwe \u003d lastShownList.get(INDEX_THIRD.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cDebt\u003e debts \u003d personUserOwe.getDebts().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount debtReduced \u003d debts.get(0).getAmount();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt[] reducedDebts \u003d new Debt[debts.size() - 1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        for (int i \u003d 0; i \u003c reducedDebts.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            reducedDebts[i] \u003d debts.get(i + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person reducedDebtPerson \u003d new PersonBuilder(personUserOwe).withDebts(reducedDebts).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_THIRD,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                INDEX_FIRST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReturnedCommand.MESSAGE_RETURNED_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                reducedDebtPerson.getName(), debtReduced, reducedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(2), reducedDebtPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleReturnedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_filteredListPaidByIndex_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showPersonAtIndex(model, INDEX_THIRD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwe \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cDebt\u003e debts \u003d personUserOwe.getDebts().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount debtReduced \u003d debts.get(0).getAmount();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt[] reducedDebts \u003d new Debt[debts.size() - 1];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        for (int i \u003d 0; i \u003c reducedDebts.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            reducedDebts[i] \u003d debts.get(i + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person reducedDebtPerson \u003d new PersonBuilder(personUserOwe).withDebts(reducedDebts).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReturnedCommand.MESSAGE_RETURNED_SUCCESS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                reducedDebtPerson.getName(), debtReduced, reducedDebtPerson.getDebts().getTotal());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), reducedDebtPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandSuccess(peopleReturnedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleReturnedCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_invalidDebtIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person personUserOwe \u003d lastShownList.get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Index.fromOneBased(personUserOwe.getDebts().asUnmodifiableObservableList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_SECOND, outOfBoundIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleReturnedCommand, model, Messages.MESSAGE_INVALID_DEBT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void execute_noDebt_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person returnedAllPerson \u003d lastShownList.get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Person removedDebtPerson \u003d new PersonBuilder(returnedAllPerson).withDebts().build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand peopleReturnedCommand \u003d new PeopleReturnedCommand(INDEX_FIRST, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(PeopleReturnedCommand.MESSAGE_NO_DEBT, removedDebtPerson.getName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), removedDebtPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertCommandFailure(peopleReturnedCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleReturnedCommand standardCommand \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReturnedCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        final PeopleReturnedCommand returnAllCommand \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReturnedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReturnedCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values with null Debt index"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand returnAllCommandWithSameValue \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleReturnedCommand(INDEX_SECOND, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(returnAllCommand.equals(returnAllCommandWithSameValue));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(returnAllCommand.equals(returnAllCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleClearCommand()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different person index -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReturnedCommand(INDEX_THIRD, INDEX_FIRST)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different debt index -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReturnedCommand(INDEX_SECOND, INDEX_SECOND)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no debt index -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(standardCommand.equals(new PeopleReturnedCommand(INDEX_THIRD, null)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 200
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletBudgetCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_JAN_2010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DEFAULT_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletBudgetCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void execute_newDefaultBudget_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedModel.setDefaultBudget(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new WalletBudgetCommand(DEFAULT_BUDGET), model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                String.format(WalletBudgetCommand.MESSAGE_SUCCESS_DEFAULT, DEFAULT_BUDGET.getAmount()), expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void execute_newBudget_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedModel.setBudget(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess(new WalletBudgetCommand(BUDGET_JAN_2010), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                String.format(WalletBudgetCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        BUDGET_JAN_2010.getAmount(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        BUDGET_JAN_2010.getMonth(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        BUDGET_JAN_2010.getYear()), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletBudgetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_APRIL_2020;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_JAN_2010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DEFAULT_BUDGET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletBudgetCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new WalletBudgetCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void execute_defaultBudgetAcceptedByModel_successful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ModelStubAcceptingBudgetSet modelStub \u003d new ModelStubAcceptingBudgetSet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        CommandResult commandResult \u003d new WalletBudgetCommand(DEFAULT_BUDGET).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(String.format(WalletBudgetCommand.MESSAGE_SUCCESS_DEFAULT, DEFAULT_BUDGET.getAmount()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(DEFAULT_BUDGET, modelStub.defaultBudget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void execute_budgetAcceptedByModel_setSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        ModelStubAcceptingBudgetSet modelStub \u003d new ModelStubAcceptingBudgetSet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        CommandResult commandResult \u003d new WalletBudgetCommand(BUDGET_JAN_2010).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(String.format(WalletBudgetCommand.MESSAGE_SUCCESS, BUDGET_JAN_2010.getAmount(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletBudgetCommand defaultBudgetCommand \u003d new WalletBudgetCommand(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletBudgetCommand typicalBudgetCommand \u003d new WalletBudgetCommand(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(defaultBudgetCommand.equals(defaultBudgetCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(typicalBudgetCommand.equals(typicalBudgetCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletBudgetCommand defaultBudgetCommandCopy \u003d new WalletBudgetCommand(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(defaultBudgetCommand.equals(defaultBudgetCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletBudgetCommand typicalBudgetCommandCopy \u003d new WalletBudgetCommand(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(typicalBudgetCommand.equals(typicalBudgetCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(defaultBudgetCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalBudgetCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(defaultBudgetCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalBudgetCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // different budgets -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletBudgetCommand aprilBudgetCommand \u003d new WalletBudgetCommand(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(defaultBudgetCommand.equals(aprilBudgetCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalBudgetCommand.equals(aprilBudgetCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(defaultBudgetCommand.equals(typicalBudgetCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private class ModelStubAcceptingBudgetSet extends ModelStub {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        final List\u003cBudget\u003e budgetList \u003d new ArrayList\u003cBudget\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        private Budget defaultBudget \u003d Budget.getDefault();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            budgetList.add(budget);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        public void setDefaultBudget(Budget budget) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            defaultBudget \u003d budget;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTransactionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletDeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction transactionToDelete \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                model.getFilteredTransactionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletDeleteCommand walletDeleteCommand \u003d new WalletDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String expectedMessage \u003d String.format(WalletDeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                transactionToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(walletDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        WalletDeleteCommand walletDeleteCommand \u003d new WalletDeleteCommand(outOfBoundsIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandFailure(walletDeleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Transaction transactionToDelete \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                model.getFilteredTransactionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletDeleteCommand walletDeleteCommand \u003d new WalletDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String expectedMessage \u003d String.format(WalletDeleteCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                transactionToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.deleteTransaction(transactionToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        showNoTransaction(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(walletDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        showTransactionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWallet().getTransactionList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletDeleteCommand walletDeleteCommand \u003d new WalletDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandFailure(walletDeleteCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletDeleteCommand deleteFirstCommand \u003d new WalletDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletDeleteCommand deleteSecondCommand \u003d new WalletDeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletDeleteCommand deleteFirstCommandCopy \u003d new WalletDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different transaction -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no transaction."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private void showNoTransaction(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model.updateFilteredTransactionList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(model.getFilteredTransactionList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 95,
      "jumpcutfindo": 3,
      "CheyanneSim": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletEditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.testutil.EditTransactionDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletEditCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_incomeAllFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Income editedTransaction \u003d new TransactionBuilder().buildIncome(); //returns 1 income obj"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedTransaction).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        //stores edited income obj"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletEditCommand walletEditCommand \u003d new WalletEditCommand(INDEX_THIRD, descriptor); //edit with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // command -\u003e copy from descrip."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(WalletEditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.setIncome(model.getFilteredIncomeList().get(0), editedTransaction); //add edited income back"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(walletEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_expenseAllFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Expense editedTransaction \u003d new TransactionBuilder().buildExpense();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        EditTransactionDescriptor descriptor \u003d new EditTransactionDescriptorBuilder(editedTransaction).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletEditCommand walletEditCommand \u003d new WalletEditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(WalletEditCommand.MESSAGE_EDIT_TRANSACTION_SUCCESS, editedTransaction);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new Wallet(model.getWallet()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedTransaction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(walletEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 51,
      "jumpcutfindo": 6,
      "CheyanneSim": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletExpenseCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code WalletExpenseCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletExpenseCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedModel.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new WalletExpenseCommand(DUCK_RICE),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                String.format(WalletExpenseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        DUCK_RICE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        DUCK_RICE.getDate().getMonth() + \" \" + DUCK_RICE.getDate().getYear(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \"$\" + VALID_AMOUNT_DUCK,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        \"$0.00\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 10,
      "joel-lim": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletExpenseCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.MRT_CONCESSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_DUCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletExpenseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new WalletExpenseCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        CommandResult commandResult \u003d new WalletExpenseCommand(DUCK_RICE).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(String.format(WalletExpenseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getMonth() + \" \" + DUCK_RICE.getDate().getYear(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \"$\" + VALID_AMOUNT_DUCK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \"$0.00\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(Collections.singletonList(DUCK_RICE), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletExpenseCommand duckCommand \u003d new WalletExpenseCommand(DUCK_RICE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletExpenseCommand mrtCommand \u003d new WalletExpenseCommand(MRT_CONCESSION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(duckCommand, duckCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletExpenseCommand duckCommandCopy \u003d new WalletExpenseCommand(DUCK_RICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(duckCommand.equals(duckCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(duckCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(duckCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(duckCommand.equals(mrtCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        public Amount getTotalExpenditureInMonth(Date date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return expensesAdded"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .map(Transaction::getAmount)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .reduce(Amount.zero(), Amount::add);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        public Budget getBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return Budget.getDefault();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 24,
      "joel-lim": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletFindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TRANSACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.MRT_CONCESSION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TA_JOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletFindCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand findFirstCommand \u003d new WalletFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand findSecondCommand \u003d new WalletFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand findFirstCommandCopy \u003d new WalletFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_zeroKeywords_noTransactionFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand command \u003d new WalletFindCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_multipleKeywords_multipleTransactionsFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TRANSACTIONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"TA MRT RICE\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand command \u003d new WalletFindCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel.updateFilteredTransactionList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(Arrays.asList(MRT_CONCESSION, DUCK_RICE, TA_JOB), model.getFilteredTransactionList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 80,
      "jumpcutfindo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletIncomeCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TA_JOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code WalletIncomeCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletIncomeCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void execute_newIncome_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedModel.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertCommandSuccess(new WalletIncomeCommand(TA_JOB), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                String.format(WalletIncomeCommand.MESSAGE_SUCCESS, TA_JOB), expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletIncomeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TA_JOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletIncomeCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void constructor_nullIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new WalletIncomeCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void execute_incomeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelStubAcceptingIncomeAdded modelStub \u003d new ModelStubAcceptingIncomeAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        CommandResult commandResult \u003d new WalletIncomeCommand(ALLOWANCE).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(String.format(WalletIncomeCommand.MESSAGE_SUCCESS, ALLOWANCE), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(Arrays.asList(ALLOWANCE), modelStub.incomesAdded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletIncomeCommand allowanceCommand \u003d new WalletIncomeCommand(ALLOWANCE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletIncomeCommand taCommand \u003d new WalletIncomeCommand(TA_JOB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(allowanceCommand.equals(allowanceCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletIncomeCommand allowanceCommandCopy \u003d new WalletIncomeCommand(ALLOWANCE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(allowanceCommand.equals(allowanceCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(allowanceCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(allowanceCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // different income -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(allowanceCommand.equals(taCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * A Model stub that always accept the income being added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private class ModelStubAcceptingIncomeAdded extends ModelStub {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        final ArrayList\u003cIncome\u003e incomesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        public void addIncome(Income income) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            requireNonNull(income);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            incomesAdded.add(income);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/wallet/WalletListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.commands.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getWallet(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertCommandSuccess(new WalletListCommand(), model, WalletListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.model.transaction.Date.DATE_PATTERN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"91a\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"11 May 2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"11.11.2020\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_DATE_3 \u003d \"30/02/2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_DATE_4 \u003d \"2/2/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"JANUARY\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"twenty twenty\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"5\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String VALID_DATE \u003d \"02/02/2020\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String VALID_MONTH \u003d \"02\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String VALID_YEAR \u003d \"2020\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount expectedAmount \u003d new Amount(Double.parseDouble(VALID_AMOUNT));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount expectedAmount \u003d new Amount(Double.parseDouble(VALID_AMOUNT));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_3));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_4));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date date \u003d new Date(LocalDate.parse(VALID_DATE, DateTimeFormatter.ofPattern(DATE_PATTERN)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(date, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Date date \u003d new Date(LocalDate.parse(VALID_DATE, DateTimeFormatter.ofPattern(DATE_PATTERN)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(date, ParserUtil.parseDate(WHITESPACE + VALID_DATE + WHITESPACE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseMonth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMonth(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseMonth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMonth(INVALID_MONTH));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseMonth_validValueWithoutWhitespace_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Month month \u003d Month.of(Integer.parseInt(VALID_MONTH));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(month, ParserUtil.parseMonth(VALID_MONTH));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseMonth_validValueWithWhitespace_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Month month \u003d Month.of(Integer.parseInt(VALID_MONTH));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(month, ParserUtil.parseMonth(WHITESPACE + VALID_MONTH + WHITESPACE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseYear_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear(null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseYear_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseYear_validValueWithoutWhitespace_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Year year \u003d Year.of(Integer.parseInt(VALID_YEAR));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(year, ParserUtil.parseYear(VALID_YEAR));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseYear_validValueWithWhitespace_returnsMonth() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Year year \u003d Year.of(Integer.parseInt(VALID_YEAR));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(year, ParserUtil.parseYear(WHITESPACE + VALID_YEAR + WHITESPACE));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 2,
      "jumpcutfindo": 76,
      "-": 164,
      "CheyanneSim": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SharkieParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.TEXTBOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.DINNER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.global.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.global.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleDeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleFindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleLendCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleOweCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReceivedCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindAllCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReturnedCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletDeleteCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletExpenseCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletIncomeCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.WalletUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class SharkieParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private final SharkieParser parser \u003d new SharkieParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_add() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleAddCommand command \u003d (PeopleAddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(new PeopleAddCommand(person), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parsePeopleCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleClearCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof PeopleClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleClearCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof PeopleClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleDeleteCommand command \u003d (PeopleDeleteCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleDeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand command \u003d (PeopleEditCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleEditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseGlobalCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_find() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand command \u003d (PeopleFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PEOPLE_COMMAND_TYPE + \" \" + PeopleFindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        + \" \" + PREFIX_NAME + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleFindCommand(new PeopleNamePredicate(keywords)), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseGlobalCommand_help() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof HelpCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_list() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleListCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof PeopleListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleListCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                instanceof PeopleListCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_owe() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand command \u003d (PeopleOweCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleOweCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PersonUtil.getDebtDescription(TEXTBOOK));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleOweCommand(INDEX_FIRST, TEXTBOOK), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_returned() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand command \u003d (PeopleReturnedCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleReturnedCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + CliSyntax.PREFIX_TRANSACTION_INDEX + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleReturnedCommand(INDEX_FIRST, INDEX_FIRST), command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_lend() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleLendCommand command \u003d (PeopleLendCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleLendCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + PersonUtil.getLoanDescription(DINNER));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleLendCommand(INDEX_FIRST, DINNER), command);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parsePeopleCommand_received() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand command \u003d (PeopleReceivedCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleReceivedCommand.COMMAND_WORD + \" \" + INDEX_SECOND.getOneBased() + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_TRANSACTION_INDEX + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleReceivedCommand(INDEX_SECOND, INDEX_FIRST), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parsePeopleCommand_remind() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleRemindCommand command \u003d (PeopleRemindCommand) parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PeopleRemindCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new PeopleRemindCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parsePeopleCommand_remindAll() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleRemindAllCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                instanceof PeopleRemindAllCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(parser.parseCommand(PEOPLE_COMMAND_TYPE + \" \" + PeopleRemindAllCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                instanceof PeopleRemindAllCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parseWalletCommand_expense() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletExpenseCommand command \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                (WalletExpenseCommand) parser.parseCommand(WalletUtil.getExpenseCommand(DUCK_RICE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(new WalletExpenseCommand(DUCK_RICE), command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parseWalletCommand_income() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        WalletIncomeCommand command \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                (WalletIncomeCommand) parser.parseCommand(WalletUtil.getIncomeCommand(ALLOWANCE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(new WalletIncomeCommand(ALLOWANCE), command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parseWalletCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletDeleteCommand command \u003d (WalletDeleteCommand) parser.parseCommand(WALLET_COMMAND_TYPE + \" \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + WalletDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(new WalletDeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parseCommand_globalCommands_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseCommand_prefixOnly_throwsParseException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PEOPLE_COMMAND_TYPE));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                WALLET_COMMAND_TYPE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parseCommand_commandWithoutPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PeopleListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_nullCommandWord_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                PEOPLE_COMMAND_TYPE));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parsePeopleCommand_unknownCommandWord_throwsParseException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                PEOPLE_COMMAND_TYPE + \" unknown command word\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 46,
      "gracegrape": 7,
      "jumpcutfindo": 47,
      "-": 47,
      "CheyanneSim": 66,
      "joel-lim": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleAddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private PeopleAddCommandParser parser \u003d new PeopleAddCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new PeopleAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new PeopleAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new PeopleAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new PeopleAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new PeopleAddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 16,
      "jumpcutfindo": 15,
      "-": 70,
      "CheyanneSim": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private PeopleDeleteCommandParser parser \u003d new PeopleDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \"1\", new PeopleDeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PeopleDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 6,
      "-": 25,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleEditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleEditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private PeopleEditCommandParser parser \u003d new PeopleEditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1\", PeopleEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleEditCommand expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedCommand \u003d new PeopleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 4,
      "jumpcutfindo": 15,
      "-": 129,
      "CheyanneSim": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleFindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_KEYWORD_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.people.PeopleFindCommandParser.MESSAGE_INVALID_TAG_PREDICATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleFindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleEmailPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeoplePhonePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.PeopleTagPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class PeopleFindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private PeopleFindCommandParser parser \u003d new PeopleFindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" alex\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_moreThanOneParameter_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" n/Alice p/91234567\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(PeopleFindCommand.ONLY_ONE_PARAMETER_ALLOWED, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_noKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" n/\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" p/\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" e/\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" t/\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, PeopleFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixName_returnsFindCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        PeopleFindCommand expectedPeopleFindCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleFindCommand(new PeopleNamePredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Alice \\n \\t Bob  \\t\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixPhone_returnsFindCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleFindCommand expectedPeopleFindCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleFindCommand(new PeoplePhonePredicate(Arrays.asList(\"9123\", \"1234\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" p/9123 1234\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" p/ \\n 9123 \\n \\t 1234  \\t\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixEmail_returnsFindCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleFindCommand expectedPeopleFindCommand \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleFindCommand(new PeopleEmailPredicate(Arrays.asList(\"test@example.com\", \"gmail\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" e/test@example.com gmail\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" e/ \\n test@example.com \\n \\t gmail  \\t\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixTag_returnsFindCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no leading and trailing whitespaces and correct tags (debt or loan)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleFindCommand expectedPeopleFindCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new PeopleFindCommand(new PeopleTagPredicate(Arrays.asList(\"debt\", \"loan\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, \" t/debt loan\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // multiple whitespaces between keywords and correct tags (debt or loan)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, \" t/ \\n debt \\n \\t loan  \\t\", expectedPeopleFindCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidTag_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // tags that are not debt or loan"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \" t/friends neighbours\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                MESSAGE_INVALID_TAG_PREDICATE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 14,
      "jumpcutfindo": 16,
      "-": 13,
      "CheyanneSim": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleLendCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LEND_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LEND_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleLendCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleLendCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleLendCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private PeopleLendCommandParser parser \u003d new PeopleLendCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no description specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no amount specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no index and description specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no index and amount specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no description and amount specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no index, description and amount specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\" + VALID_NAME_AMY + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + VALID_DESC_AMY + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // valid description, invalid amount without the optional date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + \" \" + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // valid description, valid amount with invalid date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \"1 \" + PREFIX_NAME + VALID_DESC_AMY + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // valid description, invalid amount with valid date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + INVALID_AMOUNT_DESC + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // valid description, invalid amount and invalid date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + INVALID_AMOUNT_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid description, invalid amount without the optional date"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + \" \" + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid description, valid amount with invalid date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                \"1\" + INVALID_TRANSACTION_DESC + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid description, invalid amount with valid date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + INVALID_AMOUNT_DESC + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid description, invalid amount and invalid date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + INVALID_AMOUNT_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + LEND_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Loan loan \u003d new Loan(new Description(VALID_DESC_AMY),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new Amount(Double.parseDouble(VALID_AMOUNT_AMY)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new Date(LocalDate.parse(VALID_DATE_AMY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleLendCommand expectedCommand \u003d new PeopleLendCommand(targetIndex, loan);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_dateNotSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + LEND_DESC_BOB;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Loan loan \u003d new Loan(new Description(VALID_DESC_BOB),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new Amount(Double.parseDouble(VALID_AMOUNT_BOB)),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                Date.getDefault());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleLendCommand expectedCommand \u003d new PeopleLendCommand(targetIndex, loan);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 115,
      "jumpcutfindo": 10,
      "CheyanneSim": 16,
      "joel-lim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleOweCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleOweCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleOweCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleOweCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private PeopleOweCommandParser parser \u003d new PeopleOweCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no description specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no amount specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no index and description specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no index and amount specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no description and amount specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no index, description and amount specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\" + VALID_NAME_AMY + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + VALID_DESC_AMY + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\" + VALID_NAME_AMY + \" \" + PREFIX_NAME + VALID_DESC_AMY + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                + PREFIX_AMOUNT + VALID_AMOUNT_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // valid description, invalid amount without the optional date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + \" \" + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // valid description, valid amount with invalid date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \"1 \" + PREFIX_NAME + VALID_DESC_AMY + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // valid description, invalid amount with valid date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + INVALID_AMOUNT_DESC + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // valid description, invalid amount and invalid date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME + VALID_DESC_AMY + INVALID_AMOUNT_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid description, invalid amount without the optional date"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + \" \" + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid description, valid amount with invalid date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                \"1\" + INVALID_TRANSACTION_DESC + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid description, invalid amount with valid date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + INVALID_AMOUNT_DESC + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid description, invalid amount and invalid date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + INVALID_AMOUNT_DESC + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OWE_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debt \u003d new Debt(new Description(VALID_DESC_AMY),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new Amount(Double.parseDouble(VALID_AMOUNT_AMY)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new Date(LocalDate.parse(VALID_DATE_AMY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand expectedCommand \u003d new PeopleOweCommand(targetIndex, debt);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_dateNotSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OWE_DESC_BOB;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debt \u003d new Debt(new Description(VALID_DESC_BOB),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new Amount(Double.parseDouble(VALID_AMOUNT_BOB)),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                Date.getDefault());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleOweCommand expectedCommand \u003d new PeopleOweCommand(targetIndex, debt);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleReceivedCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECEIVED_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReceivedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleReceivedCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleReceivedCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private PeopleReceivedCommandParser parser \u003d new PeopleReceivedCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // nothing specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no person\u0027s index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"i/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"-5\" + RECEIVED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"0\" + RECEIVED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\" + RECEIVED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1 p/ string\" + RECEIVED_DESC_AMY , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid loan index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_INDEX, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_noLoanIndexSpecified_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetPersonIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String userInput \u003d String.valueOf(targetPersonIndex.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand expectedCommand \u003d new PeopleReceivedCommand(targetPersonIndex, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetPersonIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetLoanIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String userInput \u003d targetPersonIndex.getOneBased() + \" \" + RECEIVED_DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleReceivedCommand expectedCommand \u003d new PeopleReceivedCommand(targetPersonIndex, targetLoanIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 67,
      "CheyanneSim": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleRemindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.logic.commands.people.PeopleRemindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class PeopleRemindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleRemindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private PeopleRemindCommandParser parser \u003d new PeopleRemindCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        PeopleRemindCommand expectedCommand \u003d new PeopleRemindCommand(targetIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseSuccess(parser, targetIndex.getOneBased() + \"\", expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 45,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/people/PeopleReturnedCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.logic.parser.people;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RETURNED_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.logic.commands.people.PeopleReturnedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleReturnedCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PeopleReturnedCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private PeopleReturnedCommandParser parser \u003d new PeopleReturnedCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // nothing specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no person\u0027s index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"i/1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"-5\" + RETURNED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"0\" + RETURNED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\" + RETURNED_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1 p/ string\" + RETURNED_DESC_AMY , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid debt index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_INDEX, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_noDebtIndexSpecified_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetPersonIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String userInput \u003d String.valueOf(targetPersonIndex.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand expectedCommand \u003d new PeopleReturnedCommand(targetPersonIndex, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetPersonIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Index targetDebtIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String userInput \u003d targetPersonIndex.getOneBased() + \" \" + RETURNED_DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleReturnedCommand expectedCommand \u003d new PeopleReturnedCommand(targetPersonIndex, targetDebtIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletBudgetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONTH_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONTH_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletBudgetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class WalletBudgetCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private WalletBudgetCommandParser parser \u003d new WalletBudgetCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // no amount"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, PREFIX_DATE + VALID_DATE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // some invalid test strings"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parse_invalidArguments_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // invalid amount only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // invalid amount, invalid month, invalid year"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + INVALID_MONTH_DESC + INVALID_YEAR_DESC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // invalid amount, invalid month, valid year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + INVALID_MONTH_DESC + VALID_YEAR_DESC,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // invalid amount, valid month, invalid year"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + VALID_MONTH_DESC + INVALID_YEAR_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // invalid amount, valid month, valid year"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, INVALID_AMOUNT_DESC + VALID_MONTH_DESC + VALID_YEAR_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // valid amount, invalid month, invalid year"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_DESC + INVALID_MONTH_DESC + INVALID_YEAR_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Date.MONTH_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // valid amount, invalid month, valid year"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_DESC + INVALID_MONTH_DESC + VALID_YEAR_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Date.MONTH_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // valid amount, valid month, invalid year"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_DESC + VALID_MONTH_DESC + INVALID_YEAR_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                Date.YEAR_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void parse_validArguments_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // valid amount, valid month, valid year"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget validAmountAndDateBudget \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new BudgetBuilder().withAmount(VALID_AMOUNT).withMonth(VALID_MONTH).withYear(VALID_YEAR).buildBudget();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseSuccess(parser, VALID_AMOUNT_DESC + VALID_MONTH_DESC + VALID_YEAR_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new WalletBudgetCommand(validAmountAndDateBudget));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // valid amount only"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget validAmountOnlyBudget \u003d new BudgetBuilder().withAmount(VALID_AMOUNT).setAsDefault().buildBudget();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertParseSuccess(parser, VALID_AMOUNT_DESC, new WalletBudgetCommand(validAmountOnlyBudget));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 95,
      "joel-lim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private WalletDeleteCommandParser parser \u003d new WalletDeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \"1\", new WalletDeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                WalletDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"123 a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                WalletDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 33,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletEditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletEditCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private WalletEditCommandParser parser \u003d new WalletEditCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\", WalletEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT + VALID_DATE_AMY, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_AMOUNT_AMY + INVALID_AMOUNT, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Transaction} being edited,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FOOD + TAG_DESC_SHOPPING + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TRANSACTION_DESC + INVALID_AMOUNT + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 3,
      "gracegrape": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletExpenseCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.AMOUNT_DUCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DATE_DUCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DESC_DUCK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TAG_DUCK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_DUCK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DESC_DUCK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletExpenseCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private WalletExpenseCommandParser parser \u003d new WalletExpenseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseSuccess(parser, DESC_DUCK + AMOUNT_DUCK + DATE_DUCK + TAG_DUCK, new WalletExpenseCommand(DUCK_RICE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Expense expectedExpense \u003d new TransactionBuilder().withDescription(VALID_DESC_DUCK)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withAmount(VALID_AMOUNT_DUCK).buildExpense();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // no date, no tag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseSuccess(parser, DESC_DUCK + AMOUNT_DUCK, new WalletExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, AMOUNT_DUCK, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing amount"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, DESC_DUCK, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing prefixes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, VALID_DESC_DUCK + VALID_AMOUNT_DUCK, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletFindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_KEYWORD_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletFindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.AmountContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class WalletFindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private WalletFindCommandParser parser \u003d new WalletFindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" chicken\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_moreThanOneParameter_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" n/Chicken $/5\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(WalletFindCommand.ONLY_ONE_PARAMETER_ALLOWED, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_noKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" n/\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" $/\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" d/\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" t/\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_KEYWORD_NOT_FOUND, WalletFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_amountContainsDecimal_throwsParseExpection() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseFailure(parser, \" $/5.50\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletFindCommand.WRONG_AMT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        WalletFindCommand expectedWalletFindCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new WalletFindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Duck\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseSuccess(parser, \" n/Chicken Duck\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertParseSuccess(parser, \" \\n n/Chicken \\n \\t Duck  \\t\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixName_returnsFindCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletFindCommand expectedWalletFindCommand \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new WalletFindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Laksa\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" n/Chicken Laksa\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Chicken \\n \\t Laksa  \\t\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixAmount_returnsFindCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletFindCommand expectedWalletFindCommand \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new WalletFindCommand(new AmountContainsKeywordsPredicate(Arrays.asList(\"5\", \"10\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" $/5 10\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" $/ \\n 5 \\n \\t 10  \\t\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixDate_returnsFindCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletFindCommand expectedWalletFindCommand \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new WalletFindCommand(new DateContainsKeywordsPredicate(Arrays.asList(\"13/02/2020\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                        \"12/01/2020\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" d/13/02/2020 12/01/2020\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" d/ \\n 13/02/2020 \\n \\t 12/01/2020  \\t\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void parse_prefixTag_returnsFindCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        WalletFindCommand expectedWalletFindCommand \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new WalletFindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friend\", \"colleague\")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" t/friend colleague\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertParseSuccess(parser, \" t/ \\n friend \\n \\t colleague  \\t\", expectedWalletFindCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 34,
      "CheyanneSim": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/wallet/WalletIncomeCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.logic.parser.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DATE_ALLOWANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TAG_ALLOWANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletIncomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletIncomeCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private WalletIncomeCommandParser parser \u003d new WalletIncomeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseSuccess(parser, DESC_ALLOWANCE + AMOUNT_ALLOWANCE + DATE_ALLOWANCE + TAG_ALLOWANCE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new WalletIncomeCommand(ALLOWANCE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Income expectedIncome \u003d new TransactionBuilder().withDescription(VALID_DESC_ALLOWANCE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withAmount(VALID_AMOUNT_ALLOWANCE).buildIncome();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // no date, no tag"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseSuccess(parser, DESC_ALLOWANCE + AMOUNT_ALLOWANCE, new WalletIncomeCommand(expectedIncome));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WalletIncomeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, AMOUNT_ALLOWANCE, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing amount"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, DESC_ALLOWANCE, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // missing prefixes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertParseFailure(parser, VALID_DESC_ALLOWANCE + VALID_AMOUNT_ALLOWANCE, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DEBT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DEBT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 3,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TA_JOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.person.PeopleNamePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserDataFilePath(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath_validPath_setUserDataFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Path path \u003d Paths.get(\"user/data/file/path\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        modelManager.setUserDataFilePath(path);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(path, modelManager.getUserDataFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wallet \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_nullIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasIncome(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_incomeNotInWallet_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(modelManager.hasIncome(TA_JOB));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_incomeInWallet_returnsTrue() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(modelManager.hasIncome(TA_JOB));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addIncome_nullIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addIncome(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteIncome_targetIncomeNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e modelManager.deleteIncome(TA_JOB));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteIncome_targetIncomeInList_deletesIncome() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.deleteIncome(TA_JOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome_nullTargetIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setIncome(null, TA_JOB));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome_nullEditedIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setIncome(TA_JOB, null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome_targetIncomeNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e modelManager.setIncome(TA_JOB, TA_JOB));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome_validIncome_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.setIncome(TA_JOB, TA_JOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedModelManager.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_expenseNotInWallet_returnsFalse() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(modelManager.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_expenseInWallet_returnsTrue() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(modelManager.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addExpense(null));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteExpense_targetExpenseNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e modelManager.deleteExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteExpense_targetExpenseInList_deletesExpense() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.deleteExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteTransaction_targetExpenseInList_deletesExpense() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        modelManager.deleteTransaction(DUCK_RICE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteTransaction_targetIncomeInList_deletesIncome() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        modelManager.addIncome(ALLOWANCE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        modelManager.deleteTransaction(ALLOWANCE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpense(null, DUCK_RICE));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpense(DUCK_RICE, null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e modelManager.setExpense(DUCK_RICE, DUCK_RICE));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense_validExpense_success() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager.setExpense(DUCK_RICE, DUCK_RICE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedModelManager.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void getFilteredTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTransactionList().remove(0));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet wallet \u003d getTypicalWallet();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet differentWallet \u003d new Wallet();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, wallet, userPrefs);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, wallet, userPrefs);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // different wallet -\u003e returns false"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentWallet, userPrefs)));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        modelManager.updateFilteredPersonList(new PeopleNamePredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 12,
      "gracegrape": 22,
      "-": 128,
      "joel-lim": 135,
      "CheyanneSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserDataTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class UserDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private final UserData userData \u003d new UserData(ALICE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same user data -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(userData.equals(userData));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // copied user data -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(userData.equals(new UserData(userData)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //same user -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(userData.equals(new UserData(ALICE)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different user -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData otherUserData \u003d new UserData(BOB);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(userData.equals(otherUserData));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setUserDataFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WalletTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_JAN_2010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.MRT_CONCESSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.TA_JOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_MONTH_DUCK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_YEAR_DUCK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(Collections.emptyList(), wallet.getTransactionList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(Collections.emptyList(), wallet.getIncomeList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(Collections.emptyList(), wallet.getExpenseList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void resetData_withValidReadOnlyWallet_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet newData \u003d getTypicalWallet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(newData, wallet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.hasExpense(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_expenseNotInWallet_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(wallet.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasExpense_expenseInWallet_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(wallet.hasExpense(DUCK_RICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_nullIncome_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.hasIncome(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_incomeNotInWallet_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(wallet.hasIncome(TA_JOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void hasIncome_incomeInWallet_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        wallet.addIncome(TA_JOB);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(wallet.hasIncome(TA_JOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.setBudget(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setDefaultBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.setDefaultBudget(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void hasExceededBudget_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.hasExceededBudget(null, null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wallet.getBudget(null, null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void hasExceededBudget_typicalWallet_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // only default budget, budget not exceeded -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletOnlyDefaultBudget \u003d new Wallet();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.addExpense(DUCK_RICE); // 3.50"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.addExpense(MRT_CONCESSION); // 45"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudget \u003d new BudgetBuilder().withAmount(\"35\").setAsDefault().buildBudget();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.setDefaultBudget(defaultBudget);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(typicalWalletOnlyDefaultBudget.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // only budget for the selected month, budget not exceeded -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletOnlySelectedMonthBudget \u003d new Wallet();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.addExpense(MRT_CONCESSION); // both are in Jan 2010"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.setBudget(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(typicalWalletOnlySelectedMonthBudget.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // both budgets (default and selected month), budget not exceeded -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletWithBothBudgets \u003d new Wallet();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudgetWillNotExceed \u003d new BudgetBuilder().withAmount(\"1000\").setAsDefault().buildBudget();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget monthBudget \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new BudgetBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .withAmount(\"35\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .withMonth(VALID_MONTH_DUCK)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .withYear(VALID_YEAR_DUCK)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .buildBudget();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.addExpense(MRT_CONCESSION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.setDefaultBudget(defaultBudgetWillNotExceed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.setBudget(monthBudget);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(typicalWalletWithBothBudgets.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void hasExceededBudget_typicalWallet_returnsFalse() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // only default budget, not exceeded -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletOnlyDefaultBudget \u003d new Wallet();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.addExpense(DUCK_RICE); // 3.50"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.addExpense(MRT_CONCESSION); // 45"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudget \u003d new BudgetBuilder().withAmount(\"100\").setAsDefault().buildBudget();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlyDefaultBudget.setDefaultBudget(defaultBudget);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalWalletOnlyDefaultBudget.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // only budget for the selected month, budget not exceeded -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletOnlySelectedMonthBudget \u003d new Wallet();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget selectedMonthBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withAmount(\"100\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withMonth(VALID_MONTH_DUCK)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withYear(VALID_YEAR_DUCK)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .buildBudget();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.addExpense(MRT_CONCESSION); // both are in Jan 2010"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletOnlySelectedMonthBudget.setBudget(selectedMonthBudget);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalWalletOnlySelectedMonthBudget.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        // both budgets (default and selected month), budget not exceeded -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Wallet typicalWalletWithBothBudgets \u003d new Wallet();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudgetWillNotExceed \u003d new BudgetBuilder().withAmount(\"35\").setAsDefault().buildBudget();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget monthBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withAmount(\"1000\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withMonth(VALID_MONTH_DUCK)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .withYear(VALID_YEAR_DUCK)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                .buildBudget();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.addExpense(MRT_CONCESSION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.setDefaultBudget(defaultBudgetWillNotExceed);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        typicalWalletWithBothBudgets.setBudget(monthBudget);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(typicalWalletWithBothBudgets.hasExceededBudget(DUCK_RICE.getDate().getMonth(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                DUCK_RICE.getDate().getYear()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void getIncomeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wallet.getIncomeList().remove(0));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wallet.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void getTransactionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wallet.getTransactionList().remove(0));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 116,
      "joel-lim": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PeopleEmailPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleEmailPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"alex\", \"bernice\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate firstPredicate \u003d new PeopleEmailPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate secondPredicate \u003d new PeopleEmailPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate firstPredicateCopy \u003d new PeopleEmailPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new PeopleEmailPredicate(Collections.singletonList(\"test@example.com\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleEmailPredicate(Arrays.asList(\"test@example.com\", \"test@gmail.com\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_emailContainsPartialKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One partial keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate predicate \u003d new PeopleEmailPredicate(Collections.singletonList(\"example\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Multiple partial keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleEmailPredicate(Arrays.asList(\"test\", \"example\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching partial keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleEmailPredicate(Arrays.asList(\"test\", \"gmail\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_emailDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleEmailPredicate predicate \u003d new PeopleEmailPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleEmailPredicate(Arrays.asList(\"nottest@yahoo.com\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withEmail(\"test@example.com\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PeopleNamePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleNamePredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate firstPredicate \u003d new PeopleNamePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate secondPredicate \u003d new PeopleNamePredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate firstPredicateCopy \u003d new PeopleNamePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate predicate \u003d new PeopleNamePredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_nameContainsPartialKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One partial keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate predicate \u003d new PeopleNamePredicate(Collections.singletonList(\"Ali\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Multiple partial keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"Ali\", \"Bo\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching partial keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"Ali\", \"Bo\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleNamePredicate predicate \u003d new PeopleNamePredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleNamePredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "CheyanneSim": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PeoplePhonePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeoplePhonePredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"9123\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"91234\", \"8826\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate firstPredicate \u003d new PeoplePhonePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate secondPredicate \u003d new PeoplePhonePredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate firstPredicateCopy \u003d new PeoplePhonePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate predicate \u003d new PeoplePhonePredicate(Collections.singletonList(\"91234567\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeoplePhonePredicate(Arrays.asList(\"91234567\", \"8765\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_phoneContainsPartialKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One partial keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate predicate \u003d new PeoplePhonePredicate(Collections.singletonList(\"123\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Multiple partial keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeoplePhonePredicate(Arrays.asList(\"3456\", \"9123\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching partial keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeoplePhonePredicate(Arrays.asList(\"3456\", \"6543\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_phoneDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeoplePhonePredicate predicate \u003d new PeoplePhonePredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeoplePhonePredicate(Arrays.asList(\"11111111\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PeopleTagPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class PeopleTagPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"friend\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"colleague\", \"family\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate firstPredicate \u003d new PeopleTagPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate secondPredicate \u003d new PeopleTagPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate firstPredicateCopy \u003d new PeopleTagPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate predicate \u003d new PeopleTagPredicate(Collections.singletonList(\"friend\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleTagPredicate(Arrays.asList(\"friend\", \"family\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // multiple keyword matched"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleTagPredicate(Arrays.asList(\"friend\", \"family\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"family\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_tagContainsPartialKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // One partial keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate predicate \u003d new PeopleTagPredicate(Collections.singletonList(\"fri\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Multiple partial keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleTagPredicate(Arrays.asList(\"end\", \"amil\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\", \"family\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Only one matching partial keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleTagPredicate(Arrays.asList(\"frie\", \"fam\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        PeopleTagPredicate predicate \u003d new PeopleTagPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        predicate \u003d new PeopleTagPredicate(Arrays.asList(\"family\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DEBT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.MOVIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.SHOPPING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withTags(VALID_TAG_DEBT).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withTags(VALID_TAG_DEBT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DEBT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // @@author cheyannesim"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different debt -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDebts(MOVIE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withLoans(SHOPPING).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DEBT).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 11,
      "-": 85,
      "CheyanneSim": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DEBT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DEBT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_DEBT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 3,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.UserBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        User aliceCopy \u003d new UserBuilder(ALICE).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different user -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        editedAlice \u003d new UserBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        editedAlice \u003d new UserBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/ReminderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void constructor_nullSender_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null, BENSON));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void constructor_nullReceiver_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(ALICE, null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Reminder original \u003d new Reminder(ALICE, BENSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Reminder reminderCopy \u003d new Reminder(ALICE, BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(original.equals(reminderCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(original.equals(original));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(original.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(original.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different sender -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(original.equals(new Reminder(BOB, BENSON)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different receiver -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(original.equals(new Reminder(ALICE, CARL)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/AmountContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class AmountContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"1\", \"2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_amountContainsKeywordsExpenses_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(Collections.singletonList(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withAmount(\"1.56\").buildExpense()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new AmountContainsKeywordsPredicate(Arrays.asList(\"1\", \"9\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withAmount(\"1.55\").buildExpense()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_amountContainsKeywordsIncome_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(Collections.singletonList(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withAmount(\"1.56\").buildIncome()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new AmountContainsKeywordsPredicate(Arrays.asList(\"1\", \"9.11\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withAmount(\"1.55\").buildIncome()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_amountDoesNotContainKeywordsExpense_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withAmount(\"1.33\").buildExpense()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new AmountContainsKeywordsPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withAmount(\"3.55\").buildExpense()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_amountDoesNotContainKeywordsIncome_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        AmountContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new AmountContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withAmount(\"1.22\").buildIncome()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new AmountContainsKeywordsPredicate(Arrays.asList(\"6\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withAmount(\"1.33\").buildIncome()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/AmountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void isValidAmount_onlyAcceptsValidAmounts() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"0.000\")); // too many decimal places"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-1.00\")); // negative amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"$9\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // overflow"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\" + Long.MAX_VALUE)); // overflows"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0.00\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"11.12\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toString_formatsToTwoDecimalPlaces() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(\"$0.00\", Amount.zero().toString()); // 0 dollars"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(\"$1.12\", new Amount(1.12345).toString()); // rounds down"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(\"$9.99\", new Amount(9.98765).toString()); // rounds up"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void compareTo_comparesAmountsCorrectly() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.zero().compareTo(new Amount(1)) \u003c 0); // 0 is less than 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.zero().compareTo(new Amount(0.00)) \u003d\u003d 0); // 0 equals 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void add_addsAmountCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount twoFifty \u003d new Amount(2.5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount tenDollars \u003d new Amount(10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Amount thousandFive \u003d new Amount(1500);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(new Amount(12.5).equals(twoFifty.add(tenDollars)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(new Amount(1510).equals(tenDollars.add(thousandFive)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(new Amount(1502.5).equals(thousandFive.add(twoFifty)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(new Amount(5).equals(twoFifty.add(twoFifty)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void add_producesMaxValueWhenOverflow() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Amount largeAmount \u003d new Amount(Long.MAX_VALUE / 100);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(new Amount(Long.MAX_VALUE), largeAmount.add(largeAmount));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void lessThan_comparesAmountsCorrectly() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Amount.zero().isLessThan(new Amount(1))); // 0 is less than 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(new Amount(1.1).isLessThan(new Amount(1))); // 1.1 is not less than 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void difference_givesCorrectDifference() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(Amount.zero().difference(new Amount(1.5)), new Amount(1.5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(new Amount(9).difference(new Amount(199)), new Amount(190));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 62,
      "CheyanneSim": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/BudgetListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_APRIL_2020;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_JAN_2010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class BudgetListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.get(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_doesNotHaveBudget_returnsDefaultBudget() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList noDefaultBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudget \u003d noDefaultBudgetList.getDefaultBudget();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(defaultBudget, noDefaultBudgetList.get(BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_hasBudget_returnsBudget() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(BUDGET_JAN_2010, tempBudgetList.get(BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_hasMultipleBudgets_returnsCorrectBudget() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(BUDGET_JAN_2010, tempBudgetList.get(BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void getBudget_hasMultipleBudgets_returnsDefaultBudget() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget nonExistentInListBudget \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new BudgetBuilder().withAmount(\"3000\").withMonth(\"09\").withYear(\"2069\").buildBudget();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget defaultBudget \u003d tempBudgetList.getDefaultBudget();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(defaultBudget, tempBudgetList.get(nonExistentInListBudget.getMonth(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                nonExistentInListBudget.getYear()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setDefaultBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.setDefaultBudget(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void containsBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.contains(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void containsBudget_existingBudget_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(tempBudgetList.contains(BUDGET_JAN_2010));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(tempBudgetList.contains(BUDGET_APRIL_2020));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void containsBudget_nonExistentBudget_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget nonExistentBudget \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new BudgetBuilder().withAmount(\"3000\").withMonth(\"09\").withYear(\"2069\").buildBudget();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(tempBudgetList.contains(nonExistentBudget));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.setBudget(null, null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.setBudget(BUDGET_APRIL_2020, null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.setBudget(null, BUDGET_APRIL_2020));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget_budgetNotInList_throwsBudgetNotFoundException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(BudgetNotFoundException.class, () -\u003e tempBudgetList.setBudget(BUDGET_JAN_2010, BUDGET_APRIL_2020));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget_budgetInList_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList expectedBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        expectedBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.setBudget(BUDGET_JAN_2010, BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(expectedBudgetList, tempBudgetList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void addBudget_normalBudget_budgetAddedToList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList expectedBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedBudgetList.setBudgets(List.of(BUDGET_JAN_2010));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedBudgetList, tempBudgetList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void containsBudgetOf_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget tempBudget \u003d Budget.getDefault();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.containsBudgetOf(null, null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.containsBudgetOf(tempBudget.getMonth(), null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.containsBudgetOf(null, tempBudget.getYear()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void containsBudgetOf_budgetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(tempBudgetList.containsBudgetOf(BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void containsBudgetOf_budgetInList_returnsTrue() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetList.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(tempBudgetList.containsBudgetOf(BUDGET_JAN_2010.getMonth(), BUDGET_JAN_2010.getYear()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(tempBudgetList.containsBudgetOf(BUDGET_APRIL_2020.getMonth(), BUDGET_APRIL_2020.getYear()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void equals_sameLists_returnsTrue() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListA \u003d new BudgetList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetListA.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListB \u003d new BudgetList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetListB.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(tempBudgetListA, tempBudgetListB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void equals_differentLists_returnsFalse() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListA \u003d new BudgetList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetListA.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListB \u003d new BudgetList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetListA.add(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        tempBudgetListB.add(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertNotEquals(tempBudgetListA, tempBudgetListB);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void equals_differentDefaultBudget_returnsFalse() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListA \u003d new BudgetList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        tempBudgetListA.setDefaultBudget(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        BudgetList tempBudgetListB \u003d new BudgetList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        tempBudgetListA.setDefaultBudget(BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertNotEquals(tempBudgetListA, tempBudgetListB);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 156,
      "joel-lim": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/BudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_APRIL_2020;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_JAN_2010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_AMOUNT_JAN_2010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_MONTH_JAN_2010;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_YEAR_JAN_2010;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null, null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void equals_sameObjects_returnsTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budget \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                new BudgetBuilder().withAmount(VALID_BUDGET_AMOUNT_JAN_2010)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .withMonth(VALID_BUDGET_MONTH_JAN_2010)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "                        .withYear(VALID_BUDGET_YEAR_JAN_2010).buildBudget();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertEquals(budget, BUDGET_JAN_2010);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void equals_differentObjects_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertNotEquals(BUDGET_JAN_2010, BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void dateEquals_sameDate_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budgetA \u003d new BudgetBuilder().withAmount(\"3000\").withMonth(\"01\").withYear(\"2020\").buildBudget();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budgetB \u003d new BudgetBuilder().withAmount(\"6969\").withMonth(\"01\").withYear(\"2020\").buildBudget();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertTrue(budgetA.dateEquals(budgetB));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void dateEquals_differentDate_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budgetA \u003d new BudgetBuilder().withAmount(\"3000\").withMonth(\"02\").withYear(\"2020\").buildBudget();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        Budget budgetB \u003d new BudgetBuilder().withAmount(\"6969\").withMonth(\"01\").withYear(\"2021\").buildBudget();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        assertFalse(budgetA.dateEquals(budgetB));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DateContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class DateContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"2011-11-11\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2011-11-11\", \"2012-12-12\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DateContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DateContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\"91\")); // not a date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\"phone\")); // not a date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-02-02\")); // Wrong format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(Date.isValidDate(\"2020-02-31\")); // No such date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(Date.isValidDate(\"02/02/2020\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "CheyanneSim": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DebtTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.SUPPER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "class DebtTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Debt(null, null, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt supperCopy \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withAmount(\"10\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDate(\"23/01/2020\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .buildDebt();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Loan supperLoan \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withAmount(\"10\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDate(\"23/01/2020\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .buildLoan();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debtDiffDesc \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDescription(\"Dinner\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withAmount(\"10\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDate(\"23/01/2020\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .buildDebt();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debtDiffAmt \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withAmount(\"20\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDate(\"23/01/2020\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .buildDebt();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        Debt debtDiffDate \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withAmount(\"10\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .withDate(\"12/01/2020\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                .buildDebt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(SUPPER.equals(supperCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertTrue(SUPPER.equals(SUPPER));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different type of transaction -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(supperLoan));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(debtDiffDesc));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(debtDiffAmt));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertFalse(SUPPER.equals(debtDiffDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsKeywordsExpenses_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Chicken\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Chicken Rice\").buildExpense()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Duck\", \"Chicken\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Duck Chicken\").buildExpense()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chicken\", \"Duck\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Beef Duck\").buildExpense()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"dUCk\", \"chICkEn\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Duck Chicken\").buildExpense()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsKeywordsIncome_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Allowance\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance from my mother\").buildIncome()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Allowance\", \"TA Salary\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance Salary\").buildIncome()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Allowance\", \"Salary\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Ang Bao Salary\").buildIncome()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"AlLOwanCe\", \"Ta SalARy\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance TA Salary\").buildIncome()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsSubKeywordsExpenses_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Chic\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Chicken Rice\").buildExpense()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Du\", \"Chic\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Duck Chicken\").buildExpense()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chi\", \"Du\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Beef Duck\").buildExpense()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"dU\", \"CkEn\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Duck Chicken\").buildExpense()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsSubKeywordsIncome_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"All\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance from my mother\").buildIncome()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"ance\", \"lary\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance Salary\").buildIncome()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Allow\", \"Sal\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Ang Bao Salary\").buildIncome()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"AlLO\", \"ARy\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withDescription(\"Allowance TA Salary\").buildIncome()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameDoesNotContainKeywordsExpense_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Rice\").buildExpense()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chicken\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Beef Duck\").buildExpense()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Keywords match amount, date and tag, but does not match name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"12/12/1999\", \"Food\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Duck Rice\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .withDate(\"12/12/1999\").withTag(\"Food\").buildExpense()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameDoesNotContainKeywordsIncome_returnsFalse() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Rice\").buildIncome()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Chicken\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Beef Duck\").buildIncome()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Keywords match amount, date and tag, but does not match name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"12/12/1999\", \"Family\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withDescription(\"Allowance\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .withDate(\"12/12/1999\").withTag(\"Family\").buildIncome()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void constructor_emptyDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(Description.isValidDescription(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"duck rice\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"328 katong laksa\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"P6 Tuition\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Fisherman\u0027s Friend\")); // with non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Gift for Grace (Soft toy plushie)\")); // long descriptions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/LoanTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.BREAKFAST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class LoanTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Loan(null, null, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Loan breakfastCopy \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withDescription(\"Breakfast\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withAmount(\"5\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withDate(\"08/08/2018\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildLoan();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Debt breakfastDebt \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withDescription(\"Breakfast\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withAmount(\"5\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withDate(\"08/08/2018\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildDebt();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Loan loanDiffDesc \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withDescription(\"Lunch\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withAmount(\"5\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withDate(\"08/08/2018\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildLoan();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Loan loanDiffAmt \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withDescription(\"Breakfast\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withAmount(\"10\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withDate(\"08/08/2018\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildLoan();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Loan loanDiffDate \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withDescription(\"Breakfast\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                .withAmount(\"5\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withDate(\"12/01/2020\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildLoan();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(BREAKFAST.equals(breakfastCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertTrue(BREAKFAST.equals(BREAKFAST));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different type of transaction -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(breakfastDebt));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(loanDiffDesc));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(loanDiffAmt));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(BREAKFAST.equals(loanDiffDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 56,
      "joel-lim": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TagContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.testutil.TransactionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsKeywordsExpenses_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"Food\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Food\").buildExpense()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Duck\", \"Chicken\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Duck\").buildExpense()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"dUCk\", \"chICkEn\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Duck\").buildExpense()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsKeywordsIncome_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"Allowance\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Allowance\", \"TA Salary\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Allowance\", \"Salary\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Salary\").buildIncome()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"AlLOwanCe\", \"Ta SalARy\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsSubKeywordsExpenses_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"Chic\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Chicken\").buildExpense()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Du\", \"Chic\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Duck\").buildExpense()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Chi\", \"Du\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Duck\").buildExpense()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"dU\", \"CkEn\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Duck\").buildExpense()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameContainsSubKeywordsIncome_returnsTrue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"All\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"ance\", \"all\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Allow\", \"Sal\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Salary\").buildIncome()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"AlLO\", \"ARy\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertTrue(predicate.test(new TransactionBuilder().withTag(\"Allowance\").buildIncome()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameDoesNotContainKeywordsExpense_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Rice\").buildExpense()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Chicken\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Beef\").buildExpense()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Keywords match amount, date and tag, but does not match name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"12345\", \"12/12/1999\", \"Food\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Duck\").withDescription(\"Food\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .withDate(\"12/12/1999\").buildExpense()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void test_nameDoesNotContainKeywordsIncome_returnsFalse() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Rice\").buildIncome()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Chicken\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Beef\").buildIncome()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        // Keywords match amount, date and tag, but does not match name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"12345\", \"12/12/1999\", \"Family\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        assertFalse(predicate.test(new TransactionBuilder().withTag(\"Allowance\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                .withDate(\"12/12/1999\").withDescription(\"Family\").buildIncome()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/transaction/TransactionListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.MRT_CONCESSION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TransactionListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private final TransactionList\u003cExpense\u003e transactionList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void contains_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.contains(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void contains_transactionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(transactionList.contains(DUCK_RICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void contains_transactionInList_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(transactionList.contains(DUCK_RICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void add_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.add(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransaction_nullTargetTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransaction(null, DUCK_RICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransaction_nullEditedTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransaction(DUCK_RICE, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransaction_targetTransactionNotInList_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.setTransaction(DUCK_RICE, DUCK_RICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransaction_validTransaction_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.setTransaction(DUCK_RICE, MRT_CONCESSION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionList\u003cExpense\u003e expectedTransactionList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedTransactionList.add(MRT_CONCESSION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void remove_nullTransaction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.remove(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void remove_transactionDoesNotExist_throwsTransactionNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(TransactionNotFoundException.class, () -\u003e transactionList.remove(DUCK_RICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void remove_existingTransaction_removesTransaction() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.remove(DUCK_RICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionList\u003cExpense\u003e expectedTransactionList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions_nullTransactionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                transactionList.setTransactions((TransactionList\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions_transactionList_replacesOwnListWithProvidedUniqueTransactionList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionList\u003cExpense\u003e expectedTransactionList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedTransactionList.add(MRT_CONCESSION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.setTransactions(expectedTransactionList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e transactionList.setTransactions((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setTransactions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.add(DUCK_RICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        List\u003cExpense\u003e newList \u003d Collections.singletonList(MRT_CONCESSION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        transactionList.setTransactions(newList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        TransactionList\u003cExpense\u003e expectedTransactionList \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        expectedTransactionList.add(MRT_CONCESSION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedTransactionList, transactionList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            -\u003e transactionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBudget.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_APRIL_2020;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_AMOUNT_JAN_2010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_ISDEFAULT_JAN_2010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_MONTH_JAN_2010;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_BUDGET_YEAR_JAN_2010;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_validBudgetDetails_returnsBudget() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(BUDGET_APRIL_2020, budget.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(INVALID_AMOUNT, VALID_BUDGET_MONTH_JAN_2010,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                VALID_BUDGET_YEAR_JAN_2010, VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(null, VALID_BUDGET_MONTH_JAN_2010, VALID_BUDGET_YEAR_JAN_2010,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_BUDGET_AMOUNT_JAN_2010, \"February\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                VALID_BUDGET_YEAR_JAN_2010, VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Date.MONTH_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_BUDGET_AMOUNT_JAN_2010, null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                VALID_BUDGET_YEAR_JAN_2010, VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Month.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_BUDGET_AMOUNT_JAN_2010, VALID_BUDGET_MONTH_JAN_2010,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                \"-1\", VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Date.YEAR_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_BUDGET_AMOUNT_JAN_2010, VALID_BUDGET_MONTH_JAN_2010,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                null , VALID_BUDGET_ISDEFAULT_JAN_2010);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_defaultBudget_returnsDefaultBudget() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(VALID_BUDGET_AMOUNT_JAN_2010, VALID_BUDGET_MONTH_JAN_2010,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                VALID_BUDGET_YEAR_JAN_2010, \"true\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertTrue(budget.toModelType().isDefault());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDebtTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDebt.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.SUPPER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "class JsonAdaptedDebtTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String VALID_DESC \u003d SUPPER.getDescription().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String VALID_AMOUNT \u003d SUPPER.getAmount().inDollars();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private static final String VALID_DATE \u003d SUPPER.getDate().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_validDebtDetails_returnsDebt() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d new JsonAdaptedDebt(SUPPER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertEquals(SUPPER, debt.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_invalidDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(INVALID_DESC, VALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_nullDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(null, VALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(VALID_DESC, INVALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(VALID_DESC, null, VALID_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(VALID_DESC, VALID_AMOUNT, INVALID_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedDebt debt \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedDebt(VALID_DESC, VALID_AMOUNT, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, debt::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_DUCK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DATE_DUCK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DESC_DUCK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(DUCK_RICE, expense.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(INVALID_DESC, VALID_AMOUNT_DUCK, VALID_DATE_DUCK, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(null, VALID_AMOUNT_DUCK, VALID_DATE_DUCK, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, INVALID_AMOUNT, VALID_DATE_DUCK, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, null, VALID_DATE_DUCK, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, VALID_AMOUNT_DUCK, INVALID_DATE, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, VALID_AMOUNT_DUCK, null, VALID_TAG_DUCK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, VALID_AMOUNT_DUCK, VALID_DATE_DUCK, INVALID_TAG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESC_DUCK, VALID_AMOUNT_DUCK, VALID_DATE_DUCK, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIncomeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.storage.JsonAdaptedIncome.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DATE_ALLOWANCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.VALID_TAG_ALLOWANCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "class JsonAdaptedIncomeTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_validIncomeDetails_returnsIncome() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d new JsonAdaptedIncome(ALLOWANCE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(ALLOWANCE, income.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(INVALID_DESC, VALID_AMOUNT_ALLOWANCE, VALID_DATE_ALLOWANCE, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(null, VALID_AMOUNT_ALLOWANCE, VALID_DATE_ALLOWANCE, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, INVALID_AMOUNT, VALID_DATE_ALLOWANCE, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, null, VALID_DATE_ALLOWANCE, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, VALID_AMOUNT_ALLOWANCE, INVALID_DATE, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, VALID_AMOUNT_ALLOWANCE, null, VALID_TAG_ALLOWANCE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, VALID_AMOUNT_ALLOWANCE, VALID_DATE_ALLOWANCE, INVALID_TAG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_nullTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonAdaptedIncome income \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                new JsonAdaptedIncome(VALID_DESC_ALLOWANCE, VALID_AMOUNT_ALLOWANCE, VALID_DATE_ALLOWANCE, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, income::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLoanTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLoan.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.BREAKFAST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_AMOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.INVALID_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "class JsonAdaptedLoanTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String VALID_DESC \u003d BREAKFAST.getDescription().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final String VALID_AMOUNT \u003d BREAKFAST.getAmount().inDollars();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String VALID_DATE \u003d BREAKFAST.getDate().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_validLoanDetails_returnsLoan() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d new JsonAdaptedLoan(BREAKFAST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(BREAKFAST, loan.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedLoan(INVALID_DESC, VALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullDesc_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedLoan(null, VALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedLoan(VALID_DESC, INVALID_AMOUNT, VALID_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedLoan(VALID_DESC, null, VALID_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "                new JsonAdaptedLoan(VALID_DESC, VALID_AMOUNT, INVALID_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedLoan(VALID_DESC, VALID_AMOUNT, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 63,
      "joel-lim": 4,
      "CheyanneSim": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final List\u003cJsonAdaptedDebt\u003e VALID_USER_OWE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            BENSON.getDebts().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .map(JsonAdaptedDebt::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final List\u003cJsonAdaptedLoan\u003e VALID_USER_LEND \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            BENSON.getLoans().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    .map(JsonAdaptedLoan::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                VALID_USER_OWE, VALID_USER_LEND, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        VALID_USER_OWE, VALID_USER_LEND, invalidTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 23,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedUserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.storage.JsonAdaptedUser.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class JsonAdaptedUserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String VALID_NAME \u003d ALICE.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String VALID_PHONE \u003d ALICE.getPhone().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final String VALID_EMAIL \u003d ALICE.getEmail().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_validUserDetails_returnsUser() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d new JsonAdaptedUser(new UserData(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(ALICE, user.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedUser(INVALID_NAME, VALID_PHONE, VALID_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d new JsonAdaptedUser(null, VALID_PHONE, VALID_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedUser(VALID_NAME, INVALID_PHONE, VALID_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d new JsonAdaptedUser(VALID_NAME, null, VALID_EMAIL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                new JsonAdaptedUser(VALID_NAME, VALID_PHONE, INVALID_EMAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonAdaptedUser user \u003d new JsonAdaptedUser(VALID_NAME, VALID_PHONE, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableUserDataTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.testutil.TypicalUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class JsonSerializableUserDataTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableUserDataTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Path TYPICAL_USER_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalUserData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Path INVALID_USER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidUserData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_typicalUserFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonSerializableUserData dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_USER_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                JsonSerializableUserData.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData userDataFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData typicalUserData \u003d TypicalUser.getTypicalUserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(userDataFromFile, typicalUserData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void toModelType_invalidUserData_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonSerializableUserData dataFromFile \u003d JsonUtil.readJsonFile(INVALID_USER_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                JsonSerializableUserData.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableWalletTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.testutil.TypicalWallet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonSerializableWalletTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWalletTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final Path TYPICAL_TRANSACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalWallet.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final Path INVALID_TRANSACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTransactionWallet.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_typicalWalletFile_success() throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonSerializableWallet dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .readJsonFile(TYPICAL_TRANSACTIONS_FILE, JsonSerializableWallet.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet walletFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet typicalWallet \u003d TypicalWallet.getTypicalWallet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(walletFromFile, typicalWallet);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void toModelType_invalidTransactionFile_throwsIllegalValueException()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonSerializableWallet dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .readJsonFile(INVALID_TRANSACTION_FILE, JsonSerializableWallet.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void defaultBudget_works() throws DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonSerializableWallet dataFromFile \u003d JsonUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .readJsonFile(TYPICAL_TRANSACTIONS_FILE, JsonSerializableWallet.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet walletFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget defaultBudget \u003d walletFromFile.getDefaultBudget();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Budget expectedDefaultBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withAmount(\"1000\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withMonth(\"3\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .withYear(\"2020\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .setAsDefault()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                .buildBudget();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(expectedDefaultBudget, defaultBudget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserDataStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.getTypicalUserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class JsonUserDataStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserDataStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void readUserData_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserData(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private java.util.Optional\u003cReadOnlyUserData\u003e readUserData(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new JsonUserDataStorage(Paths.get(filePath)).readUserData(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertFalse(readUserData(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserData(\"notJsonFormatUserData.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void readUserData_invalidUserData_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserData(\"invalidPersonUserData.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void readAndSaveUserData_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempUserData.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData original \u003d getTypicalUserData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonUserDataStorage jsonUserDataStorage \u003d new JsonUserDataStorage(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        jsonUserDataStorage.saveUserData(original, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ReadOnlyUserData readBack \u003d jsonUserDataStorage.readUserData(filePath).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(original, new UserData(readBack));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData another \u003d new UserData(BOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        jsonUserDataStorage.saveUserData(another, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        readBack \u003d jsonUserDataStorage.readUserData(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(another, new UserData(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        jsonUserDataStorage.saveUserData(original); // file path not specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        readBack \u003d jsonUserDataStorage.readUserData().get(); // file path not specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(original, new UserData(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void saveUserData_nullUserData_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserData(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Saves {@code userData} at the specified {@code filePath}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void saveUserData(ReadOnlyUserData userData, String filePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            new JsonUserDataStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    .saveUserData(userData, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonWalletStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.ALLOWANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.BUDGET_APRIL_2020;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.DUCK_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class JsonWalletStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWalletStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void readWallet_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWallet(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWallet\u003e readWallet(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new JsonWalletStorage(Paths.get(filePath)).readWallet(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertFalse(readWallet(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWallet(\"notJsonFormatWallet.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void readWallet_invalidTransactionWallet_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWallet(\"invalidTransactionWallet.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void readWallet_invalidAndValidTransactionWallet_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWallet(\"invalidAndValidTransactionWallet.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void readWallet_invalidBudgetWallet_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWallet(\"invalidBudgetWallet.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void readAndSaveWallet_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempWallet.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet original \u003d getTypicalWallet();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonWalletStorage jsonWalletStorage \u003d new JsonWalletStorage(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        jsonWalletStorage.saveWallet(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ReadOnlyWallet readBack \u003d jsonWalletStorage.readWallet(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(original, new Wallet(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        original.addIncome(ALLOWANCE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        original.deleteExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        original.setBudget(BUDGET_APRIL_2020);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        jsonWalletStorage.saveWallet(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        readBack \u003d jsonWalletStorage.readWallet(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(original, new Wallet(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        original.addExpense(DUCK_RICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        jsonWalletStorage.saveWallet(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        readBack \u003d jsonWalletStorage.readWallet().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(original, new Wallet(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet_nullWallet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWallet(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Saves {@code wallet} at the specified {@code filePath}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private void saveWallet(ReadOnlyWallet wallet, String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            new JsonWalletStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "                    .saveWallet(wallet, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void saveWallet_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWallet(new Wallet(), null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalUser.getTypicalUserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.testutil.TypicalWallet.getTypicalWallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        JsonUserDataStorage userDataStorage \u003d new JsonUserDataStorage(getTempFilePath(\"ud\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        JsonWalletStorage walletStorage \u003d new JsonWalletStorage(getTempFilePath(\"w\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userDataStorage, userPrefsStorage, walletStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void userDataReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         * {@link JsonUserDataStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserDataStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData original \u003d getTypicalUserData();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        storageManager.saveUserData(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ReadOnlyUserData retrieved \u003d storageManager.readUserData().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(original, new UserData(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void walletReadSave() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "         * {@link JsonWalletStorage} class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "         * More extensive testing of Wallet saving/reading is done in {@link JsonWalletStorageTest} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet original \u003d getTypicalWallet();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        storageManager.saveWallet(original);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        ReadOnlyWallet retrieved \u003d storageManager.readWallet().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertEquals(original, new Wallet(retrieved));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void getUserDataFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertNotNull(storageManager.getUserDataFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void getWalletFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        assertNotNull(storageManager.getWalletFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 22,
      "-": 67,
      "joel-lim": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private boolean isDefault;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.month \u003d LocalDate.now().getMonth();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.year \u003d Year.of(LocalDate.now().getYear());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        isDefault \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.amount \u003d budgetToCopy.getAmount();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.month \u003d budgetToCopy.getMonth();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.year \u003d budgetToCopy.getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        isDefault \u003d budgetToCopy.isDefault();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the {@code amount} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            this.amount \u003d ParserUtil.parseAmount(amount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the {@code month} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            this.month \u003d ParserUtil.parseMonth(month);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the {@code year} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder withYear(String year) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            this.year \u003d ParserUtil.parseYear(year);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Sets the type (default or normal) of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public BudgetBuilder setAsDefault() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        this.isDefault \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     * Returns a {@code Budget} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Budget buildBudget() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        if (isDefault) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return new Budget(amount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Budget(amount, month, year);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 91,
      "joel-lim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTransactionDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletEditCommand.EditTransactionDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " * A utility class to help with building EditTransactionDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "public class EditTransactionDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    private EditTransactionDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder(EditTransactionDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        this.descriptor \u003d new EditTransactionDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Returns an {@code EditTransactionDescriptor} with fields containing {@code transaction}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder(Transaction transaction) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor \u003d new EditTransactionDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setDescription(transaction.getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setAmount(transaction.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setDate(transaction.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setTag(transaction.getTag());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Sets the {@code Date} of the {@code EditTransactionDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * Parses the {@code tag} into a {@code Tag} and set it to the {@code EditTransactionDescriptor}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptorBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        descriptor.setTag(new Tag(tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public EditTransactionDescriptor build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.ReadOnlyUserData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.ReadOnlyWallet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Path getUserDataFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserDataFilePath(Path userDataFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Path getWalletFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setWalletFilePath(Path walletFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ReadOnlyWallet getWallet() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void setUserData(ReadOnlyUserData userData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ReadOnlyUserData getUserData() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isUserDataNull() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasIncome(Income income) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addIncome(Income income) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteIncome(Income target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setIncome(Income target, Income editedIncome) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Amount getTotalExpenditureInMonth(Date date) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void deleteTransaction(Transaction target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "                \"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public ObservableList\u003cTransaction\u003e getTransactionList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public void setDefaultBudget(Budget budget) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public boolean hasExceededBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public Budget getBudget(Month month, Year year) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public ObservableList\u003cIncome\u003e getFilteredIncomeList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    public void setTransaction(Transaction target, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gracegrape"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 26,
      "gracegrape": 64,
      "jumpcutfindo": 32,
      "joel-lim": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TransactionList\u003cDebt\u003e debts;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TransactionList\u003cLoan\u003e loans;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        debts \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        loans \u003d new TransactionList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        debts \u003d personToCopy.getDebts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        loans \u003d personToCopy.getLoans();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the {@code debts} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PersonBuilder withDebts(Debt... debts) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.debts \u003d SampleDataUtil.getDebtList(debts);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (debts.length !\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            this.tags.add(new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            this.tags.remove(new Tag(\"Debt\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the {@code loans} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public PersonBuilder withLoans(Loan... loans) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.loans \u003d SampleDataUtil.getLoanList(loans);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        if (loans.length !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            this.tags.add(new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            this.tags.remove(new Tag(\"Loan\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new Person(name, phone, email, debts, loans, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 26,
      "-": 79,
      "CheyanneSim": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.PEOPLE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.logic.commands.people.PeopleEditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return PEOPLE_COMMAND_TYPE + \" \" + PeopleAddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author cheyannesim"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static String getDebtDescription(Debt debt) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        sb.append(PREFIX_NAME + debt.getDescription().description + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        sb.append(PREFIX_AMOUNT + debt.getAmount().inDollars() + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        sb.append(PREFIX_DATE + debt.getDate().getInputFormat());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static String getLoanDescription(Loan loan) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        sb.append(PREFIX_NAME + loan.getDescription().description + \" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        sb.append(PREFIX_AMOUNT + loan.getAmount().inDollars() + \" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        sb.append(PREFIX_DATE + loan.getDate().getInputFormat());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10,
      "jumpcutfindo": 4,
      "-": 44,
      "CheyanneSim": 10,
      "joel-lim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TransactionBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A utility class to help with building Transaction objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TransactionBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DEFAULT_DESC \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        description \u003d new Description(DEFAULT_DESC);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        date \u003d Date.getDefault();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        tag \u003d Tag.getDefault();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Initializes the TransactionBuilder with the data of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code transactionToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder(Transaction transactionToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        description \u003d transactionToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        amount \u003d transactionToCopy.getAmount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        date \u003d transactionToCopy.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        tag \u003d transactionToCopy.getTag();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Sets the {@code Description} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Parses the {@code amount} into an {@code Amount} and set it to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code Transaction} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Does nothing if amount is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            this.amount \u003d ParserUtil.parseAmount(amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Parses the {@code date} into an {@code Date} and set it to the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * {@code Transaction} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Does nothing if date is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder withDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            this.date \u003d ParserUtil.parseDate(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Sets the {@code Tag} of the {@code Transaction} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public TransactionBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a new Expense object with the builder\u0027s fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Expense buildExpense() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Expense(description, amount, date, tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a new Income object with the builder\u0027s fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Income buildIncome() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Income(description, amount, date, tag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a new Debt object with the builder\u0027s fields (except tag)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Debt buildDebt() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Debt(description, amount, date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a new Loan object with the builder\u0027s fields (except tag)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public Loan buildLoan() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new Loan(description, amount, date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDebts.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "// @@author cheyannesim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "import seedu.address.model.transaction.Debt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " * A utility class containing a list of {@code Debt} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "public class TypicalDebts {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt SUPPER \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"10\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"23/01/2020\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt TEXTBOOK \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"Textbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"100\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"10/08/2019\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt MILKTEA \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"Milk Tea\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"3\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"21/02/2020\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt MOVIE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"Movie\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"13\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"26/12/2019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt IPHONE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"iPhone 13\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"1000\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"03/10/2022\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt TAOBAO \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"TaoBao\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"11\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"11/11/2019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Debt MCGRIDDLE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDescription(\"McGriddle\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withAmount(\"5.40\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDate(\"19/02/2020\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .buildDebt();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    private TypicalDebts() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static List\u003cDebt\u003e getTypicalDebts() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SUPPER, TEXTBOOK, MILKTEA, MOVIE, IPHONE, TAOBAO, MCGRIDDLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CheyanneSim": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gracegrape"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gracegrape": 1,
      "-": 9,
      "CheyanneSim": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLoans.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.transaction.Loan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A utility class containing a list of {@code Loan} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class TypicalLoans {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan BREAKFAST \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Breakfast\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"5\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"08/08/2018\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan LUNCH \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Lunch\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"12\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"09/09/2019\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan DINNER \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Dinner\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"22\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"02/02/2020\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan SUPPER \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Supper\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"8\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"18/08/2018\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan DESSERT \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Dessert\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"6\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"19/09/2019\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan SHOPPING \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Shopping\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"50\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"20/02/2020\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Loan TRAVEL \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDescription(\"Travel\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withAmount(\"120\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .withDate(\"22/02/2022\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            .buildLoan();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 23,
      "joel-lim": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.IPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.MCGRIDDLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.MILKTEA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.MOVIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.TAOBAO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalDebts.TEXTBOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.DESSERT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.DINNER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.LUNCH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.SHOPPING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.SUPPER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.testutil.TypicalLoans.TRAVEL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withLoans()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withTags().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts(TEXTBOOK)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withLoans(LUNCH)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withDebts(MILKTEA, IPHONE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withLoans(DINNER).withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts(MOVIE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withLoans(SUPPER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts(IPHONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withLoans(DESSERT).withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts(TAOBAO)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withLoans(SHOPPING).withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withDebts(MCGRIDDLE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withLoans(TRAVEL).withTags(\"Debt\", \"Loan\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CheyanneSim"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 52,
      "jumpcutfindo": 2,
      "-": 49,
      "CheyanneSim": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class TypicalUser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final User ALICE \u003d new UserBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    // Manually added - User\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final User BOB \u003d new UserBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TypicalUser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns an {@code UserData} of the typical user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static UserData getTypicalUserData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        UserData userData \u003d new UserData(ALICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalWallet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.Wallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "import seedu.address.model.transaction.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A utility class containing a list of {@code Transaction} objects to be used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class TypicalWallet {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String INVALID_DESC \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String INVALID_AMOUNT \u003d \"50$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String INVALID_DATE \u003d \"20 May 2020\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String INVALID_TAG \u003d \"t@g\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DESC_ALLOWANCE \u003d \"Allowance from Parents\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_AMOUNT_ALLOWANCE \u003d \"300\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DATE_ALLOWANCE \u003d \"01/01/2010\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_TAG_ALLOWANCE \u003d \"Allowance\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DESC_TA \u003d \"CS2103 TA\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_AMOUNT_TA \u003d \"3000\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DATE_TA \u003d \"10/10/2010\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_TAG_TA \u003d \"Job\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DESC_DUCK \u003d \"Duck Rice\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_AMOUNT_DUCK \u003d \"3.50\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DATE_DUCK \u003d \"02/01/2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_TAG_DUCK \u003d \"Food\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_MONTH_DUCK \u003d \"01\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_YEAR_DUCK \u003d \"2020\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DESC_MRT \u003d \"Monthly MRT Concession Pass\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_AMOUNT_MRT \u003d \"45\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_DATE_MRT \u003d \"31/01/2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_TAG_MRT \u003d \"Transport\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_DEFAULT_BUDGET_AMOUNT_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_AMOUNT_JAN_2010 \u003d \"300\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_MONTH_JAN_2010 \u003d \"01\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_YEAR_JAN_2010 \u003d \"2010\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String VALID_BUDGET_ISDEFAULT_JAN_2010 \u003d \"false\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_AMOUNT_APR_2020 \u003d \"200\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_MONTH_APR_2020 \u003d \"04\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final String VALID_BUDGET_YEAR_APR_2020 \u003d \"2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DESC_ALLOWANCE \u003d \" \" + PREFIX_NAME + VALID_DESC_ALLOWANCE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String AMOUNT_ALLOWANCE \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_ALLOWANCE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DATE_ALLOWANCE \u003d \" \" + PREFIX_DATE + VALID_DATE_ALLOWANCE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String TAG_ALLOWANCE \u003d \" \" + PREFIX_TAG + VALID_TAG_ALLOWANCE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DESC_TA \u003d \" \" + PREFIX_NAME + VALID_DESC_TA;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String AMOUNT_TA \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_TA;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DATE_TA \u003d \" \" + PREFIX_DATE + VALID_DATE_TA;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String TAG_TA \u003d \" \" + PREFIX_TAG + VALID_TAG_TA;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DESC_DUCK \u003d \" \" + PREFIX_NAME + VALID_DESC_DUCK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String AMOUNT_DUCK \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_DUCK;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DATE_DUCK \u003d \" \" + PREFIX_DATE + VALID_DATE_DUCK;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String TAG_DUCK \u003d \" \" + PREFIX_TAG + VALID_TAG_DUCK;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DESC_MRT \u003d \" \" + PREFIX_NAME + VALID_DESC_MRT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String AMOUNT_MRT \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String DATE_MRT \u003d \" \" + PREFIX_DATE + VALID_DATE_MRT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final String TAG_MRT \u003d \" \" + PREFIX_TAG + VALID_TAG_MRT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Income ALLOWANCE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDescription(VALID_DESC_ALLOWANCE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withAmount(VALID_AMOUNT_ALLOWANCE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDate(VALID_DATE_ALLOWANCE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withTag(VALID_TAG_ALLOWANCE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .buildIncome();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Income TA_JOB \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDescription(VALID_DESC_TA)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withAmount(VALID_AMOUNT_TA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDate(VALID_DATE_TA)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withTag(VALID_TAG_TA)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .buildIncome();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Expense DUCK_RICE \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDescription(VALID_DESC_DUCK)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withAmount(VALID_AMOUNT_DUCK)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDate(VALID_DATE_DUCK)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withTag(VALID_TAG_DUCK)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .buildExpense();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static final Expense MRT_CONCESSION \u003d new TransactionBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDescription(VALID_DESC_MRT)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withAmount(VALID_AMOUNT_MRT)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withDate(VALID_DATE_MRT)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .withTag(VALID_TAG_MRT)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        .buildExpense();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final Budget DEFAULT_BUDGET \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withAmount(VALID_DEFAULT_BUDGET_AMOUNT_ZERO)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .setAsDefault()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .buildBudget();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final Budget BUDGET_JAN_2010 \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withAmount(VALID_BUDGET_AMOUNT_JAN_2010)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withMonth(VALID_BUDGET_MONTH_JAN_2010)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withYear(VALID_BUDGET_YEAR_JAN_2010)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .buildBudget();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static final Budget BUDGET_APRIL_2020 \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withAmount(VALID_BUDGET_AMOUNT_APR_2020)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withMonth(VALID_BUDGET_MONTH_APR_2020)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .withYear(VALID_BUDGET_YEAR_APR_2020)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        .buildBudget();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    private TypicalWallet() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns a {@code Wallet} with all the typical transactions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static Wallet getTypicalWallet() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (Income income : getTypicalIncomes()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.addIncome(income);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "            wallet.addExpense(expense);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        for (Budget budget : getTypicalBudgets()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "            wallet.setBudget(budget);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        wallet.setDefaultBudget(getTypicalDefaultBudget());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return wallet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static List\u003cIncome\u003e getTypicalIncomes() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TA_JOB));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DUCK_RICE, MRT_CONCESSION));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudgets() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUDGET_JAN_2010));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public static Budget getTypicalDefaultBudget() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "        return DEFAULT_BUDGET;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 42,
      "joel-lim": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UserBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import seedu.address.model.person.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A utility class to help with building User objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class UserBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Initializes the UserBuilder with the data of {@code userToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserBuilder(User userToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        name \u003d userToCopy.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        phone \u003d userToCopy.getPhone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        email \u003d userToCopy.getEmail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the {@code Name} of the {@code User} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the {@code Phone} of the {@code User} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Sets the {@code Email} of the {@code User} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public UserBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return new User(name, phone, email);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WalletUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliPrefix.WALLET_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.logic.commands.wallet.WalletIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "import seedu.address.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " * A utility class for Wallet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joel-lim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "public class WalletUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an expense command string for adding the {@code expense}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static String getExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return WALLET_COMMAND_TYPE + \" \" + WalletExpenseCommand.COMMAND_WORD + \" \" + getTransactionDetails(expense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns an income command string for adding the {@code income}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static String getIncomeCommand(Income income) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return WALLET_COMMAND_TYPE + \" \" + WalletIncomeCommand.COMMAND_WORD + \" \" + getTransactionDetails(income);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joel-lim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * Returns the part of command string for the given {@code transaction}\u0027s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    public static String getTransactionDetails(Transaction transaction) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        sb.append(PREFIX_NAME + transaction.getDescription().description + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        sb.append(PREFIX_AMOUNT + transaction.getAmount().inDollars() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        sb.append(PREFIX_DATE + transaction.getDate().getInputFormat() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        sb.append(PREFIX_TAG + transaction.getTag().tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joel-lim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joel-lim": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jumpcutfindo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jumpcutfindo": 2,
      "-": 34
    }
  }
]
